
ADCS_Final _Project_S2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e040  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f30  0800e150  0800e150  0001e150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f080  0800f080  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800f080  0800f080  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f080  0800f080  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f080  0800f080  0001f080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f084  0800f084  0001f084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  200001e4  0800f26c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800f26c  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016770  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca5  00000000  00000000  0003697d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00039628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  0003a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b01  00000000  00000000  0003b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126ec  00000000  00000000  0003ef69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2f8  00000000  00000000  00051655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e094d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc4  00000000  00000000  000e09a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e138 	.word	0x0800e138

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800e138 	.word	0x0800e138

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	460c      	mov	r4, r1
 800118c:	4605      	mov	r5, r0
 800118e:	4621      	mov	r1, r4
 8001190:	4628      	mov	r0, r5
 8001192:	2200      	movs	r2, #0
 8001194:	2300      	movs	r3, #0
 8001196:	f7ff fc11 	bl	80009bc <__aeabi_dcmplt>
 800119a:	b928      	cbnz	r0, 80011a8 <__aeabi_d2lz+0x20>
 800119c:	4628      	mov	r0, r5
 800119e:	4621      	mov	r1, r4
 80011a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a4:	f000 b80a 	b.w	80011bc <__aeabi_d2ulz>
 80011a8:	4628      	mov	r0, r5
 80011aa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ae:	f000 f805 	bl	80011bc <__aeabi_d2ulz>
 80011b2:	4240      	negs	r0, r0
 80011b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop

080011bc <__aeabi_d2ulz>:
 80011bc:	b5d0      	push	{r4, r6, r7, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__aeabi_d2ulz+0x34>)
 80011c2:	4606      	mov	r6, r0
 80011c4:	460f      	mov	r7, r1
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	f7ff fc5d 	bl	8000a88 <__aeabi_d2uiz>
 80011ce:	4604      	mov	r4, r0
 80011d0:	f7ff f908 	bl	80003e4 <__aeabi_ui2d>
 80011d4:	2200      	movs	r2, #0
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <__aeabi_d2ulz+0x38>)
 80011d8:	f7ff f97e 	bl	80004d8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4630      	mov	r0, r6
 80011e2:	4639      	mov	r1, r7
 80011e4:	f7fe ffc0 	bl	8000168 <__aeabi_dsub>
 80011e8:	f7ff fc4e 	bl	8000a88 <__aeabi_d2uiz>
 80011ec:	4621      	mov	r1, r4
 80011ee:	bdd0      	pop	{r4, r6, r7, pc}
 80011f0:	3df00000 	.word	0x3df00000
 80011f4:	41f00000 	.word	0x41f00000

080011f8 <EKF_Init>:
 */

#include "EKF.h"

void EKF_Init(Eekf *ekf_1, float P[2], float Q[2], float R[3])
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]

	/* Reset state estimates */
	ekf_1->phi_r = 0.0f;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r = 0.0f;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	605a      	str	r2, [r3, #4]

	/* Initialise state covariance matrix */
	ekf_1->P[0][0] = P[0];
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] = 0.0f;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] = 0.0f;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] = P[1];
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	615a      	str	r2, [r3, #20]

	/* Set process and measurement noise */
	ekf_1->Q[0] = Q[0];
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	619a      	str	r2, [r3, #24]
	ekf_1->Q[1] = Q[1];
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	61da      	str	r2, [r3, #28]

	ekf_1->R[0] = R[0];
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	621a      	str	r2, [r3, #32]
	ekf_1->R[1] = R[1];
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
	ekf_1->R[2] = R[2];
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	629a      	str	r2, [r3, #40]	; 0x28

}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <EKF_Predict>:

void EKF_Predict(Eekf *ekf_1, float p_rps, float q_rps, float r_rps,
		 float sampleTime_s)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b093      	sub	sp, #76	; 0x4c
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]

	/* Pre-compute trigonometric quantities */
	float sp = sinf(ekf_1->phi_r);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f00a fb6e 	bl	800b95c <sinf>
 8001280:	6478      	str	r0, [r7, #68]	; 0x44
	float cp = cosf(ekf_1->phi_r);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f00a fb30 	bl	800b8ec <cosf>
 800128c:	6438      	str	r0, [r7, #64]	; 0x40
	float tt = tanf(ekf_1->theta_r);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	f00a fb98 	bl	800b9c8 <tanf>
 8001298:	63f8      	str	r0, [r7, #60]	; 0x3c

	/* Compute state transition function dx/dt = f(x,u) */
	float dphidt = p_rps + tt * (q_rps * sp + r_rps * cp);
 800129a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fd71 	bl	8000d84 <__aeabi_fmul>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461c      	mov	r4, r3
 80012a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f7ff fd6b 	bl	8000d84 <__aeabi_fmul>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4620      	mov	r0, r4
 80012b4:	f7ff fc5e 	bl	8000b74 <__addsf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fd61 	bl	8000d84 <__aeabi_fmul>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4619      	mov	r1, r3
 80012c6:	68b8      	ldr	r0, [r7, #8]
 80012c8:	f7ff fc54 	bl	8000b74 <__addsf3>
 80012cc:	4603      	mov	r3, r0
 80012ce:	63bb      	str	r3, [r7, #56]	; 0x38
	float dthetadt = q_rps * cp - r_rps * sp;
 80012d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fd56 	bl	8000d84 <__aeabi_fmul>
 80012d8:	4603      	mov	r3, r0
 80012da:	461c      	mov	r4, r3
 80012dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80012de:	6838      	ldr	r0, [r7, #0]
 80012e0:	f7ff fd50 	bl	8000d84 <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4619      	mov	r1, r3
 80012e8:	4620      	mov	r0, r4
 80012ea:	f7ff fc41 	bl	8000b70 <__aeabi_fsub>
 80012ee:	4603      	mov	r3, r0
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Update state estimates (x(n+1) = x(n) + T * dx/dt) */
	ekf_1->phi_r += sampleTime_s * dphidt;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681c      	ldr	r4, [r3, #0]
 80012f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80012f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80012fa:	f7ff fd43 	bl	8000d84 <__aeabi_fmul>
 80012fe:	4603      	mov	r3, r0
 8001300:	4619      	mov	r1, r3
 8001302:	4620      	mov	r0, r4
 8001304:	f7ff fc36 	bl	8000b74 <__addsf3>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r += sampleTime_s * dthetadt;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	685c      	ldr	r4, [r3, #4]
 8001314:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001316:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001318:	f7ff fd34 	bl	8000d84 <__aeabi_fmul>
 800131c:	4603      	mov	r3, r0
 800131e:	4619      	mov	r1, r3
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff fc27 	bl	8000b74 <__addsf3>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	605a      	str	r2, [r3, #4]

	/* Re-compute trigonometric quantities */
	sp = sinf(ekf_1->phi_r);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f00a fb12 	bl	800b95c <sinf>
 8001338:	6478      	str	r0, [r7, #68]	; 0x44
	cp = cosf(ekf_1->phi_r);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f00a fad4 	bl	800b8ec <cosf>
 8001344:	6438      	str	r0, [r7, #64]	; 0x40
	tt = tanf(ekf_1->theta_r);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	f00a fb3c 	bl	800b9c8 <tanf>
 8001350:	63f8      	str	r0, [r7, #60]	; 0x3c
	float ctInv = 1.0f / cosf(ekf_1->theta_r);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4618      	mov	r0, r3
 8001358:	f00a fac8 	bl	800b8ec <cosf>
 800135c:	4603      	mov	r3, r0
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001364:	f7ff fdc2 	bl	8000eec <__aeabi_fdiv>
 8001368:	4603      	mov	r3, r0
 800136a:	633b      	str	r3, [r7, #48]	; 0x30

	/* Compute Jacobian of state transition function A(x,u) = df(x,u)/dx */
	float A[2][2] = { {
			tt *(q_rps * cp - r_rps * sp),
 800136c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fd08 	bl	8000d84 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	461c      	mov	r4, r3
 8001378:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800137a:	6838      	ldr	r0, [r7, #0]
 800137c:	f7ff fd02 	bl	8000d84 <__aeabi_fmul>
 8001380:	4603      	mov	r3, r0
 8001382:	4619      	mov	r1, r3
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff fbf3 	bl	8000b70 <__aeabi_fsub>
 800138a:	4603      	mov	r3, r0
 800138c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fcf8 	bl	8000d84 <__aeabi_fmul>
 8001394:	4603      	mov	r3, r0
	float A[2][2] = { {
 8001396:	623b      	str	r3, [r7, #32]
			(q_rps * sp + r_rps * cp) *ctInv * ctInv
 8001398:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fcf2 	bl	8000d84 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461c      	mov	r4, r3
 80013a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	f7ff fcec 	bl	8000d84 <__aeabi_fmul>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4620      	mov	r0, r4
 80013b2:	f7ff fbdf 	bl	8000b74 <__addsf3>
 80013b6:	4603      	mov	r3, r0
 80013b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fce2 	bl	8000d84 <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fcdd 	bl	8000d84 <__aeabi_fmul>
 80013ca:	4603      	mov	r3, r0
	float A[2][2] = { {
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
		}, {
			-(q_rps *sp
 80013ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fcd7 	bl	8000d84 <__aeabi_fmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461c      	mov	r4, r3
				+ r_rps * cp), 0.0f
 80013da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f7ff fcd1 	bl	8000d84 <__aeabi_fmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fbc4 	bl	8000b74 <__addsf3>
 80013ec:	4603      	mov	r3, r0
			-(q_rps *sp
 80013ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float A[2][2] = { {
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
	};

	/* Update state covariance matrix P(n+1) = P(n) + T * (A * P(n) + P(n) * A' + Q) (note that A[1][1] = 0!) */
	float Pnew[2][2] = { {
			A[0][0] *ekf_1->P[0][0] + A[0][1] *ekf_1->P[1][0]
 80013fa:	6a3a      	ldr	r2, [r7, #32]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f7ff fcbe 	bl	8000d84 <__aeabi_fmul>
 8001408:	4603      	mov	r3, r0
 800140a:	461c      	mov	r4, r3
 800140c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	4619      	mov	r1, r3
 8001414:	4610      	mov	r0, r2
 8001416:	f7ff fcb5 	bl	8000d84 <__aeabi_fmul>
 800141a:	4603      	mov	r3, r0
 800141c:	4619      	mov	r1, r3
 800141e:	4620      	mov	r0, r4
 8001420:	f7ff fba8 	bl	8000b74 <__addsf3>
 8001424:	4603      	mov	r3, r0
 8001426:	461c      	mov	r4, r3
			+ ekf_1->P[0][0] *A[0][0] + ekf_1->P[0][1] *A[1][0] + ekf_1->Q[0],
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	6a3a      	ldr	r2, [r7, #32]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fca7 	bl	8000d84 <__aeabi_fmul>
 8001436:	4603      	mov	r3, r0
 8001438:	4619      	mov	r1, r3
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff fb9a 	bl	8000b74 <__addsf3>
 8001440:	4603      	mov	r3, r0
 8001442:	461c      	mov	r4, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fc99 	bl	8000d84 <__aeabi_fmul>
 8001452:	4603      	mov	r3, r0
 8001454:	4619      	mov	r1, r3
 8001456:	4620      	mov	r0, r4
 8001458:	f7ff fb8c 	bl	8000b74 <__addsf3>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f7ff fb84 	bl	8000b74 <__addsf3>
 800146c:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 800146e:	613b      	str	r3, [r7, #16]
			A[0][0] *ekf_1->P[0][1] + A[0][1] *ekf_1->P[1][1]
 8001470:	6a3a      	ldr	r2, [r7, #32]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	4619      	mov	r1, r3
 8001478:	4610      	mov	r0, r2
 800147a:	f7ff fc83 	bl	8000d84 <__aeabi_fmul>
 800147e:	4603      	mov	r3, r0
 8001480:	461c      	mov	r4, r3
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f7ff fc7a 	bl	8000d84 <__aeabi_fmul>
 8001490:	4603      	mov	r3, r0
 8001492:	4619      	mov	r1, r3
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff fb6d 	bl	8000b74 <__addsf3>
 800149a:	4603      	mov	r3, r0
 800149c:	461c      	mov	r4, r3
			+ ekf_1->P[0][0] *A[0][1]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fc6c 	bl	8000d84 <__aeabi_fmul>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff fb5f 	bl	8000b74 <__addsf3>
 80014b6:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 80014b8:	617b      	str	r3, [r7, #20]
		}, {
			A[1][0] *ekf_1->P[0][0]
 80014ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f7ff fc5e 	bl	8000d84 <__aeabi_fmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461c      	mov	r4, r3
			+ ekf_1->P[1][0] *A[0][0] + ekf_1->P[1][1] *A[1][0], A[1][0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	6a3a      	ldr	r2, [r7, #32]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fc55 	bl	8000d84 <__aeabi_fmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	4619      	mov	r1, r3
 80014de:	4620      	mov	r0, r4
 80014e0:	f7ff fb48 	bl	8000b74 <__addsf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461c      	mov	r4, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fc47 	bl	8000d84 <__aeabi_fmul>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4619      	mov	r1, r3
 80014fa:	4620      	mov	r0, r4
 80014fc:	f7ff fb3a 	bl	8000b74 <__addsf3>
 8001500:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 8001502:	61bb      	str	r3, [r7, #24]
			+ ekf_1->P[1][0] *A[0][0] + ekf_1->P[1][1] *A[1][0], A[1][0]
 8001504:	6aba      	ldr	r2, [r7, #40]	; 0x28
			*ekf_1->P[0][1] + ekf_1->P[1][0] *A[0][1] + ekf_1->Q[1]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	4619      	mov	r1, r3
 800150c:	4610      	mov	r0, r2
 800150e:	f7ff fc39 	bl	8000d84 <__aeabi_fmul>
 8001512:	4603      	mov	r3, r0
 8001514:	461c      	mov	r4, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fc30 	bl	8000d84 <__aeabi_fmul>
 8001524:	4603      	mov	r3, r0
 8001526:	4619      	mov	r1, r3
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff fb23 	bl	8000b74 <__addsf3>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f7ff fb1b 	bl	8000b74 <__addsf3>
 800153e:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 8001540:	61fb      	str	r3, [r7, #28]
		}
	};

	ekf_1->P[0][0] += sampleTime_s * Pnew[0][0];
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	689c      	ldr	r4, [r3, #8]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fc1a 	bl	8000d84 <__aeabi_fmul>
 8001550:	4603      	mov	r3, r0
 8001552:	4619      	mov	r1, r3
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fb0d 	bl	8000b74 <__addsf3>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] += sampleTime_s * Pnew[0][1];
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	68dc      	ldr	r4, [r3, #12]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fc0a 	bl	8000d84 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff fafd 	bl	8000b74 <__addsf3>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] += sampleTime_s * Pnew[1][0];
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	691c      	ldr	r4, [r3, #16]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fbfa 	bl	8000d84 <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff faed 	bl	8000b74 <__addsf3>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] += sampleTime_s * Pnew[1][1];
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	695c      	ldr	r4, [r3, #20]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fbea 	bl	8000d84 <__aeabi_fmul>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4619      	mov	r1, r3
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff fadd 	bl	8000b74 <__addsf3>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	615a      	str	r2, [r3, #20]

}
 80015c2:	bf00      	nop
 80015c4:	374c      	adds	r7, #76	; 0x4c
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}

080015ca <EKF_Update>:

void EKF_Update(Eekf *ekf_1, float ax_mps2, float ay_mps2, float az_mps2)
{
 80015ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015cc:	b0c5      	sub	sp, #276	; 0x114
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	f107 040c 	add.w	r4, r7, #12
 80015d4:	6020      	str	r0, [r4, #0]
 80015d6:	f107 0008 	add.w	r0, r7, #8
 80015da:	6001      	str	r1, [r0, #0]
 80015dc:	1d39      	adds	r1, r7, #4
 80015de:	600a      	str	r2, [r1, #0]
 80015e0:	463a      	mov	r2, r7
 80015e2:	6013      	str	r3, [r2, #0]

	/* Normalise accelerometer readings */
	float accNormFactor = 1.0f
			      / sqrtf(ax_mps2 * ax_mps2 + ay_mps2 * ay_mps2 + az_mps2 * az_mps2);
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	f7ff fbca 	bl	8000d84 <__aeabi_fmul>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461c      	mov	r4, r3
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	f7ff fbc3 	bl	8000d84 <__aeabi_fmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	4619      	mov	r1, r3
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff fab6 	bl	8000b74 <__addsf3>
 8001608:	4603      	mov	r3, r0
 800160a:	461c      	mov	r4, r3
 800160c:	463b      	mov	r3, r7
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	f7ff fbb7 	bl	8000d84 <__aeabi_fmul>
 8001616:	4603      	mov	r3, r0
 8001618:	4619      	mov	r1, r3
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff faaa 	bl	8000b74 <__addsf3>
 8001620:	4603      	mov	r3, r0
 8001622:	4618      	mov	r0, r3
 8001624:	f00a fa46 	bl	800bab4 <sqrtf>
 8001628:	4603      	mov	r3, r0
	float accNormFactor = 1.0f
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001630:	f7ff fc5c 	bl	8000eec <__aeabi_fdiv>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	float ax_norm = ax_mps2 * accNormFactor;
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	f7ff fb9e 	bl	8000d84 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	float ay_norm = ay_mps2 * accNormFactor;
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	f7ff fb95 	bl	8000d84 <__aeabi_fmul>
 800165a:	4603      	mov	r3, r0
 800165c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	float az_norm = az_mps2 * accNormFactor;
 8001660:	463b      	mov	r3, r7
 8001662:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	f7ff fb8c 	bl	8000d84 <__aeabi_fmul>
 800166c:	4603      	mov	r3, r0
 800166e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	/* Compute Jacobian of output function C(x,u) = dh(x,u)/dx */
	float sp = sinf(ekf_1->phi_r);
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f00a f96e 	bl	800b95c <sinf>
 8001680:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	float cp = cosf(ekf_1->phi_r);
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f00a f92d 	bl	800b8ec <cosf>
 8001692:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	float st = sinf(ekf_1->theta_r);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f00a f95c 	bl	800b95c <sinf>
 80016a4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
	float ct = cosf(ekf_1->theta_r);
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00a f91b 	bl	800b8ec <cosf>
 80016b6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8

	float C[3][2] =
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80016c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 80016ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80016ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016d2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fb54 	bl	8000d84 <__aeabi_fmul>
 80016dc:	4603      	mov	r3, r0
	float C[3][2] =
 80016de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 80016e2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80016e6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80016ea:	f7ff fb4b 	bl	8000d84 <__aeabi_fmul>
 80016ee:	4603      	mov	r3, r0
	float C[3][2] =
 80016f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 80016f4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80016f8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80016fc:	f7ff fb42 	bl	8000d84 <__aeabi_fmul>
 8001700:	4603      	mov	r3, r0
	float C[3][2] =
 8001702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001706:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800170a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800170e:	f7ff fb39 	bl	8000d84 <__aeabi_fmul>
 8001712:	4603      	mov	r3, r0
	float C[3][2] =
 8001714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	/* Compute Kalman gain K = P * C' * (R + C * P * C ')^-1 in steps (note that C[0][0] = 0!) */

	/* P * C'*/
	float PCt[2][3] = { {
			ekf_1->P[0][1] *C[0][1], ekf_1->P[0][0] *C[1][0]
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fb2c 	bl	8000d84 <__aeabi_fmul>
 800172c:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 800172e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			ekf_1->P[0][1] *C[0][1], ekf_1->P[0][0] *C[1][0]
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fb1f 	bl	8000d84 <__aeabi_fmul>
 8001746:	4603      	mov	r3, r0
 8001748:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] *C[1][1], ekf_1->P[0][0] *C[2][0]
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fb13 	bl	8000d84 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	4619      	mov	r1, r3
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff fa06 	bl	8000b74 <__addsf3>
 8001768:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 800176a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			+ ekf_1->P[0][1] *C[1][1], ekf_1->P[0][0] *C[2][0]
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fb01 	bl	8000d84 <__aeabi_fmul>
 8001782:	4603      	mov	r3, r0
 8001784:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] *C[2][1]
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff faf5 	bl	8000d84 <__aeabi_fmul>
 800179a:	4603      	mov	r3, r0
 800179c:	4619      	mov	r1, r3
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff f9e8 	bl	8000b74 <__addsf3>
 80017a4:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 80017a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		}, {
			ekf_1->P[1][1] *C[0][1], ekf_1->P[1][0]
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fae3 	bl	8000d84 <__aeabi_fmul>
 80017be:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 80017c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			ekf_1->P[1][1] *C[0][1], ekf_1->P[1][0]
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	691b      	ldr	r3, [r3, #16]
			*C[1][0] + ekf_1->P[1][1] *C[1][1], ekf_1->P[1][0] *C[2][0]
 80017cc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fad6 	bl	8000d84 <__aeabi_fmul>
 80017d8:	4603      	mov	r3, r0
 80017da:	461c      	mov	r4, r3
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff faca 	bl	8000d84 <__aeabi_fmul>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4619      	mov	r1, r3
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff f9bd 	bl	8000b74 <__addsf3>
 80017fa:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 80017fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			*C[1][0] + ekf_1->P[1][1] *C[1][1], ekf_1->P[1][0] *C[2][0]
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fab8 	bl	8000d84 <__aeabi_fmul>
 8001814:	4603      	mov	r3, r0
 8001816:	461c      	mov	r4, r3
			+ ekf_1->P[1][1] *C[2][1]
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff faac 	bl	8000d84 <__aeabi_fmul>
 800182c:	4603      	mov	r3, r0
 800182e:	4619      	mov	r1, r3
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff f99f 	bl	8000b74 <__addsf3>
 8001836:	4603      	mov	r3, r0
	float PCt[2][3] = { {
 8001838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		}
	};

	/* R + C * P * C' */
	float RCPCt[3][3] = { {
			C[0][1] *PCt[1][0] + ekf_1->R[0], C[0][1]
 800183c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001840:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa9c 	bl	8000d84 <__aeabi_fmul>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f7ff f98a 	bl	8000b74 <__addsf3>
 8001860:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 8001862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			C[0][1] *PCt[1][0] + ekf_1->R[0], C[0][1]
 8001866:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			*PCt[1][1], C[0][1] *PCt[1][2]
 800186a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fa87 	bl	8000d84 <__aeabi_fmul>
 8001876:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 8001878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			*PCt[1][1], C[0][1] *PCt[1][2]
 800187c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001880:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fa7c 	bl	8000d84 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 800188e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		}, {
			C[1][0] *PCt[0][0]
 8001892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fa71 	bl	8000d84 <__aeabi_fmul>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461c      	mov	r4, r3
			+ C[1][1] *PCt[1][0], C[1][0] *PCt[0][1] + C[1][1] *PCt[1][1]
 80018a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80018aa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fa67 	bl	8000d84 <__aeabi_fmul>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4619      	mov	r1, r3
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff f95a 	bl	8000b74 <__addsf3>
 80018c0:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 80018c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			+ C[1][1] *PCt[1][0], C[1][0] *PCt[0][1] + C[1][1] *PCt[1][1]
 80018c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fa57 	bl	8000d84 <__aeabi_fmul>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461c      	mov	r4, r3
 80018da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80018de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fa4d 	bl	8000d84 <__aeabi_fmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff f940 	bl	8000b74 <__addsf3>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
			+ ekf_1->R[1], C[1][0] *PCt[0][2] + C[1][1] *PCt[1][2]
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f7ff f936 	bl	8000b74 <__addsf3>
 8001908:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 800190a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			+ ekf_1->R[1], C[1][0] *PCt[0][2] + C[1][1] *PCt[1][2]
 800190e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001912:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fa33 	bl	8000d84 <__aeabi_fmul>
 800191e:	4603      	mov	r3, r0
 8001920:	461c      	mov	r4, r3
 8001922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fa29 	bl	8000d84 <__aeabi_fmul>
 8001932:	4603      	mov	r3, r0
 8001934:	4619      	mov	r1, r3
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff f91c 	bl	8000b74 <__addsf3>
 800193c:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 800193e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}, {
			C[2][0]
 8001942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
			*PCt[0][0] + C[2][1] *PCt[1][0], C[2][0] *PCt[0][1]
 8001946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fa19 	bl	8000d84 <__aeabi_fmul>
 8001952:	4603      	mov	r3, r0
 8001954:	461c      	mov	r4, r3
 8001956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800195a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa0f 	bl	8000d84 <__aeabi_fmul>
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff f902 	bl	8000b74 <__addsf3>
 8001970:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 8001972:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			*PCt[0][0] + C[2][1] *PCt[1][0], C[2][0] *PCt[0][1]
 8001976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800197a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f9ff 	bl	8000d84 <__aeabi_fmul>
 8001986:	4603      	mov	r3, r0
 8001988:	461c      	mov	r4, r3
			+ C[2][1] *PCt[1][1], C[2][0] *PCt[0][2] + C[2][1] *PCt[1][2]
 800198a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800198e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f9f5 	bl	8000d84 <__aeabi_fmul>
 800199a:	4603      	mov	r3, r0
 800199c:	4619      	mov	r1, r3
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff f8e8 	bl	8000b74 <__addsf3>
 80019a4:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 80019a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			+ C[2][1] *PCt[1][1], C[2][0] *PCt[0][2] + C[2][1] *PCt[1][2]
 80019aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f9e5 	bl	8000d84 <__aeabi_fmul>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461c      	mov	r4, r3
 80019be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f9db 	bl	8000d84 <__aeabi_fmul>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4619      	mov	r1, r3
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff f8ce 	bl	8000b74 <__addsf3>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
			+ ekf_1->R[2]
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f7ff f8c4 	bl	8000b74 <__addsf3>
 80019ec:	4603      	mov	r3, r0
	float RCPCt[3][3] = { {
 80019ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
	};

	/* inv(R + C * P * C') */
	float detMatInv = 1.0f
			  / (RCPCt[0][0]
 80019f2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
			     * (RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2])
 80019f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019fa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f9bf 	bl	8000d84 <__aeabi_fmul>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461d      	mov	r5, r3
 8001a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a0e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f9b5 	bl	8000d84 <__aeabi_fmul>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f7ff f8a6 	bl	8000b70 <__aeabi_fsub>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4619      	mov	r1, r3
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff f9ab 	bl	8000d84 <__aeabi_fmul>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461d      	mov	r5, r3
			     - RCPCt[1][0]
 8001a32:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
			     * (RCPCt[2][2] * RCPCt[0][1]
 8001a36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f99f 	bl	8000d84 <__aeabi_fmul>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461e      	mov	r6, r3
				- RCPCt[2][1] * RCPCt[0][2])
 8001a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f995 	bl	8000d84 <__aeabi_fmul>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4630      	mov	r0, r6
 8001a60:	f7ff f886 	bl	8000b70 <__aeabi_fsub>
 8001a64:	4603      	mov	r3, r0
			     * (RCPCt[2][2] * RCPCt[0][1]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f7ff f98b 	bl	8000d84 <__aeabi_fmul>
 8001a6e:	4603      	mov	r3, r0
			     - RCPCt[1][0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4628      	mov	r0, r5
 8001a74:	f7ff f87c 	bl	8000b70 <__aeabi_fsub>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461d      	mov	r5, r3
			     + RCPCt[2][0]
 8001a7c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
			     * (RCPCt[1][2] * RCPCt[0][1]
 8001a80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f97a 	bl	8000d84 <__aeabi_fmul>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461e      	mov	r6, r3
				- RCPCt[1][1] * RCPCt[0][2]));
 8001a94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f970 	bl	8000d84 <__aeabi_fmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f7ff f861 	bl	8000b70 <__aeabi_fsub>
 8001aae:	4603      	mov	r3, r0
			     * (RCPCt[1][2] * RCPCt[0][1]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7ff f966 	bl	8000d84 <__aeabi_fmul>
 8001ab8:	4603      	mov	r3, r0
			     + RCPCt[2][0]
 8001aba:	4619      	mov	r1, r3
 8001abc:	4628      	mov	r0, r5
 8001abe:	f7ff f859 	bl	8000b74 <__addsf3>
 8001ac2:	4603      	mov	r3, r0
	float detMatInv = 1.0f
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001aca:	f7ff fa0f 	bl	8000eec <__aeabi_fdiv>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	float matInv[3][3] = { {
			RCPCt[2][2] *RCPCt[1][1]
 8001ad4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ad8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f950 	bl	8000d84 <__aeabi_fmul>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461c      	mov	r4, r3
			- RCPCt[2][1] *RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 8001ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f946 	bl	8000d84 <__aeabi_fmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4619      	mov	r1, r3
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff f837 	bl	8000b70 <__aeabi_fsub>
 8001b02:	4603      	mov	r3, r0
	float matInv[3][3] = { {
 8001b04:	66fb      	str	r3, [r7, #108]	; 0x6c
			- RCPCt[2][1] *RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 8001b06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f937 	bl	8000d84 <__aeabi_fmul>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461c      	mov	r4, r3
						      - RCPCt[2][1] * RCPCt[0][2]), RCPCt[1][2] *RCPCt[0][1]
 8001b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b1e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f92d 	bl	8000d84 <__aeabi_fmul>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff f81e 	bl	8000b70 <__aeabi_fsub>
 8001b34:	4603      	mov	r3, r0
			- RCPCt[2][1] *RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 8001b36:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { {
 8001b3a:	673b      	str	r3, [r7, #112]	; 0x70
						      - RCPCt[2][1] * RCPCt[0][2]), RCPCt[1][2] *RCPCt[0][1]
 8001b3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f91c 	bl	8000d84 <__aeabi_fmul>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461c      	mov	r4, r3
			- RCPCt[1][1] *RCPCt[0][2]
 8001b50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b54:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f912 	bl	8000d84 <__aeabi_fmul>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4619      	mov	r1, r3
 8001b64:	4620      	mov	r0, r4
 8001b66:	f7ff f803 	bl	8000b70 <__aeabi_fsub>
 8001b6a:	4603      	mov	r3, r0
	float matInv[3][3] = { {
 8001b6c:	677b      	str	r3, [r7, #116]	; 0x74
		}, {
			-(RCPCt[2][2] * RCPCt[1][0]
 8001b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b72:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f903 	bl	8000d84 <__aeabi_fmul>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461c      	mov	r4, r3
				- RCPCt[2][0] * RCPCt[1][2]), RCPCt[2][2] *RCPCt[0][0]
 8001b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b86:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f8f9 	bl	8000d84 <__aeabi_fmul>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4619      	mov	r1, r3
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7fe ffea 	bl	8000b70 <__aeabi_fsub>
 8001b9c:	4603      	mov	r3, r0
			-(RCPCt[2][2] * RCPCt[1][0]
 8001b9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { {
 8001ba2:	67bb      	str	r3, [r7, #120]	; 0x78
				- RCPCt[2][0] * RCPCt[1][2]), RCPCt[2][2] *RCPCt[0][0]
 8001ba4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ba8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f8e8 	bl	8000d84 <__aeabi_fmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461c      	mov	r4, r3
				- RCPCt[2][0] *RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8001bb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bbc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8de 	bl	8000d84 <__aeabi_fmul>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f7fe ffcf 	bl	8000b70 <__aeabi_fsub>
 8001bd2:	4603      	mov	r3, r0
	float matInv[3][3] = { {
 8001bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
				- RCPCt[2][0] *RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8001bd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bda:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f8cf 	bl	8000d84 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461c      	mov	r4, r3
				- RCPCt[1][0] * RCPCt[0][2])
 8001bea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f8c5 	bl	8000d84 <__aeabi_fmul>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f7fe ffb6 	bl	8000b70 <__aeabi_fsub>
 8001c04:	4603      	mov	r3, r0
				- RCPCt[2][0] *RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8001c06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { {
 8001c0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			}, {
			RCPCt[2][1] *RCPCt[1][0]
 8001c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c12:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f8b3 	bl	8000d84 <__aeabi_fmul>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461c      	mov	r4, r3
			- RCPCt[2][0] *RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 8001c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c26:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f8a9 	bl	8000d84 <__aeabi_fmul>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4619      	mov	r1, r3
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7fe ff9a 	bl	8000b70 <__aeabi_fsub>
 8001c3c:	4603      	mov	r3, r0
	float matInv[3][3] = { {
 8001c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			- RCPCt[2][0] *RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 8001c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c46:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f899 	bl	8000d84 <__aeabi_fmul>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461c      	mov	r4, r3
						      - RCPCt[2][0] * RCPCt[0][1]), RCPCt[1][1] *RCPCt[0][0]
 8001c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f88f 	bl	8000d84 <__aeabi_fmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7fe ff80 	bl	8000b70 <__aeabi_fsub>
 8001c70:	4603      	mov	r3, r0
			- RCPCt[2][0] *RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 8001c72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { {
 8001c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						      - RCPCt[2][0] * RCPCt[0][1]), RCPCt[1][1] *RCPCt[0][0]
 8001c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c7e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f87d 	bl	8000d84 <__aeabi_fmul>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461c      	mov	r4, r3
			- RCPCt[1][0] *RCPCt[0][1]
 8001c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f873 	bl	8000d84 <__aeabi_fmul>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7fe ff64 	bl	8000b70 <__aeabi_fsub>
 8001ca8:	4603      	mov	r3, r0
	float matInv[3][3] = { {
 8001caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
	};

	for (unsigned int i = 0; i < 3; i++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001cb4:	e034      	b.n	8001d20 <EKF_Update+0x756>

		for (unsigned int j = 0; j < 3; j++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001cbc:	e027      	b.n	8001d0e <EKF_Update+0x744>

			matInv[i][j] *= detMatInv;
 8001cbe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8001cda:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f850 	bl	8000d84 <__aeabi_fmul>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001cfe:	4413      	add	r3, r2
 8001d00:	f843 1ca4 	str.w	r1, [r3, #-164]
		for (unsigned int j = 0; j < 3; j++) {
 8001d04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001d0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d9d3      	bls.n	8001cbe <EKF_Update+0x6f4>
	for (unsigned int i = 0; i < 3; i++) {
 8001d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d9c6      	bls.n	8001cb6 <EKF_Update+0x6ec>

	}

	/* C' * inv(R + C * P * C') */
	float CtmatInv[2][3] = { {
			C[1][0] *matInv[1][0] + C[2][0] *matInv[2][0],
 8001d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f827 	bl	8000d84 <__aeabi_fmul>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461c      	mov	r4, r3
 8001d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f81d 	bl	8000d84 <__aeabi_fmul>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7fe ff10 	bl	8000b74 <__addsf3>
 8001d54:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001d56:	657b      	str	r3, [r7, #84]	; 0x54
			C[1][0] *matInv[1][1] + C[2][0] *matInv[2][1], C[1][0]
 8001d58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff f80f 	bl	8000d84 <__aeabi_fmul>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461c      	mov	r4, r3
 8001d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f805 	bl	8000d84 <__aeabi_fmul>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f7fe fef8 	bl	8000b74 <__addsf3>
 8001d84:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001d86:	65bb      	str	r3, [r7, #88]	; 0x58
			C[1][0] *matInv[1][1] + C[2][0] *matInv[2][1], C[1][0]
 8001d88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
			*matInv[1][2] + C[2][0] *matInv[2][2]
 8001d8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fff6 	bl	8000d84 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461c      	mov	r4, r3
 8001d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001da0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ffec 	bl	8000d84 <__aeabi_fmul>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4619      	mov	r1, r3
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7fe fedf 	bl	8000b74 <__addsf3>
 8001db6:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001db8:	65fb      	str	r3, [r7, #92]	; 0x5c
		}, {
			C[0][1]
 8001dba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			*matInv[0][0] + C[1][1] *matInv[1][0] + C[2][1] *matInv[2][0],
 8001dbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ffde 	bl	8000d84 <__aeabi_fmul>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461c      	mov	r4, r3
 8001dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe ffd5 	bl	8000d84 <__aeabi_fmul>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7fe fec8 	bl	8000b74 <__addsf3>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461c      	mov	r4, r3
 8001de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe ffc6 	bl	8000d84 <__aeabi_fmul>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7fe feb9 	bl	8000b74 <__addsf3>
 8001e02:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001e04:	663b      	str	r3, [r7, #96]	; 0x60
			C[0][1] *matInv[0][1] + C[1][1] *matInv[1][1]
 8001e06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe ffb8 	bl	8000d84 <__aeabi_fmul>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461c      	mov	r4, r3
 8001e18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ffaf 	bl	8000d84 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7fe fea2 	bl	8000b74 <__addsf3>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461c      	mov	r4, r3
			+ C[2][1] *matInv[2][1], C[0][1] *matInv[0][2]
 8001e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e38:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe ffa0 	bl	8000d84 <__aeabi_fmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4619      	mov	r1, r3
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7fe fe93 	bl	8000b74 <__addsf3>
 8001e4e:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001e50:	667b      	str	r3, [r7, #100]	; 0x64
			+ C[2][1] *matInv[2][1], C[0][1] *matInv[0][2]
 8001e52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe ff92 	bl	8000d84 <__aeabi_fmul>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461c      	mov	r4, r3
			+ C[1][1] *matInv[1][2] + C[2][1] *matInv[2][2]
 8001e64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff88 	bl	8000d84 <__aeabi_fmul>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4619      	mov	r1, r3
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7fe fe7b 	bl	8000b74 <__addsf3>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461c      	mov	r4, r3
 8001e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e86:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe ff79 	bl	8000d84 <__aeabi_fmul>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4619      	mov	r1, r3
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7fe fe6c 	bl	8000b74 <__addsf3>
 8001e9c:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { {
 8001e9e:	66bb      	str	r3, [r7, #104]	; 0x68
		}
	};

	/* K = P * C' * inv(R + C * P * C') */
	float K[2][3] = { {
			ekf_1->P[0][0] *CtmatInv[0][0]
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe ff69 	bl	8000d84 <__aeabi_fmul>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] *CtmatInv[1][0], ekf_1->P[0][0] *CtmatInv[0][1]
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe ff5e 	bl	8000d84 <__aeabi_fmul>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7fe fe51 	bl	8000b74 <__addsf3>
 8001ed2:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
			+ ekf_1->P[0][1] *CtmatInv[1][0], ekf_1->P[0][0] *CtmatInv[0][1]
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ff4e 	bl	8000d84 <__aeabi_fmul>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] *CtmatInv[1][1], ekf_1->P[0][0] *CtmatInv[0][2]
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe ff43 	bl	8000d84 <__aeabi_fmul>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7fe fe36 	bl	8000b74 <__addsf3>
 8001f08:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001f0a:	643b      	str	r3, [r7, #64]	; 0x40
			+ ekf_1->P[0][1] *CtmatInv[1][1], ekf_1->P[0][0] *CtmatInv[0][2]
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe ff33 	bl	8000d84 <__aeabi_fmul>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] *CtmatInv[1][2]
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe ff28 	bl	8000d84 <__aeabi_fmul>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4619      	mov	r1, r3
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7fe fe1b 	bl	8000b74 <__addsf3>
 8001f3e:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001f40:	647b      	str	r3, [r7, #68]	; 0x44
		}, {
			ekf_1->P[1][0] *CtmatInv[0][0]
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe ff18 	bl	8000d84 <__aeabi_fmul>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461c      	mov	r4, r3
			+ ekf_1->P[1][1] *CtmatInv[1][0], ekf_1->P[1][0] *CtmatInv[0][1]
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe ff0d 	bl	8000d84 <__aeabi_fmul>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7fe fe00 	bl	8000b74 <__addsf3>
 8001f74:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001f76:	64bb      	str	r3, [r7, #72]	; 0x48
			+ ekf_1->P[1][1] *CtmatInv[1][0], ekf_1->P[1][0] *CtmatInv[0][1]
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fefd 	bl	8000d84 <__aeabi_fmul>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461c      	mov	r4, r3
			+ ekf_1->P[1][1] *CtmatInv[1][1], ekf_1->P[1][0] *CtmatInv[0][2]
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fef2 	bl	8000d84 <__aeabi_fmul>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7fe fde5 	bl	8000b74 <__addsf3>
 8001faa:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001fac:	64fb      	str	r3, [r7, #76]	; 0x4c
			+ ekf_1->P[1][1] *CtmatInv[1][1], ekf_1->P[1][0] *CtmatInv[0][2]
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fee2 	bl	8000d84 <__aeabi_fmul>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461c      	mov	r4, r3
			+ ekf_1->P[1][1] *CtmatInv[1][2]
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fed7 	bl	8000d84 <__aeabi_fmul>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f7fe fdca 	bl	8000b74 <__addsf3>
 8001fe0:	4603      	mov	r3, r0
	float K[2][3] = { {
 8001fe2:	653b      	str	r3, [r7, #80]	; 0x50
		}
	};

	/* Update state covariance matrix P(n+1) = (I - K * C) * P(n) */
	float IminKC[2][2] = { {
			1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 8001fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fec9 	bl	8000d84 <__aeabi_fmul>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461c      	mov	r4, r3
 8001ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fec0 	bl	8000d84 <__aeabi_fmul>
 8002004:	4603      	mov	r3, r0
 8002006:	4619      	mov	r1, r3
 8002008:	4620      	mov	r0, r4
 800200a:	f7fe fdb3 	bl	8000b74 <__addsf3>
 800200e:	4603      	mov	r3, r0
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002016:	f7fe fdab 	bl	8000b70 <__aeabi_fsub>
 800201a:	4603      	mov	r3, r0
	float IminKC[2][2] = { {
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
			-(K[0][1] * C[1][1] + K[1][0] * C[2][1])
 800201e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002020:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe feac 	bl	8000d84 <__aeabi_fmul>
 800202c:	4603      	mov	r3, r0
 800202e:	461c      	mov	r4, r3
 8002030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002032:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fea3 	bl	8000d84 <__aeabi_fmul>
 800203e:	4603      	mov	r3, r0
 8002040:	4619      	mov	r1, r3
 8002042:	4620      	mov	r0, r4
 8002044:	f7fe fd96 	bl	8000b74 <__addsf3>
 8002048:	4603      	mov	r3, r0
 800204a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float IminKC[2][2] = { {
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
		},
		{
			-(K[1][1] * C[1][0] + K[1][2] * C[2][0]), 1.0f
 8002050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002052:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fe93 	bl	8000d84 <__aeabi_fmul>
 800205e:	4603      	mov	r3, r0
 8002060:	461c      	mov	r4, r3
 8002062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002064:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fe8a 	bl	8000d84 <__aeabi_fmul>
 8002070:	4603      	mov	r3, r0
 8002072:	4619      	mov	r1, r3
 8002074:	4620      	mov	r0, r4
 8002076:	f7fe fd7d 	bl	8000b74 <__addsf3>
 800207a:	4603      	mov	r3, r0
 800207c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float IminKC[2][2] = { {
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
				- (K[1][1] * C[1][1] + K[1][2] * C[2][1])
 8002082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002084:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fe7a 	bl	8000d84 <__aeabi_fmul>
 8002090:	4603      	mov	r3, r0
 8002092:	461c      	mov	r4, r3
 8002094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fe71 	bl	8000d84 <__aeabi_fmul>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4619      	mov	r1, r3
 80020a6:	4620      	mov	r0, r4
 80020a8:	f7fe fd64 	bl	8000b74 <__addsf3>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4619      	mov	r1, r3
 80020b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80020b4:	f7fe fd5c 	bl	8000b70 <__aeabi_fsub>
 80020b8:	4603      	mov	r3, r0
	float IminKC[2][2] = { {
 80020ba:	63bb      	str	r3, [r7, #56]	; 0x38
			}
	};

	float Pnew[2][2] = { {
			IminKC[0][0] *ekf_1->P[0][0]
 80020bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4619      	mov	r1, r3
 80020c8:	4610      	mov	r0, r2
 80020ca:	f7fe fe5b 	bl	8000d84 <__aeabi_fmul>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461c      	mov	r4, r3
			+ IminKC[0][1] *ekf_1->P[1][0], IminKC[0][0] *ekf_1->P[0][1]
 80020d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f7fe fe50 	bl	8000d84 <__aeabi_fmul>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4619      	mov	r1, r3
 80020e8:	4620      	mov	r0, r4
 80020ea:	f7fe fd43 	bl	8000b74 <__addsf3>
 80020ee:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 80020f0:	61fb      	str	r3, [r7, #28]
			+ IminKC[0][1] *ekf_1->P[1][0], IminKC[0][0] *ekf_1->P[0][1]
 80020f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4619      	mov	r1, r3
 80020fe:	4610      	mov	r0, r2
 8002100:	f7fe fe40 	bl	8000d84 <__aeabi_fmul>
 8002104:	4603      	mov	r3, r0
 8002106:	461c      	mov	r4, r3
			+ IminKC[0][1] *ekf_1->P[1][1]
 8002108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	4619      	mov	r1, r3
 8002114:	4610      	mov	r0, r2
 8002116:	f7fe fe35 	bl	8000d84 <__aeabi_fmul>
 800211a:	4603      	mov	r3, r0
 800211c:	4619      	mov	r1, r3
 800211e:	4620      	mov	r0, r4
 8002120:	f7fe fd28 	bl	8000b74 <__addsf3>
 8002124:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 8002126:	623b      	str	r3, [r7, #32]
		}, {
			IminKC[1][0] *ekf_1->P[0][0]
 8002128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	4619      	mov	r1, r3
 8002134:	4610      	mov	r0, r2
 8002136:	f7fe fe25 	bl	8000d84 <__aeabi_fmul>
 800213a:	4603      	mov	r3, r0
 800213c:	461c      	mov	r4, r3
			+ IminKC[1][1] *ekf_1->P[1][0], IminKC[1][0] *ekf_1->P[0][1]
 800213e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	4619      	mov	r1, r3
 800214a:	4610      	mov	r0, r2
 800214c:	f7fe fe1a 	bl	8000d84 <__aeabi_fmul>
 8002150:	4603      	mov	r3, r0
 8002152:	4619      	mov	r1, r3
 8002154:	4620      	mov	r0, r4
 8002156:	f7fe fd0d 	bl	8000b74 <__addsf3>
 800215a:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
			+ IminKC[1][1] *ekf_1->P[1][0], IminKC[1][0] *ekf_1->P[0][1]
 800215e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f7fe fe0a 	bl	8000d84 <__aeabi_fmul>
 8002170:	4603      	mov	r3, r0
 8002172:	461c      	mov	r4, r3
			+ IminKC[1][1] *ekf_1->P[1][1]
 8002174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	4619      	mov	r1, r3
 8002180:	4610      	mov	r0, r2
 8002182:	f7fe fdff 	bl	8000d84 <__aeabi_fmul>
 8002186:	4603      	mov	r3, r0
 8002188:	4619      	mov	r1, r3
 800218a:	4620      	mov	r0, r4
 800218c:	f7fe fcf2 	bl	8000b74 <__addsf3>
 8002190:	4603      	mov	r3, r0
	float Pnew[2][2] = { {
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
		}
	};

	ekf_1->P[0][0] = Pnew[0][0];
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] = Pnew[0][1];
 800219e:	6a3a      	ldr	r2, [r7, #32]
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] = Pnew[1][0];
 80021a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021aa:	f107 030c 	add.w	r3, r7, #12
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] = Pnew[1][1];
 80021b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	615a      	str	r2, [r3, #20]

	/* Compute output function h(x,u) */
	float h[3] = { sinf(ekf_1->theta_r), -cosf(ekf_1->theta_r) *sinf(ekf_1->phi_r),
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f009 fbc9 	bl	800b95c <sinf>
 80021ca:	4602      	mov	r2, r0
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f107 030c 	add.w	r3, r7, #12
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f009 fb86 	bl	800b8ec <cosf>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f009 fbb4 	bl	800b95c <sinf>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7fe fdc3 	bl	8000d84 <__aeabi_fmul>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	f107 0310 	add.w	r3, r7, #16
 8002206:	605a      	str	r2, [r3, #4]
		       -cosf(ekf_1->theta_r) *cosf(ekf_1->phi_r)
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4618      	mov	r0, r3
 8002212:	f009 fb6b 	bl	800b8ec <cosf>
 8002216:	4603      	mov	r3, r0
 8002218:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f009 fb61 	bl	800b8ec <cosf>
 800222a:	4603      	mov	r3, r0
 800222c:	4619      	mov	r1, r3
 800222e:	4620      	mov	r0, r4
 8002230:	f7fe fda8 	bl	8000d84 <__aeabi_fmul>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
	float h[3] = { sinf(ekf_1->theta_r), -cosf(ekf_1->theta_r) *sinf(ekf_1->phi_r),
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	609a      	str	r2, [r3, #8]
		     };

	/* Update state estimate x(n+1) = x(n) + K * (y - h) */
	ekf_1->phi_r = K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1])
 800223e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4619      	mov	r1, r3
 8002248:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800224c:	f7fe fc90 	bl	8000b70 <__aeabi_fsub>
 8002250:	4603      	mov	r3, r0
 8002252:	4619      	mov	r1, r3
 8002254:	4620      	mov	r0, r4
 8002256:	f7fe fd95 	bl	8000d84 <__aeabi_fmul>
 800225a:	4603      	mov	r3, r0
 800225c:	461d      	mov	r5, r3
 800225e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4619      	mov	r1, r3
 8002268:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800226c:	f7fe fc80 	bl	8000b70 <__aeabi_fsub>
 8002270:	4603      	mov	r3, r0
 8002272:	4619      	mov	r1, r3
 8002274:	4620      	mov	r0, r4
 8002276:	f7fe fd85 	bl	8000d84 <__aeabi_fmul>
 800227a:	4603      	mov	r3, r0
 800227c:	4619      	mov	r1, r3
 800227e:	4628      	mov	r0, r5
 8002280:	f7fe fc78 	bl	8000b74 <__addsf3>
 8002284:	4603      	mov	r3, r0
 8002286:	461d      	mov	r5, r3
		     + K[0][2] * (az_norm - h[2]);
 8002288:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4619      	mov	r1, r3
 8002292:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8002296:	f7fe fc6b 	bl	8000b70 <__aeabi_fsub>
 800229a:	4603      	mov	r3, r0
 800229c:	4619      	mov	r1, r3
 800229e:	4620      	mov	r0, r4
 80022a0:	f7fe fd70 	bl	8000d84 <__aeabi_fmul>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4619      	mov	r1, r3
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7fe fc63 	bl	8000b74 <__addsf3>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
	ekf_1->phi_r = K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1])
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r = K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1])
 80022ba:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80022c8:	f7fe fc52 	bl	8000b70 <__aeabi_fsub>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4619      	mov	r1, r3
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7fe fd57 	bl	8000d84 <__aeabi_fmul>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461d      	mov	r5, r3
 80022da:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4619      	mov	r1, r3
 80022e4:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80022e8:	f7fe fc42 	bl	8000b70 <__aeabi_fsub>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4619      	mov	r1, r3
 80022f0:	4620      	mov	r0, r4
 80022f2:	f7fe fd47 	bl	8000d84 <__aeabi_fmul>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4619      	mov	r1, r3
 80022fa:	4628      	mov	r0, r5
 80022fc:	f7fe fc3a 	bl	8000b74 <__addsf3>
 8002300:	4603      	mov	r3, r0
 8002302:	461d      	mov	r5, r3
		       + K[1][2] * (az_norm - h[2]);
 8002304:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002306:	f107 0310 	add.w	r3, r7, #16
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4619      	mov	r1, r3
 800230e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8002312:	f7fe fc2d 	bl	8000b70 <__aeabi_fsub>
 8002316:	4603      	mov	r3, r0
 8002318:	4619      	mov	r1, r3
 800231a:	4620      	mov	r0, r4
 800231c:	f7fe fd32 	bl	8000d84 <__aeabi_fmul>
 8002320:	4603      	mov	r3, r0
 8002322:	4619      	mov	r1, r3
 8002324:	4628      	mov	r0, r5
 8002326:	f7fe fc25 	bl	8000b74 <__addsf3>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
	ekf_1->theta_r = K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1])
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]

	return;
 8002336:	bf00      	nop
}
 8002338:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800233c:	46bd      	mov	sp, r7
 800233e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002340 <LSM9DS1_ReadReg>:
 * @brief  Read data from Specific Register address of LSM9DS1
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address from which data is to be read
 */
uint8_t LSM9DS1_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002352:	b2db      	uxtb	r3, r3
 8002354:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	2110      	movs	r1, #16
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <LSM9DS1_ReadReg+0x50>)
 800235c:	f002 fd78 	bl	8004e50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 8002360:	1cf9      	adds	r1, r7, #3
 8002362:	2364      	movs	r3, #100	; 0x64
 8002364:	2201      	movs	r2, #1
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f003 fa1c 	bl	80057a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 800236c:	f107 010f 	add.w	r1, r7, #15
 8002370:	2364      	movs	r3, #100	; 0x64
 8002372:	2201      	movs	r2, #1
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f003 fb59 	bl	8005a2c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 800237a:	2201      	movs	r2, #1
 800237c:	2110      	movs	r1, #16
 800237e:	4804      	ldr	r0, [pc, #16]	; (8002390 <LSM9DS1_ReadReg+0x50>)
 8002380:	f002 fd66 	bl	8004e50 <HAL_GPIO_WritePin>
	return val;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40010800 	.word	0x40010800

08002394 <LSM9DS1_WriteReg>:
 * @brief  Write on Specific Register address of LSM9DS1
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address where certain value is to be written
 */
void LSM9DS1_WriteReg(SPI_HandleTypeDef *hspi, uint8_t add, uint8_t val) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
 80023a0:	4613      	mov	r3, r2
 80023a2:	70bb      	strb	r3, [r7, #2]
	add &= 0x7F;  // clear the MSB to indicate a write operation
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2110      	movs	r1, #16
 80023b2:	480c      	ldr	r0, [pc, #48]	; (80023e4 <LSM9DS1_WriteReg+0x50>)
 80023b4:	f002 fd4c 	bl	8004e50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 80023b8:	1cf9      	adds	r1, r7, #3
 80023ba:	2364      	movs	r3, #100	; 0x64
 80023bc:	2201      	movs	r2, #1
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f003 f9f0 	bl	80057a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 80023c4:	1cb9      	adds	r1, r7, #2
 80023c6:	2364      	movs	r3, #100	; 0x64
 80023c8:	2201      	movs	r2, #1
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f003 f9ea 	bl	80057a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	2110      	movs	r1, #16
 80023d4:	4803      	ldr	r0, [pc, #12]	; (80023e4 <LSM9DS1_WriteReg+0x50>)
 80023d6:	f002 fd3b 	bl	8004e50 <HAL_GPIO_WritePin>

}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40010800 	.word	0x40010800

080023e8 <LSM9DS1_Init>:
 * @brief  Initialize LSM9DS1 to work in 16-bit, 1.25Hz ODR, ±4 Gauss and Continuous conversion Mode
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  ctrl2 Control Register Value to choose LSM9DS1 sensor Scale
 */
void LSM9DS1_Init(SPI_HandleTypeDef *hspi, uint8_t ctrl2) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
	uint8_t ctrl1 = 0x74; // set the magnetic resolution to 16-bit, 20 Hz ODR, UHP mode in X-Y axis
 80023f4:	2374      	movs	r3, #116	; 0x74
 80023f6:	73fb      	strb	r3, [r7, #15]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG1_M, ctrl1);
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	461a      	mov	r2, r3
 80023fc:	2120      	movs	r1, #32
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffc8 	bl	8002394 <LSM9DS1_WriteReg>

	/* Change the full-scale range to ±4 Gauss */

	//value to set the full-scale range
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG2_M, ctrl2);
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	461a      	mov	r2, r3
 8002408:	2121      	movs	r1, #33	; 0x21
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffc2 	bl	8002394 <LSM9DS1_WriteReg>

	/* Change the control register 3 to continuous conversion mode */

	uint8_t ctrl3 = 0x00; // value to set the continuous conversion mode
 8002410:	2300      	movs	r3, #0
 8002412:	73bb      	strb	r3, [r7, #14]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG3_M, ctrl3);
 8002414:	7bbb      	ldrb	r3, [r7, #14]
 8002416:	461a      	mov	r2, r3
 8002418:	2122      	movs	r1, #34	; 0x22
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffba 	bl	8002394 <LSM9DS1_WriteReg>

	uint8_t ctrl4 = 0x0C; // value to set the UHP mode on Z-axis
 8002420:	230c      	movs	r3, #12
 8002422:	737b      	strb	r3, [r7, #13]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG4_M, ctrl4);
 8002424:	7b7b      	ldrb	r3, [r7, #13]
 8002426:	461a      	mov	r2, r3
 8002428:	2123      	movs	r1, #35	; 0x23
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffb2 	bl	8002394 <LSM9DS1_WriteReg>
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <MPU_begin>:

//MPU6500 Functions

uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU6500_t *pMPU6500) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	// Initialize variables
	uint8_t addr, val;
//	 Confirm device
//	HAL_Delay(100);
	whoAmI();
 8002442:	f000 f8dd 	bl	8002600 <whoAmI>
	readRegisters(WHO_AM_I, 1, &check);
 8002446:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <MPU_begin+0x7c>)
 8002448:	2101      	movs	r1, #1
 800244a:	2075      	movs	r0, #117	; 0x75
 800244c:	f000 f8c5 	bl	80025da <readRegisters>
	if (check == WHO_AM_I_6500_ANS) {
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <MPU_begin+0x7c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d128      	bne.n	80024aa <MPU_begin+0x72>
//	 Startup / reset the sensor
		addr = PWR_MGMT_1;
 8002458:	236b      	movs	r3, #107	; 0x6b
 800245a:	73fb      	strb	r3, [r7, #15]
		val = 0x00;
 800245c:	2300      	movs	r3, #0
 800245e:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002460:	7bba      	ldrb	r2, [r7, #14]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f8a2 	bl	80025b0 <writeRegister>

		// Disable I2C (SPI only)
		addr = USER_CTRL;
 800246c:	236a      	movs	r3, #106	; 0x6a
 800246e:	73fb      	strb	r3, [r7, #15]
		val = 0x10;
 8002470:	2310      	movs	r3, #16
 8002472:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002474:	7bba      	ldrb	r2, [r7, #14]
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f898 	bl	80025b0 <writeRegister>

		// Configure DLPF value()
		val = 0x11;
 8002480:	2311      	movs	r3, #17
 8002482:	73bb      	strb	r3, [r7, #14]
		MPU6500_SetDLPFBandwidth(DLPF_BANDWIDTH_20HZ);
 8002484:	2003      	movs	r0, #3
 8002486:	f000 f8c9 	bl	800261c <MPU6500_SetDLPFBandwidth>

		// Set the full scale ranges
		MPU_writeAccFullScaleRange(pMPU6500,
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002490:	4619      	mov	r1, r3
 8002492:	6838      	ldr	r0, [r7, #0]
 8002494:	f000 f8d8 	bl	8002648 <MPU_writeAccFullScaleRange>
				pMPU6500->settings.aFullScaleRange);
		MPU_writeGyroFullScaleRange(pMPU6500,
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800249e:	4619      	mov	r1, r3
 80024a0:	6838      	ldr	r0, [r7, #0]
 80024a2:	f000 f92d 	bl	8002700 <MPU_writeGyroFullScaleRange>
				pMPU6500->settings.gFullScaleRange);
		return 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <MPU_begin+0x74>
	} else {
		return 0;
 80024aa:	2300      	movs	r3, #0
	}
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000047c 	.word	0x2000047c

080024b8 <MPU_CS>:

void MPU_CS(uint8_t state) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, CS_MPU_Pin, state);
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	461a      	mov	r2, r3
 80024c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ca:	4803      	ldr	r0, [pc, #12]	; (80024d8 <MPU_CS+0x20>)
 80024cc:	f002 fcc0 	bl	8004e50 <HAL_GPIO_WritePin>
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40010c00 	.word	0x40010c00

080024dc <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
	if (HAL_SPI_TransmitReceive(&IMU_STREAM, (uint8_t*) &Byte,
 80024ea:	f107 020f 	add.w	r2, r7, #15
 80024ee:	1df9      	adds	r1, r7, #7
 80024f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	2301      	movs	r3, #1
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <SPIx_WriteRead+0x38>)
 80024fa:	f003 fbb0 	bl	8005c5e <HAL_SPI_TransmitReceive>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <SPIx_WriteRead+0x2c>
			(uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK) {
		return -1;
 8002504:	23ff      	movs	r3, #255	; 0xff
 8002506:	e000      	b.n	800250a <SPIx_WriteRead+0x2e>
	} else {
	}
	return receivedbyte;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000504 	.word	0x20000504

08002518 <MPU_SPI_Write>:

void MPU_SPI_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	70fb      	strb	r3, [r7, #3]
 8002524:	4613      	mov	r3, r2
 8002526:	803b      	strh	r3, [r7, #0]
	MPU_CS(CS_SEL);
 8002528:	2000      	movs	r0, #0
 800252a:	f7ff ffc5 	bl	80024b8 <MPU_CS>
	SPIx_WriteRead(WriteAddr);
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ffd3 	bl	80024dc <SPIx_WriteRead>
	while (NumByteToWrite >= 0x01) {
 8002536:	e00a      	b.n	800254e <MPU_SPI_Write+0x36>
		SPIx_WriteRead(*pBuffer);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ffcd 	bl	80024dc <SPIx_WriteRead>
		NumByteToWrite--;
 8002542:	883b      	ldrh	r3, [r7, #0]
 8002544:	3b01      	subs	r3, #1
 8002546:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3301      	adds	r3, #1
 800254c:	607b      	str	r3, [r7, #4]
	while (NumByteToWrite >= 0x01) {
 800254e:	883b      	ldrh	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f1      	bne.n	8002538 <MPU_SPI_Write+0x20>
	}
	MPU_CS(CS_DES);
 8002554:	2001      	movs	r0, #1
 8002556:	f7ff ffaf 	bl	80024b8 <MPU_CS>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
 8002570:	4613      	mov	r3, r2
 8002572:	803b      	strh	r3, [r7, #0]

	MPU_CS(CS_SEL);
 8002574:	2000      	movs	r0, #0
 8002576:	f7ff ff9f 	bl	80024b8 <MPU_CS>
	uint8_t data = ReadAddr | READWRITE_CMD;
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	4313      	orrs	r3, r2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&IMU_STREAM, &data, 1, 100);
 8002584:	f107 010f 	add.w	r1, r7, #15
 8002588:	2364      	movs	r3, #100	; 0x64
 800258a:	2201      	movs	r2, #1
 800258c:	4807      	ldr	r0, [pc, #28]	; (80025ac <MPU_SPI_Read+0x48>)
 800258e:	f003 f909 	bl	80057a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&IMU_STREAM, pBuffer, NumByteToRead, 100);
 8002592:	883a      	ldrh	r2, [r7, #0]
 8002594:	2364      	movs	r3, #100	; 0x64
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <MPU_SPI_Read+0x48>)
 800259a:	f003 fa47 	bl	8005a2c <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 800259e:	2001      	movs	r0, #1
 80025a0:	f7ff ff8a 	bl	80024b8 <MPU_CS>
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000504 	.word	0x20000504

080025b0 <writeRegister>:

/* writes a byte to MPU6500 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	4613      	mov	r3, r2
 80025be:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 80025c0:	79f9      	ldrb	r1, [r7, #7]
 80025c2:	1dbb      	adds	r3, r7, #6
 80025c4:	2201      	movs	r2, #1
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ffa6 	bl	8002518 <MPU_SPI_Write>
	HAL_Delay(10);
 80025cc:	200a      	movs	r0, #10
 80025ce:	f002 f9b3 	bl	8004938 <HAL_Delay>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <readRegisters>:

/* reads registers from MPU6500 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t *dest) {
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	603a      	str	r2, [r7, #0]
 80025e4:	71fb      	strb	r3, [r7, #7]
 80025e6:	460b      	mov	r3, r1
 80025e8:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	4619      	mov	r1, r3
 80025f2:	6838      	ldr	r0, [r7, #0]
 80025f4:	f7ff ffb6 	bl	8002564 <MPU_SPI_Read>
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <whoAmI>:

/* gets the MPU6500 WHO_AM_I register value, expected to be 0x71 */
uint8_t whoAmI() {
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I, 1, &_buffer1);
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <whoAmI+0x18>)
 8002606:	2101      	movs	r1, #1
 8002608:	2075      	movs	r0, #117	; 0x75
 800260a:	f7ff ffe6 	bl	80025da <readRegisters>

	// return the register value
	return _buffer1;
 800260e:	4b02      	ldr	r3, [pc, #8]	; (8002618 <whoAmI+0x18>)
 8002610:	781b      	ldrb	r3, [r3, #0]
}
 8002612:	4618      	mov	r0, r3
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000298 	.word	0x20000298

0800261c <MPU6500_SetDLPFBandwidth>:

/* sets the DLPF bandwidth to values other than default */
void MPU6500_SetDLPFBandwidth(DLPFBandwidth bandwidth) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
	writeRegister(ACCEL_CONFIG2, bandwidth);
 8002626:	221d      	movs	r2, #29
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f7ff ffbf 	bl	80025b0 <writeRegister>
	writeRegister(CONFIG, bandwidth);
 8002632:	221a      	movs	r2, #26
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f7ff ffb9 	bl	80025b0 <writeRegister>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(MPU6500_t *pMPU6500, uint8_t aScale) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = ACCEL_CONFIG;
 8002654:	231c      	movs	r3, #28
 8002656:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (aScale) {
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d83e      	bhi.n	80026dc <MPU_writeAccFullScaleRange+0x94>
 800265e:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <MPU_writeAccFullScaleRange+0x1c>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	08002675 	.word	0x08002675
 8002668:	0800268f 	.word	0x0800268f
 800266c:	080026a9 	.word	0x080026a9
 8002670:	080026c3 	.word	0x080026c3
	case AFSR_2G:
		pMPU6500->sensorData.aScaleFactor = 16384.0;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800267a:	60da      	str	r2, [r3, #12]
		val = 0x00;
 800267c:	2300      	movs	r3, #0
 800267e:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002680:	7bba      	ldrb	r2, [r7, #14]
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff92 	bl	80025b0 <writeRegister>
		break;
 800268c:	e033      	b.n	80026f6 <MPU_writeAccFullScaleRange+0xae>
	case AFSR_4G:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002694:	60da      	str	r2, [r3, #12]
		val = 0x08;
 8002696:	2308      	movs	r3, #8
 8002698:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800269a:	7bba      	ldrb	r2, [r7, #14]
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff85 	bl	80025b0 <writeRegister>
		break;
 80026a6:	e026      	b.n	80026f6 <MPU_writeAccFullScaleRange+0xae>
	case AFSR_8G:
		pMPU6500->sensorData.aScaleFactor = 4096.0;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80026ae:	60da      	str	r2, [r3, #12]
		val = 0x10;
 80026b0:	2310      	movs	r3, #16
 80026b2:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80026b4:	7bba      	ldrb	r2, [r7, #14]
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff78 	bl	80025b0 <writeRegister>
		break;
 80026c0:	e019      	b.n	80026f6 <MPU_writeAccFullScaleRange+0xae>
	case AFSR_16G:
		pMPU6500->sensorData.aScaleFactor = 2048.0;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80026c8:	60da      	str	r2, [r3, #12]
		val = 0x18;
 80026ca:	2318      	movs	r3, #24
 80026cc:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80026ce:	7bba      	ldrb	r2, [r7, #14]
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff6b 	bl	80025b0 <writeRegister>
		break;
 80026da:	e00c      	b.n	80026f6 <MPU_writeAccFullScaleRange+0xae>
	default:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80026e2:	60da      	str	r2, [r3, #12]
		val = 0x08;
 80026e4:	2308      	movs	r3, #8
 80026e6:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80026e8:	7bba      	ldrb	r2, [r7, #14]
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ff5e 	bl	80025b0 <writeRegister>
		break;
 80026f4:	bf00      	nop
	}
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop

08002700 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(MPU6500_t *pMPU6500, uint8_t gScale) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = GYRO_CONFIG;
 800270c:	231b      	movs	r3, #27
 800270e:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (gScale) {
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d83a      	bhi.n	800278c <MPU_writeGyroFullScaleRange+0x8c>
 8002716:	a201      	add	r2, pc, #4	; (adr r2, 800271c <MPU_writeGyroFullScaleRange+0x1c>)
 8002718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271c:	0800272d 	.word	0x0800272d
 8002720:	08002745 	.word	0x08002745
 8002724:	0800275d 	.word	0x0800275d
 8002728:	08002775 	.word	0x08002775
	case GFSR_250DPS:
		pMPU6500->sensorData.gScaleFactor = 131.0;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <MPU_writeGyroFullScaleRange+0xac>)
 8002730:	611a      	str	r2, [r3, #16]
		val = 0x00;
 8002732:	2300      	movs	r3, #0
 8002734:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002736:	7bba      	ldrb	r2, [r7, #14]
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff37 	bl	80025b0 <writeRegister>
		break;
 8002742:	e02f      	b.n	80027a4 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_500DPS:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <MPU_writeGyroFullScaleRange+0xb0>)
 8002748:	611a      	str	r2, [r3, #16]
		val = 0x08;
 800274a:	2308      	movs	r3, #8
 800274c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800274e:	7bba      	ldrb	r2, [r7, #14]
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff2b 	bl	80025b0 <writeRegister>
		break;
 800275a:	e023      	b.n	80027a4 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_1000DPS:
		pMPU6500->sensorData.gScaleFactor = 32.8;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <MPU_writeGyroFullScaleRange+0xb4>)
 8002760:	611a      	str	r2, [r3, #16]
		val = 0x10;
 8002762:	2310      	movs	r3, #16
 8002764:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002766:	7bba      	ldrb	r2, [r7, #14]
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff1f 	bl	80025b0 <writeRegister>
		break;
 8002772:	e017      	b.n	80027a4 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_2000DPS:
		pMPU6500->sensorData.gScaleFactor = 16.4;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <MPU_writeGyroFullScaleRange+0xb8>)
 8002778:	611a      	str	r2, [r3, #16]
		val = 0x18;
 800277a:	2318      	movs	r3, #24
 800277c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800277e:	7bba      	ldrb	r2, [r7, #14]
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff13 	bl	80025b0 <writeRegister>
		break;
 800278a:	e00b      	b.n	80027a4 <MPU_writeGyroFullScaleRange+0xa4>
	default:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <MPU_writeGyroFullScaleRange+0xb0>)
 8002790:	611a      	str	r2, [r3, #16]
		val = 0x08;
 8002792:	2308      	movs	r3, #8
 8002794:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002796:	7bba      	ldrb	r2, [r7, #14]
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff07 	bl	80025b0 <writeRegister>
		break;
 80027a2:	bf00      	nop
	}
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	43030000 	.word	0x43030000
 80027b0:	42830000 	.word	0x42830000
 80027b4:	42033333 	.word	0x42033333
 80027b8:	41833333 	.word	0x41833333

080027bc <MPU6500_GetData>:
	MPU_CS(CS_DES);
	return val;
}

/* read the data, each argument should point to a array for x, y, and x */
void MPU6500_GetData(MPU6500_t *pMPU6500) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU6500
	readRegisters(ACCEL_OUT, 14, _buffer);
 80027c4:	233b      	movs	r3, #59	; 0x3b
 80027c6:	4a25      	ldr	r2, [pc, #148]	; (800285c <MPU6500_GetData+0xa0>)
 80027c8:	210e      	movs	r1, #14
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff05 	bl	80025da <readRegisters>

	// combine into 16 bit values
	pMPU6500->rawData.ax = (((int16_t) _buffer[0]) << 8) | _buffer[1];
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <MPU6500_GetData+0xa0>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	4b20      	ldr	r3, [pc, #128]	; (800285c <MPU6500_GetData+0xa0>)
 80027da:	785b      	ldrb	r3, [r3, #1]
 80027dc:	b21b      	sxth	r3, r3
 80027de:	4313      	orrs	r3, r2
 80027e0:	b21a      	sxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	801a      	strh	r2, [r3, #0]
	pMPU6500->rawData.ay = (((int16_t) _buffer[2]) << 8) | _buffer[3];
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <MPU6500_GetData+0xa0>)
 80027e8:	789b      	ldrb	r3, [r3, #2]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <MPU6500_GetData+0xa0>)
 80027f0:	78db      	ldrb	r3, [r3, #3]
 80027f2:	b21b      	sxth	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	805a      	strh	r2, [r3, #2]
	pMPU6500->rawData.az = (((int16_t) _buffer[4]) << 8) | _buffer[5];
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <MPU6500_GetData+0xa0>)
 80027fe:	791b      	ldrb	r3, [r3, #4]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	b21a      	sxth	r2, r3
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <MPU6500_GetData+0xa0>)
 8002806:	795b      	ldrb	r3, [r3, #5]
 8002808:	b21b      	sxth	r3, r3
 800280a:	4313      	orrs	r3, r2
 800280c:	b21a      	sxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	809a      	strh	r2, [r3, #4]
//	Accelerometer after offset reduction
//	pMPU6500->rawData.ax = pMPU6500->rawData.ax - 32767;
//	pMPU6500->rawData.ay = pMPU6500->rawData.ay - 32767;
//	pMPU6500->rawData.az = pMPU6500->rawData.az - 15650 + 16384;

	pMPU6500->rawData.gx = (((int16_t) _buffer[8]) << 8) | _buffer[9];
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <MPU6500_GetData+0xa0>)
 8002814:	7a1b      	ldrb	r3, [r3, #8]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	b21a      	sxth	r2, r3
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <MPU6500_GetData+0xa0>)
 800281c:	7a5b      	ldrb	r3, [r3, #9]
 800281e:	b21b      	sxth	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	b21a      	sxth	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	80da      	strh	r2, [r3, #6]
	pMPU6500->rawData.gy = (((int16_t) _buffer[10]) << 8) | _buffer[11];
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MPU6500_GetData+0xa0>)
 800282a:	7a9b      	ldrb	r3, [r3, #10]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	b21a      	sxth	r2, r3
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <MPU6500_GetData+0xa0>)
 8002832:	7adb      	ldrb	r3, [r3, #11]
 8002834:	b21b      	sxth	r3, r3
 8002836:	4313      	orrs	r3, r2
 8002838:	b21a      	sxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	811a      	strh	r2, [r3, #8]
	pMPU6500->rawData.gz = (((int16_t) _buffer[12]) << 8) | _buffer[13];
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <MPU6500_GetData+0xa0>)
 8002840:	7b1b      	ldrb	r3, [r3, #12]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	b21a      	sxth	r2, r3
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <MPU6500_GetData+0xa0>)
 8002848:	7b5b      	ldrb	r3, [r3, #13]
 800284a:	b21b      	sxth	r3, r3
 800284c:	4313      	orrs	r3, r2
 800284e:	b21a      	sxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	815a      	strh	r2, [r3, #10]
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2000020c 	.word	0x2000020c

08002860 <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(MPU6500_t *pMPU6500, uint16_t numCalPoints) {
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
	// Init
	int32_t x = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
	int32_t y = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
	int32_t z = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]

	// Zero guard
	if (numCalPoints == 0) {
 8002878:	887b      	ldrh	r3, [r7, #2]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <MPU_calibrateGyro+0x22>
		numCalPoints = 1;
 800287e:	2301      	movs	r3, #1
 8002880:	807b      	strh	r3, [r7, #2]
	}

	// Save specified number of points
	for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 8002882:	2300      	movs	r3, #0
 8002884:	817b      	strh	r3, [r7, #10]
 8002886:	e01d      	b.n	80028c4 <MPU_calibrateGyro+0x64>
		MPU6500_GetData(pMPU6500);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff97 	bl	80027bc <MPU6500_GetData>

		x += pMPU6500->rawData.gx;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002894:	461a      	mov	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	4413      	add	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
		y += pMPU6500->rawData.gy;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028a2:	461a      	mov	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
		z += pMPU6500->rawData.gz;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80028b0:	461a      	mov	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4413      	add	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
		HAL_Delay(3);
 80028b8:	2003      	movs	r0, #3
 80028ba:	f002 f83d 	bl	8004938 <HAL_Delay>
	for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	3301      	adds	r3, #1
 80028c2:	817b      	strh	r3, [r7, #10]
 80028c4:	897a      	ldrh	r2, [r7, #10]
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3dd      	bcc.n	8002888 <MPU_calibrateGyro+0x28>
	}

	// Average the saved data points to find the gyroscope offset
	pMPU6500->gyroCal.x = (float) x / (float) numCalPoints;
 80028cc:	6978      	ldr	r0, [r7, #20]
 80028ce:	f7fe fa05 	bl	8000cdc <__aeabi_i2f>
 80028d2:	4604      	mov	r4, r0
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe f9fc 	bl	8000cd4 <__aeabi_ui2f>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7fe fb03 	bl	8000eec <__aeabi_fdiv>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c
	pMPU6500->gyroCal.y = (float) y / (float) numCalPoints;
 80028ee:	6938      	ldr	r0, [r7, #16]
 80028f0:	f7fe f9f4 	bl	8000cdc <__aeabi_i2f>
 80028f4:	4604      	mov	r4, r0
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe f9eb 	bl	8000cd4 <__aeabi_ui2f>
 80028fe:	4603      	mov	r3, r0
 8002900:	4619      	mov	r1, r3
 8002902:	4620      	mov	r0, r4
 8002904:	f7fe faf2 	bl	8000eec <__aeabi_fdiv>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
	pMPU6500->gyroCal.z = (float) z / (float) numCalPoints;
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7fe f9e3 	bl	8000cdc <__aeabi_i2f>
 8002916:	4604      	mov	r4, r0
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f9da 	bl	8000cd4 <__aeabi_ui2f>
 8002920:	4603      	mov	r3, r0
 8002922:	4619      	mov	r1, r3
 8002924:	4620      	mov	r0, r4
 8002926:	f7fe fae1 	bl	8000eec <__aeabi_fdiv>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd90      	pop	{r4, r7, pc}
 800293a:	0000      	movs	r0, r0
 800293c:	0000      	movs	r0, r0
	...

08002940 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
void MPU_readProcessedData(MPU6500_t *pMPU6500) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	// Get raw values from the IMU
	MPU6500_GetData(pMPU6500);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff37 	bl	80027bc <MPU6500_GetData>

	// Convert accelerometer values to g's
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ pMPU6500->sensorData.aScaleFactor;
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe f9c1 	bl	8000cdc <__aeabi_i2f>
 800295a:	4602      	mov	r2, r0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f7fe fac2 	bl	8000eec <__aeabi_fdiv>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	615a      	str	r2, [r3, #20]
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			/ pMPU6500->sensorData.aScaleFactor;
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe f9b0 	bl	8000cdc <__aeabi_i2f>
 800297c:	4602      	mov	r2, r0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f7fe fab1 	bl	8000eec <__aeabi_fdiv>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	619a      	str	r2, [r3, #24]
	pMPU6500->sensorData.az = pMPU6500->rawData.az
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			/ pMPU6500->sensorData.aScaleFactor;
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe f99f 	bl	8000cdc <__aeabi_i2f>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f7fe faa0 	bl	8000eec <__aeabi_fdiv>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
	pMPU6500->sensorData.az = pMPU6500->rawData.az
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	61da      	str	r2, [r3, #28]

	// Compensate for gyro offset
	pMPU6500->sensorData.gx = pMPU6500->rawData.gx - pMPU6500->gyroCal.x;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f98e 	bl	8000cdc <__aeabi_i2f>
 80029c0:	4602      	mov	r2, r0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f7fe f8d1 	bl	8000b70 <__aeabi_fsub>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy = pMPU6500->rawData.gy - pMPU6500->gyroCal.y;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe f97d 	bl	8000cdc <__aeabi_i2f>
 80029e2:	4602      	mov	r2, r0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f7fe f8c0 	bl	8000b70 <__aeabi_fsub>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz = pMPU6500->rawData.gz - pMPU6500->gyroCal.z;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe f96c 	bl	8000cdc <__aeabi_i2f>
 8002a04:	4602      	mov	r2, r0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	f7fe f8af 	bl	8000b70 <__aeabi_fsub>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
//	pMPU6500->sensorData.gx /= pMPU6500->sensorData.gScaleFactor;
//	pMPU6500->sensorData.gy /= pMPU6500->sensorData.gScaleFactor;
//	pMPU6500->sensorData.gz /= pMPU6500->sensorData.gScaleFactor;

	// Convert gyro values to rad/s
	pMPU6500->sensorData.gx = (pMPU6500->sensorData.gx
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1a      	ldr	r2, [r3, #32]
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f7fe fa61 	bl	8000eec <__aeabi_fdiv>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fcfb 	bl	8000428 <__aeabi_f2d>
 8002a32:	a323      	add	r3, pc, #140	; (adr r3, 8002ac0 <MPU_readProcessedData+0x180>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f7fd fd4e 	bl	80004d8 <__aeabi_dmul>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	f7fe f840 	bl	8000ac8 <__aeabi_d2f>
 8002a48:	4602      	mov	r2, r0
	pMPU6500->sensorData.gx = (pMPU6500->sensorData.gx
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy = (pMPU6500->sensorData.gy
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f7fe fa47 	bl	8000eec <__aeabi_fdiv>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fce1 	bl	8000428 <__aeabi_f2d>
 8002a66:	a316      	add	r3, pc, #88	; (adr r3, 8002ac0 <MPU_readProcessedData+0x180>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd fd34 	bl	80004d8 <__aeabi_dmul>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	f7fe f826 	bl	8000ac8 <__aeabi_d2f>
 8002a7c:	4602      	mov	r2, r0
	pMPU6500->sensorData.gy = (pMPU6500->sensorData.gy
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz = (pMPU6500->sensorData.gz
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	f7fe fa2d 	bl	8000eec <__aeabi_fdiv>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fcc7 	bl	8000428 <__aeabi_f2d>
 8002a9a:	a309      	add	r3, pc, #36	; (adr r3, 8002ac0 <MPU_readProcessedData+0x180>)
 8002a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa0:	f7fd fd1a 	bl	80004d8 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe f80c 	bl	8000ac8 <__aeabi_d2f>
 8002ab0:	4602      	mov	r2, r0
	pMPU6500->sensorData.gz = (pMPU6500->sensorData.gz
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	a226e211 	.word	0xa226e211
 8002ac4:	3f91df46 	.word	0x3f91df46

08002ac8 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
void MPU_calcAttitude(MPU6500_t *pMPU6500) {
 8002ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002acc:	b094      	sub	sp, #80	; 0x50
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	61f8      	str	r0, [r7, #28]
	// Read processed data
	MPU_readProcessedData(pMPU6500);
 8002ad2:	69f8      	ldr	r0, [r7, #28]
 8002ad4:	f7ff ff34 	bl	8002940 <MPU_readProcessedData>



	sat_attitude attitude_sat;

	myprintf("Sensor data\n");
 8002ad8:	48ab      	ldr	r0, [pc, #684]	; (8002d88 <MPU_calcAttitude+0x2c0>)
 8002ada:	f000 fdb3 	bl	8003644 <myprintf>
	myprintf(" ax = %.2f\r\n", pMPU6500->sensorData.ax);
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fca0 	bl	8000428 <__aeabi_f2d>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	48a7      	ldr	r0, [pc, #668]	; (8002d8c <MPU_calcAttitude+0x2c4>)
 8002aee:	f000 fda9 	bl	8003644 <myprintf>
	myprintf(" ay = %.2f\r\n", pMPU6500->sensorData.ay);
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fc96 	bl	8000428 <__aeabi_f2d>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	48a3      	ldr	r0, [pc, #652]	; (8002d90 <MPU_calcAttitude+0x2c8>)
 8002b02:	f000 fd9f 	bl	8003644 <myprintf>
	myprintf(" az = %.2f\r\n", pMPU6500->sensorData.az);
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fc8c 	bl	8000428 <__aeabi_f2d>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	489f      	ldr	r0, [pc, #636]	; (8002d94 <MPU_calcAttitude+0x2cc>)
 8002b16:	f000 fd95 	bl	8003644 <myprintf>
	myprintf(" gx = %.2f\r\n", pMPU6500->sensorData.gx);
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fc82 	bl	8000428 <__aeabi_f2d>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	489b      	ldr	r0, [pc, #620]	; (8002d98 <MPU_calcAttitude+0x2d0>)
 8002b2a:	f000 fd8b 	bl	8003644 <myprintf>
	myprintf(" gy = %.2f\r\n", pMPU6500->sensorData.gy);
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fc78 	bl	8000428 <__aeabi_f2d>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4897      	ldr	r0, [pc, #604]	; (8002d9c <MPU_calcAttitude+0x2d4>)
 8002b3e:	f000 fd81 	bl	8003644 <myprintf>
	myprintf(" gz = %.2f\r\n", pMPU6500->sensorData.gz);
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fc6e 	bl	8000428 <__aeabi_f2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4893      	ldr	r0, [pc, #588]	; (8002da0 <MPU_calcAttitude+0x2d8>)
 8002b52:	f000 fd77 	bl	8003644 <myprintf>

	filt_imu = IMU_RCFilter(pMPU6500);
 8002b56:	4c93      	ldr	r4, [pc, #588]	; (8002da4 <MPU_calcAttitude+0x2dc>)
 8002b58:	463b      	mov	r3, r7
 8002b5a:	69f9      	ldr	r1, [r7, #28]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fd95 	bl	800368c <IMU_RCFilter>
 8002b62:	4625      	mov	r5, r4
 8002b64:	463c      	mov	r4, r7
 8002b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b6e:	e885 0003 	stmia.w	r5, {r0, r1}

	myprintf("Filtered accelerometer data\n");
 8002b72:	488d      	ldr	r0, [pc, #564]	; (8002da8 <MPU_calcAttitude+0x2e0>)
 8002b74:	f000 fd66 	bl	8003644 <myprintf>
	myprintf(" ax_mps2 = %.2f\r\n", filt_imu.ax_mps2);
 8002b78:	4b8a      	ldr	r3, [pc, #552]	; (8002da4 <MPU_calcAttitude+0x2dc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fc53 	bl	8000428 <__aeabi_f2d>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4889      	ldr	r0, [pc, #548]	; (8002dac <MPU_calcAttitude+0x2e4>)
 8002b88:	f000 fd5c 	bl	8003644 <myprintf>
	myprintf(" ay_mps2 = %.2f\r\n", filt_imu.ay_mps2);
 8002b8c:	4b85      	ldr	r3, [pc, #532]	; (8002da4 <MPU_calcAttitude+0x2dc>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fc49 	bl	8000428 <__aeabi_f2d>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4885      	ldr	r0, [pc, #532]	; (8002db0 <MPU_calcAttitude+0x2e8>)
 8002b9c:	f000 fd52 	bl	8003644 <myprintf>
	myprintf(" az_mps2 = %.2f\r\n", filt_imu.az_mps2);
 8002ba0:	4b80      	ldr	r3, [pc, #512]	; (8002da4 <MPU_calcAttitude+0x2dc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fc3f 	bl	8000428 <__aeabi_f2d>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4881      	ldr	r0, [pc, #516]	; (8002db4 <MPU_calcAttitude+0x2ec>)
 8002bb0:	f000 fd48 	bl	8003644 <myprintf>

	myprintf("Filtered gyroscope data\n");
 8002bb4:	4880      	ldr	r0, [pc, #512]	; (8002db8 <MPU_calcAttitude+0x2f0>)
 8002bb6:	f000 fd45 	bl	8003644 <myprintf>
	myprintf(" p_rps = %.2f\r\n", filt_imu.p_rps);
 8002bba:	4b7a      	ldr	r3, [pc, #488]	; (8002da4 <MPU_calcAttitude+0x2dc>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fc32 	bl	8000428 <__aeabi_f2d>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	487c      	ldr	r0, [pc, #496]	; (8002dbc <MPU_calcAttitude+0x2f4>)
 8002bca:	f000 fd3b 	bl	8003644 <myprintf>
	myprintf(" q_rps = %.2f\r\n", filt_imu.q_rps);
 8002bce:	4b75      	ldr	r3, [pc, #468]	; (8002da4 <MPU_calcAttitude+0x2dc>)
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fc28 	bl	8000428 <__aeabi_f2d>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4878      	ldr	r0, [pc, #480]	; (8002dc0 <MPU_calcAttitude+0x2f8>)
 8002bde:	f000 fd31 	bl	8003644 <myprintf>
	myprintf(" r_rps = %.2f\r\n", filt_imu.r_rps);
 8002be2:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <MPU_calcAttitude+0x2dc>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fc1e 	bl	8000428 <__aeabi_f2d>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4874      	ldr	r0, [pc, #464]	; (8002dc4 <MPU_calcAttitude+0x2fc>)
 8002bf2:	f000 fd27 	bl	8003644 <myprintf>

	Attitude_genEstimate(&filt_imu, &attitude_sat);
 8002bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4869      	ldr	r0, [pc, #420]	; (8002da4 <MPU_calcAttitude+0x2dc>)
 8002bfe:	f000 fdc3 	bl	8003788 <Attitude_genEstimate>
	Attitude_compleEstimate(&filt_imu, &combined_sat_att);
 8002c02:	4971      	ldr	r1, [pc, #452]	; (8002dc8 <MPU_calcAttitude+0x300>)
 8002c04:	4867      	ldr	r0, [pc, #412]	; (8002da4 <MPU_calcAttitude+0x2dc>)
 8002c06:	f000 febf 	bl	8003988 <Attitude_compleEstimate>
	Attitude_ekfEstimate(&filt_imu, &combined_sat_att);
 8002c0a:	496f      	ldr	r1, [pc, #444]	; (8002dc8 <MPU_calcAttitude+0x300>)
 8002c0c:	4865      	ldr	r0, [pc, #404]	; (8002da4 <MPU_calcAttitude+0x2dc>)
 8002c0e:	f000 ffc7 	bl	8003ba0 <Attitude_ekfEstimate>

	// Complementary filter
	accelPitch = atan2(pMPU6500->sensorData.ay,
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc06 	bl	8000428 <__aeabi_f2d>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	460d      	mov	r5, r1
			pMPU6500->sensorData.az) * RAD2DEG;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	69db      	ldr	r3, [r3, #28]
	accelPitch = atan2(pMPU6500->sensorData.ay,
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fbff 	bl	8000428 <__aeabi_f2d>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	f008 feeb 	bl	800ba0c <atan2>
			pMPU6500->sensorData.az) * RAD2DEG;
 8002c36:	a352      	add	r3, pc, #328	; (adr r3, 8002d80 <MPU_calcAttitude+0x2b8>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f7fd fc4c 	bl	80004d8 <__aeabi_dmul>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	f7fd ff3e 	bl	8000ac8 <__aeabi_d2f>
 8002c4c:	4603      	mov	r3, r0
	accelPitch = atan2(pMPU6500->sensorData.ay,
 8002c4e:	4a5f      	ldr	r2, [pc, #380]	; (8002dcc <MPU_calcAttitude+0x304>)
 8002c50:	6013      	str	r3, [r2, #0]
	accelRoll = atan2(pMPU6500->sensorData.ax,
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fbe6 	bl	8000428 <__aeabi_f2d>
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	460d      	mov	r5, r1
			pMPU6500->sensorData.az) * RAD2DEG;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	69db      	ldr	r3, [r3, #28]
	accelRoll = atan2(pMPU6500->sensorData.ax,
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fbdf 	bl	8000428 <__aeabi_f2d>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4620      	mov	r0, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	f008 fecb 	bl	800ba0c <atan2>
			pMPU6500->sensorData.az) * RAD2DEG;
 8002c76:	a342      	add	r3, pc, #264	; (adr r3, 8002d80 <MPU_calcAttitude+0x2b8>)
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f7fd fc2c 	bl	80004d8 <__aeabi_dmul>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7fd ff1e 	bl	8000ac8 <__aeabi_d2f>
 8002c8c:	4603      	mov	r3, r0
	accelRoll = atan2(pMPU6500->sensorData.ax,
 8002c8e:	4a50      	ldr	r2, [pc, #320]	; (8002dd0 <MPU_calcAttitude+0x308>)
 8002c90:	6013      	str	r3, [r2, #0]

	pMPU6500->attitude.r = pMPU6500->attitude.tau
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	6b9c      	ldr	r4, [r3, #56]	; 0x38
			* (pMPU6500->attitude.r
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	6c1d      	ldr	r5, [r3, #64]	; 0x40
					+ pMPU6500->sensorData.gy * pMPU6500->attitude.dt)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f7fe f86d 	bl	8000d84 <__aeabi_fmul>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4619      	mov	r1, r3
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f7fd ff60 	bl	8000b74 <__addsf3>
 8002cb4:	4603      	mov	r3, r0
			* (pMPU6500->attitude.r
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7fe f863 	bl	8000d84 <__aeabi_fmul>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461c      	mov	r4, r3
			+ (1 - pMPU6500->attitude.tau) * accelRoll;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002ccc:	f7fd ff50 	bl	8000b70 <__aeabi_fsub>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b3e      	ldr	r3, [pc, #248]	; (8002dd0 <MPU_calcAttitude+0x308>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f7fe f852 	bl	8000d84 <__aeabi_fmul>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7fd ff45 	bl	8000b74 <__addsf3>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
	pMPU6500->attitude.r = pMPU6500->attitude.tau
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
	pMPU6500->attitude.p = pMPU6500->attitude.tau
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
			* (pMPU6500->attitude.p
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
					- pMPU6500->sensorData.gx * pMPU6500->attitude.dt)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	6a1a      	ldr	r2, [r3, #32]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	4619      	mov	r1, r3
 8002d04:	4610      	mov	r0, r2
 8002d06:	f7fe f83d 	bl	8000d84 <__aeabi_fmul>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f7fd ff2e 	bl	8000b70 <__aeabi_fsub>
 8002d14:	4603      	mov	r3, r0
			* (pMPU6500->attitude.p
 8002d16:	4619      	mov	r1, r3
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7fe f833 	bl	8000d84 <__aeabi_fmul>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461c      	mov	r4, r3
			+ (1 - pMPU6500->attitude.tau) * accelPitch;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	4619      	mov	r1, r3
 8002d28:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002d2c:	f7fd ff20 	bl	8000b70 <__aeabi_fsub>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <MPU_calcAttitude+0x304>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f7fe f822 	bl	8000d84 <__aeabi_fmul>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4619      	mov	r1, r3
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7fd ff15 	bl	8000b74 <__addsf3>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461a      	mov	r2, r3
	pMPU6500->attitude.p = pMPU6500->attitude.tau
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	645a      	str	r2, [r3, #68]	; 0x44
	pMPU6500->attitude.y += (pMPU6500->sensorData.gz * pMPU6500->attitude.dt);
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f7fe f80f 	bl	8000d84 <__aeabi_fmul>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f7fd ff02 	bl	8000b74 <__addsf3>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461a      	mov	r2, r3
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	649a      	str	r2, [r3, #72]	; 0x48

	float magx = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTX_L_M);
 8002d78:	2128      	movs	r1, #40	; 0x28
 8002d7a:	e02b      	b.n	8002dd4 <MPU_calcAttitude+0x30c>
 8002d7c:	f3af 8000 	nop.w
 8002d80:	1a63cbb0 	.word	0x1a63cbb0
 8002d84:	404ca5dc 	.word	0x404ca5dc
 8002d88:	0800e150 	.word	0x0800e150
 8002d8c:	0800e160 	.word	0x0800e160
 8002d90:	0800e170 	.word	0x0800e170
 8002d94:	0800e180 	.word	0x0800e180
 8002d98:	0800e190 	.word	0x0800e190
 8002d9c:	0800e1a0 	.word	0x0800e1a0
 8002da0:	0800e1b0 	.word	0x0800e1b0
 8002da4:	200002a4 	.word	0x200002a4
 8002da8:	0800e1c0 	.word	0x0800e1c0
 8002dac:	0800e1e0 	.word	0x0800e1e0
 8002db0:	0800e1f4 	.word	0x0800e1f4
 8002db4:	0800e208 	.word	0x0800e208
 8002db8:	0800e21c 	.word	0x0800e21c
 8002dbc:	0800e238 	.word	0x0800e238
 8002dc0:	0800e248 	.word	0x0800e248
 8002dc4:	0800e258 	.word	0x0800e258
 8002dc8:	2000028c 	.word	0x2000028c
 8002dcc:	20000640 	.word	0x20000640
 8002dd0:	2000063c 	.word	0x2000063c
 8002dd4:	4896      	ldr	r0, [pc, #600]	; (8003030 <MPU_calcAttitude+0x568>)
 8002dd6:	f7ff fab3 	bl	8002340 <LSM9DS1_ReadReg>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd ff79 	bl	8000cd4 <__aeabi_ui2f>
 8002de2:	4603      	mov	r3, r0
 8002de4:	64fb      	str	r3, [r7, #76]	; 0x4c
	float magy = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTY_L_M);
 8002de6:	212a      	movs	r1, #42	; 0x2a
 8002de8:	4891      	ldr	r0, [pc, #580]	; (8003030 <MPU_calcAttitude+0x568>)
 8002dea:	f7ff faa9 	bl	8002340 <LSM9DS1_ReadReg>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd ff6f 	bl	8000cd4 <__aeabi_ui2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	64bb      	str	r3, [r7, #72]	; 0x48
	float magz = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTZ_L_M);
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	488c      	ldr	r0, [pc, #560]	; (8003030 <MPU_calcAttitude+0x568>)
 8002dfe:	f7ff fa9f 	bl	8002340 <LSM9DS1_ReadReg>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd ff65 	bl	8000cd4 <__aeabi_ui2f>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	647b      	str	r3, [r7, #68]	; 0x44

	float rollRad = pMPU6500->attitude.r / 180 * 3.14159265359;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4988      	ldr	r1, [pc, #544]	; (8003034 <MPU_calcAttitude+0x56c>)
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe f869 	bl	8000eec <__aeabi_fdiv>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb03 	bl	8000428 <__aeabi_f2d>
 8002e22:	a37f      	add	r3, pc, #508	; (adr r3, 8003020 <MPU_calcAttitude+0x558>)
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f7fd fb56 	bl	80004d8 <__aeabi_dmul>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	f7fd fe48 	bl	8000ac8 <__aeabi_d2f>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	643b      	str	r3, [r7, #64]	; 0x40
	float pitchRad = pMPU6500->attitude.p / 180 * 3.14159265359;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	497c      	ldr	r1, [pc, #496]	; (8003034 <MPU_calcAttitude+0x56c>)
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe f852 	bl	8000eec <__aeabi_fdiv>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd faec 	bl	8000428 <__aeabi_f2d>
 8002e50:	a373      	add	r3, pc, #460	; (adr r3, 8003020 <MPU_calcAttitude+0x558>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd fb3f 	bl	80004d8 <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f7fd fe31 	bl	8000ac8 <__aeabi_d2f>
 8002e66:	4603      	mov	r3, r0
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c

	float Xm = magx * cos(pitchRad) - magy * sin(rollRad) * sin(pitchRad)
 8002e6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002e6c:	f7fd fadc 	bl	8000428 <__aeabi_f2d>
 8002e70:	4604      	mov	r4, r0
 8002e72:	460d      	mov	r5, r1
 8002e74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e76:	f7fd fad7 	bl	8000428 <__aeabi_f2d>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f008 fb9f 	bl	800b5c4 <cos>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	f7fd fb23 	bl	80004d8 <__aeabi_dmul>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4690      	mov	r8, r2
 8002e98:	4699      	mov	r9, r3
 8002e9a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002e9c:	f7fd fac4 	bl	8000428 <__aeabi_f2d>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	460d      	mov	r5, r1
 8002ea4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002ea6:	f7fd fabf 	bl	8000428 <__aeabi_f2d>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f008 fbc9 	bl	800b648 <sin>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4620      	mov	r0, r4
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	f7fd fb0b 	bl	80004d8 <__aeabi_dmul>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4614      	mov	r4, r2
 8002ec8:	461d      	mov	r5, r3
 8002eca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ecc:	f7fd faac 	bl	8000428 <__aeabi_f2d>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f008 fbb6 	bl	800b648 <sin>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	f7fd faf8 	bl	80004d8 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4640      	mov	r0, r8
 8002eee:	4649      	mov	r1, r9
 8002ef0:	f7fd f93a 	bl	8000168 <__aeabi_dsub>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4690      	mov	r8, r2
 8002efa:	4699      	mov	r9, r3
			+ magz * cos(rollRad) * sin(pitchRad);
 8002efc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002efe:	f7fd fa93 	bl	8000428 <__aeabi_f2d>
 8002f02:	4604      	mov	r4, r0
 8002f04:	460d      	mov	r5, r1
 8002f06:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f08:	f7fd fa8e 	bl	8000428 <__aeabi_f2d>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f008 fb56 	bl	800b5c4 <cos>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	4629      	mov	r1, r5
 8002f20:	f7fd fada 	bl	80004d8 <__aeabi_dmul>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4614      	mov	r4, r2
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f2e:	f7fd fa7b 	bl	8000428 <__aeabi_f2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f008 fb85 	bl	800b648 <sin>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4620      	mov	r0, r4
 8002f44:	4629      	mov	r1, r5
 8002f46:	f7fd fac7 	bl	80004d8 <__aeabi_dmul>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4640      	mov	r0, r8
 8002f50:	4649      	mov	r1, r9
 8002f52:	f7fd f90b 	bl	800016c <__adddf3>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
	float Xm = magx * cos(pitchRad) - magy * sin(rollRad) * sin(pitchRad)
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7fd fdb3 	bl	8000ac8 <__aeabi_d2f>
 8002f62:	4603      	mov	r3, r0
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38

	float Ym = magy * cos(rollRad) + magz * sin(rollRad);
 8002f66:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f68:	f7fd fa5e 	bl	8000428 <__aeabi_f2d>
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	460d      	mov	r5, r1
 8002f70:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f72:	f7fd fa59 	bl	8000428 <__aeabi_f2d>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f008 fb21 	bl	800b5c4 <cos>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4620      	mov	r0, r4
 8002f88:	4629      	mov	r1, r5
 8002f8a:	f7fd faa5 	bl	80004d8 <__aeabi_dmul>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4690      	mov	r8, r2
 8002f94:	4699      	mov	r9, r3
 8002f96:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002f98:	f7fd fa46 	bl	8000428 <__aeabi_f2d>
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	460d      	mov	r5, r1
 8002fa0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002fa2:	f7fd fa41 	bl	8000428 <__aeabi_f2d>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f008 fb4b 	bl	800b648 <sin>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	4629      	mov	r1, r5
 8002fba:	f7fd fa8d 	bl	80004d8 <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	f7fd f8d1 	bl	800016c <__adddf3>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7fd fd79 	bl	8000ac8 <__aeabi_d2f>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34

	pMPU6500->attitude.y = atan2(Ym, Xm) * RAD2DEG;
 8002fda:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fdc:	f7fd fa24 	bl	8000428 <__aeabi_f2d>
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	460d      	mov	r5, r1
 8002fe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fe6:	f7fd fa1f 	bl	8000428 <__aeabi_f2d>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4620      	mov	r0, r4
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	f008 fd0b 	bl	800ba0c <atan2>
 8002ff6:	a30c      	add	r3, pc, #48	; (adr r3, 8003028 <MPU_calcAttitude+0x560>)
 8002ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffc:	f7fd fa6c 	bl	80004d8 <__aeabi_dmul>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	f7fd fd5e 	bl	8000ac8 <__aeabi_d2f>
 800300c:	4602      	mov	r2, r0
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	649a      	str	r2, [r3, #72]	; 0x48

}
 8003012:	bf00      	nop
 8003014:	3750      	adds	r7, #80	; 0x50
 8003016:	46bd      	mov	sp, r7
 8003018:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800301c:	f3af 8000 	nop.w
 8003020:	54442eea 	.word	0x54442eea
 8003024:	400921fb 	.word	0x400921fb
 8003028:	1a63cbb0 	.word	0x1a63cbb0
 800302c:	404ca5dc 	.word	0x404ca5dc
 8003030:	20000504 	.word	0x20000504
 8003034:	43340000 	.word	0x43340000

08003038 <MagRead>:
uint8_t Mag_Data[6];

void MagRead(lsm9ds1_t *plsm9ds1) {
 8003038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]

	double Total = 0;
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	Mag_Data[0] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTX_L_M);
 800304e:	2128      	movs	r1, #40	; 0x28
 8003050:	48af      	ldr	r0, [pc, #700]	; (8003310 <MagRead+0x2d8>)
 8003052:	f7ff f975 	bl	8002340 <LSM9DS1_ReadReg>
 8003056:	4603      	mov	r3, r0
 8003058:	461a      	mov	r2, r3
 800305a:	4bae      	ldr	r3, [pc, #696]	; (8003314 <MagRead+0x2dc>)
 800305c:	701a      	strb	r2, [r3, #0]
	Mag_Data[1] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTX_H_M);
 800305e:	2129      	movs	r1, #41	; 0x29
 8003060:	48ab      	ldr	r0, [pc, #684]	; (8003310 <MagRead+0x2d8>)
 8003062:	f7ff f96d 	bl	8002340 <LSM9DS1_ReadReg>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	4baa      	ldr	r3, [pc, #680]	; (8003314 <MagRead+0x2dc>)
 800306c:	705a      	strb	r2, [r3, #1]
	Mag_Data[2] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTY_L_M);
 800306e:	212a      	movs	r1, #42	; 0x2a
 8003070:	48a7      	ldr	r0, [pc, #668]	; (8003310 <MagRead+0x2d8>)
 8003072:	f7ff f965 	bl	8002340 <LSM9DS1_ReadReg>
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	4ba6      	ldr	r3, [pc, #664]	; (8003314 <MagRead+0x2dc>)
 800307c:	709a      	strb	r2, [r3, #2]
	Mag_Data[3] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTY_H_M);
 800307e:	212b      	movs	r1, #43	; 0x2b
 8003080:	48a3      	ldr	r0, [pc, #652]	; (8003310 <MagRead+0x2d8>)
 8003082:	f7ff f95d 	bl	8002340 <LSM9DS1_ReadReg>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	4ba2      	ldr	r3, [pc, #648]	; (8003314 <MagRead+0x2dc>)
 800308c:	70da      	strb	r2, [r3, #3]
	Mag_Data[4] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTZ_L_M);
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	489f      	ldr	r0, [pc, #636]	; (8003310 <MagRead+0x2d8>)
 8003092:	f7ff f955 	bl	8002340 <LSM9DS1_ReadReg>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	4b9e      	ldr	r3, [pc, #632]	; (8003314 <MagRead+0x2dc>)
 800309c:	711a      	strb	r2, [r3, #4]
	Mag_Data[5] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTZ_H_M);
 800309e:	212d      	movs	r1, #45	; 0x2d
 80030a0:	489b      	ldr	r0, [pc, #620]	; (8003310 <MagRead+0x2d8>)
 80030a2:	f7ff f94d 	bl	8002340 <LSM9DS1_ReadReg>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b9a      	ldr	r3, [pc, #616]	; (8003314 <MagRead+0x2dc>)
 80030ac:	715a      	strb	r2, [r3, #5]

	plsm9ds1->mag.mx = (int16_t) ((Mag_Data[1] << 8) | Mag_Data[0]);
 80030ae:	4b99      	ldr	r3, [pc, #612]	; (8003314 <MagRead+0x2dc>)
 80030b0:	785b      	ldrb	r3, [r3, #1]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	b21a      	sxth	r2, r3
 80030b6:	4b97      	ldr	r3, [pc, #604]	; (8003314 <MagRead+0x2dc>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	4313      	orrs	r3, r2
 80030be:	b21b      	sxth	r3, r3
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fe0b 	bl	8000cdc <__aeabi_i2f>
 80030c6:	4602      	mov	r2, r0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
	plsm9ds1->mag.my = (int16_t) ((Mag_Data[3] << 8) | Mag_Data[2]);
 80030cc:	4b91      	ldr	r3, [pc, #580]	; (8003314 <MagRead+0x2dc>)
 80030ce:	78db      	ldrb	r3, [r3, #3]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	b21a      	sxth	r2, r3
 80030d4:	4b8f      	ldr	r3, [pc, #572]	; (8003314 <MagRead+0x2dc>)
 80030d6:	789b      	ldrb	r3, [r3, #2]
 80030d8:	b21b      	sxth	r3, r3
 80030da:	4313      	orrs	r3, r2
 80030dc:	b21b      	sxth	r3, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fdfc 	bl	8000cdc <__aeabi_i2f>
 80030e4:	4602      	mov	r2, r0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	605a      	str	r2, [r3, #4]
	plsm9ds1->mag.mz = (int16_t) ((Mag_Data[5] << 8) | Mag_Data[4]);
 80030ea:	4b8a      	ldr	r3, [pc, #552]	; (8003314 <MagRead+0x2dc>)
 80030ec:	795b      	ldrb	r3, [r3, #5]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	b21a      	sxth	r2, r3
 80030f2:	4b88      	ldr	r3, [pc, #544]	; (8003314 <MagRead+0x2dc>)
 80030f4:	791b      	ldrb	r3, [r3, #4]
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	4313      	orrs	r3, r2
 80030fa:	b21b      	sxth	r3, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fded 	bl	8000cdc <__aeabi_i2f>
 8003102:	4602      	mov	r2, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]

	mx = (float) (plsm9ds1->mag.mx * LSM9DS1_SENSITIVITY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4982      	ldr	r1, [pc, #520]	; (8003318 <MagRead+0x2e0>)
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fe38 	bl	8000d84 <__aeabi_fmul>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	4b80      	ldr	r3, [pc, #512]	; (800331c <MagRead+0x2e4>)
 800311a:	601a      	str	r2, [r3, #0]
    my = (float) (plsm9ds1->mag.my * LSM9DS1_SENSITIVITY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	497d      	ldr	r1, [pc, #500]	; (8003318 <MagRead+0x2e0>)
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fe2e 	bl	8000d84 <__aeabi_fmul>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	4b7c      	ldr	r3, [pc, #496]	; (8003320 <MagRead+0x2e8>)
 800312e:	601a      	str	r2, [r3, #0]
    mz = (float) (plsm9ds1->mag.mz * LSM9DS1_SENSITIVITY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4978      	ldr	r1, [pc, #480]	; (8003318 <MagRead+0x2e0>)
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fe24 	bl	8000d84 <__aeabi_fmul>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	4b78      	ldr	r3, [pc, #480]	; (8003324 <MagRead+0x2ec>)
 8003142:	601a      	str	r2, [r3, #0]

    //axis mapping
    mx = -mz;
 8003144:	4b77      	ldr	r3, [pc, #476]	; (8003324 <MagRead+0x2ec>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800314c:	4a73      	ldr	r2, [pc, #460]	; (800331c <MagRead+0x2e4>)
 800314e:	6013      	str	r3, [r2, #0]
    my = my;
 8003150:	4b73      	ldr	r3, [pc, #460]	; (8003320 <MagRead+0x2e8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a72      	ldr	r2, [pc, #456]	; (8003320 <MagRead+0x2e8>)
 8003156:	6013      	str	r3, [r2, #0]
    mz = -mx;
 8003158:	4b70      	ldr	r3, [pc, #448]	; (800331c <MagRead+0x2e4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003160:	4a70      	ldr	r2, [pc, #448]	; (8003324 <MagRead+0x2ec>)
 8003162:	6013      	str	r3, [r2, #0]

	Total = sqrt((mx * mx + my *my +mz * mz));
 8003164:	4b6d      	ldr	r3, [pc, #436]	; (800331c <MagRead+0x2e4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a6c      	ldr	r2, [pc, #432]	; (800331c <MagRead+0x2e4>)
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fe08 	bl	8000d84 <__aeabi_fmul>
 8003174:	4603      	mov	r3, r0
 8003176:	461c      	mov	r4, r3
 8003178:	4b69      	ldr	r3, [pc, #420]	; (8003320 <MagRead+0x2e8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a68      	ldr	r2, [pc, #416]	; (8003320 <MagRead+0x2e8>)
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fdfe 	bl	8000d84 <__aeabi_fmul>
 8003188:	4603      	mov	r3, r0
 800318a:	4619      	mov	r1, r3
 800318c:	4620      	mov	r0, r4
 800318e:	f7fd fcf1 	bl	8000b74 <__addsf3>
 8003192:	4603      	mov	r3, r0
 8003194:	461c      	mov	r4, r3
 8003196:	4b63      	ldr	r3, [pc, #396]	; (8003324 <MagRead+0x2ec>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a62      	ldr	r2, [pc, #392]	; (8003324 <MagRead+0x2ec>)
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd fdef 	bl	8000d84 <__aeabi_fmul>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4619      	mov	r1, r3
 80031aa:	4620      	mov	r0, r4
 80031ac:	f7fd fce2 	bl	8000b74 <__addsf3>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f938 	bl	8000428 <__aeabi_f2d>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	f008 fc26 	bl	800ba10 <sqrt>
 80031c4:	e9c7 0104 	strd	r0, r1, [r7, #16]

	myprintf("Magnetometer data\n");
 80031c8:	4857      	ldr	r0, [pc, #348]	; (8003328 <MagRead+0x2f0>)
 80031ca:	f000 fa3b 	bl	8003644 <myprintf>
	myprintf(" mx = %.2f\r\n", mx);
 80031ce:	4b53      	ldr	r3, [pc, #332]	; (800331c <MagRead+0x2e4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f928 	bl	8000428 <__aeabi_f2d>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4853      	ldr	r0, [pc, #332]	; (800332c <MagRead+0x2f4>)
 80031de:	f000 fa31 	bl	8003644 <myprintf>
	myprintf(" my = %.2f\r\n", my);
 80031e2:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <MagRead+0x2e8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f91e 	bl	8000428 <__aeabi_f2d>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	484f      	ldr	r0, [pc, #316]	; (8003330 <MagRead+0x2f8>)
 80031f2:	f000 fa27 	bl	8003644 <myprintf>
	myprintf(" mz = %.2f\r\n", mz);
 80031f6:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <MagRead+0x2ec>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f914 	bl	8000428 <__aeabi_f2d>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	484b      	ldr	r0, [pc, #300]	; (8003334 <MagRead+0x2fc>)
 8003206:	f000 fa1d 	bl	8003644 <myprintf>
	myprintf(" Total = %.2f\r\n", (double) Total);
 800320a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800320e:	484a      	ldr	r0, [pc, #296]	; (8003338 <MagRead+0x300>)
 8003210:	f000 fa18 	bl	8003644 <myprintf>

	myprintf(" roll = %.2f\r\n", combined_sat_att.roll);
 8003214:	4b49      	ldr	r3, [pc, #292]	; (800333c <MagRead+0x304>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd f905 	bl	8000428 <__aeabi_f2d>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4847      	ldr	r0, [pc, #284]	; (8003340 <MagRead+0x308>)
 8003224:	f000 fa0e 	bl	8003644 <myprintf>
	myprintf(" pitch = %.2f\r\n", combined_sat_att.pitch);
 8003228:	4b44      	ldr	r3, [pc, #272]	; (800333c <MagRead+0x304>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd f8fb 	bl	8000428 <__aeabi_f2d>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4843      	ldr	r0, [pc, #268]	; (8003344 <MagRead+0x30c>)
 8003238:	f000 fa04 	bl	8003644 <myprintf>
	combined_sat_att.yaw = 0;
 800323c:	4b3f      	ldr	r3, [pc, #252]	; (800333c <MagRead+0x304>)
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
	myprintf(" yaw = %.2f\r\n", combined_sat_att.yaw);
 8003244:	4b3d      	ldr	r3, [pc, #244]	; (800333c <MagRead+0x304>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f8ed 	bl	8000428 <__aeabi_f2d>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	483d      	ldr	r0, [pc, #244]	; (8003348 <MagRead+0x310>)
 8003254:	f000 f9f6 	bl	8003644 <myprintf>

	float Xm = mx * cos(combined_sat_att.pitch)
 8003258:	4b30      	ldr	r3, [pc, #192]	; (800331c <MagRead+0x2e4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f8e3 	bl	8000428 <__aeabi_f2d>
 8003262:	4604      	mov	r4, r0
 8003264:	460d      	mov	r5, r1
 8003266:	4b35      	ldr	r3, [pc, #212]	; (800333c <MagRead+0x304>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd f8dc 	bl	8000428 <__aeabi_f2d>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f008 f9a4 	bl	800b5c4 <cos>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4620      	mov	r0, r4
 8003282:	4629      	mov	r1, r5
 8003284:	f7fd f928 	bl	80004d8 <__aeabi_dmul>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4690      	mov	r8, r2
 800328e:	4699      	mov	r9, r3
			- my * sin(combined_sat_att.roll) * sin(combined_sat_att.pitch)
 8003290:	4b23      	ldr	r3, [pc, #140]	; (8003320 <MagRead+0x2e8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd f8c7 	bl	8000428 <__aeabi_f2d>
 800329a:	4604      	mov	r4, r0
 800329c:	460d      	mov	r5, r1
 800329e:	4b27      	ldr	r3, [pc, #156]	; (800333c <MagRead+0x304>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd f8c0 	bl	8000428 <__aeabi_f2d>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	f008 f9ca 	bl	800b648 <sin>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4620      	mov	r0, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7fd f90c 	bl	80004d8 <__aeabi_dmul>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4614      	mov	r4, r2
 80032c6:	461d      	mov	r5, r3
 80032c8:	4b1c      	ldr	r3, [pc, #112]	; (800333c <MagRead+0x304>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f8ab 	bl	8000428 <__aeabi_f2d>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	f008 f9b5 	bl	800b648 <sin>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4620      	mov	r0, r4
 80032e4:	4629      	mov	r1, r5
 80032e6:	f7fd f8f7 	bl	80004d8 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4640      	mov	r0, r8
 80032f0:	4649      	mov	r1, r9
 80032f2:	f7fc ff39 	bl	8000168 <__aeabi_dsub>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4690      	mov	r8, r2
 80032fc:	4699      	mov	r9, r3
			+ mz * cos(combined_sat_att.roll)
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <MagRead+0x2ec>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd f890 	bl	8000428 <__aeabi_f2d>
 8003308:	4604      	mov	r4, r0
 800330a:	460d      	mov	r5, r1
 800330c:	e01e      	b.n	800334c <MagRead+0x314>
 800330e:	bf00      	nop
 8003310:	20000504 	.word	0x20000504
 8003314:	2000029c 	.word	0x2000029c
 8003318:	3d6d9168 	.word	0x3d6d9168
 800331c:	20000200 	.word	0x20000200
 8003320:	20000204 	.word	0x20000204
 8003324:	20000208 	.word	0x20000208
 8003328:	0800e268 	.word	0x0800e268
 800332c:	0800e27c 	.word	0x0800e27c
 8003330:	0800e28c 	.word	0x0800e28c
 8003334:	0800e29c 	.word	0x0800e29c
 8003338:	0800e2ac 	.word	0x0800e2ac
 800333c:	2000028c 	.word	0x2000028c
 8003340:	0800e2bc 	.word	0x0800e2bc
 8003344:	0800e2cc 	.word	0x0800e2cc
 8003348:	0800e2dc 	.word	0x0800e2dc
 800334c:	4b57      	ldr	r3, [pc, #348]	; (80034ac <MagRead+0x474>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd f869 	bl	8000428 <__aeabi_f2d>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	f008 f931 	bl	800b5c4 <cos>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4620      	mov	r0, r4
 8003368:	4629      	mov	r1, r5
 800336a:	f7fd f8b5 	bl	80004d8 <__aeabi_dmul>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4614      	mov	r4, r2
 8003374:	461d      	mov	r5, r3
					* sin(combined_sat_att.pitch);
 8003376:	4b4d      	ldr	r3, [pc, #308]	; (80034ac <MagRead+0x474>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd f854 	bl	8000428 <__aeabi_f2d>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	f008 f95e 	bl	800b648 <sin>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4620      	mov	r0, r4
 8003392:	4629      	mov	r1, r5
 8003394:	f7fd f8a0 	bl	80004d8 <__aeabi_dmul>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
			+ mz * cos(combined_sat_att.roll)
 800339c:	4640      	mov	r0, r8
 800339e:	4649      	mov	r1, r9
 80033a0:	f7fc fee4 	bl	800016c <__adddf3>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
	float Xm = mx * cos(combined_sat_att.pitch)
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7fd fb8c 	bl	8000ac8 <__aeabi_d2f>
 80033b0:	4603      	mov	r3, r0
 80033b2:	60fb      	str	r3, [r7, #12]

	float Ym = my * cos(combined_sat_att.roll)
 80033b4:	4b3e      	ldr	r3, [pc, #248]	; (80034b0 <MagRead+0x478>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd f835 	bl	8000428 <__aeabi_f2d>
 80033be:	4604      	mov	r4, r0
 80033c0:	460d      	mov	r5, r1
 80033c2:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <MagRead+0x474>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f82e 	bl	8000428 <__aeabi_f2d>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f008 f8f6 	bl	800b5c4 <cos>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4620      	mov	r0, r4
 80033de:	4629      	mov	r1, r5
 80033e0:	f7fd f87a 	bl	80004d8 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4690      	mov	r8, r2
 80033ea:	4699      	mov	r9, r3
			+ mz * sin(combined_sat_att.roll);
 80033ec:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <MagRead+0x47c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd f819 	bl	8000428 <__aeabi_f2d>
 80033f6:	4604      	mov	r4, r0
 80033f8:	460d      	mov	r5, r1
 80033fa:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <MagRead+0x474>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd f812 	bl	8000428 <__aeabi_f2d>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f008 f91c 	bl	800b648 <sin>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4620      	mov	r0, r4
 8003416:	4629      	mov	r1, r5
 8003418:	f7fd f85e 	bl	80004d8 <__aeabi_dmul>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4640      	mov	r0, r8
 8003422:	4649      	mov	r1, r9
 8003424:	f7fc fea2 	bl	800016c <__adddf3>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
	float Ym = my * cos(combined_sat_att.roll)
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	f7fd fb4a 	bl	8000ac8 <__aeabi_d2f>
 8003434:	4603      	mov	r3, r0
 8003436:	60bb      	str	r3, [r7, #8]

	combined_sat_att.yaw = atan2(Ym, Xm);
 8003438:	68b8      	ldr	r0, [r7, #8]
 800343a:	f7fc fff5 	bl	8000428 <__aeabi_f2d>
 800343e:	4604      	mov	r4, r0
 8003440:	460d      	mov	r5, r1
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7fc fff0 	bl	8000428 <__aeabi_f2d>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4620      	mov	r0, r4
 800344e:	4629      	mov	r1, r5
 8003450:	f008 fadc 	bl	800ba0c <atan2>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f7fd fb34 	bl	8000ac8 <__aeabi_d2f>
 8003460:	4603      	mov	r3, r0
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <MagRead+0x474>)
 8003464:	6093      	str	r3, [r2, #8]

	myprintf(" roll = %.2f\r\n", combined_sat_att.roll);
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <MagRead+0x474>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fc ffdc 	bl	8000428 <__aeabi_f2d>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4810      	ldr	r0, [pc, #64]	; (80034b8 <MagRead+0x480>)
 8003476:	f000 f8e5 	bl	8003644 <myprintf>
	myprintf(" pitch = %.2f\r\n", combined_sat_att.pitch);
 800347a:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <MagRead+0x474>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fc ffd2 	bl	8000428 <__aeabi_f2d>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	480c      	ldr	r0, [pc, #48]	; (80034bc <MagRead+0x484>)
 800348a:	f000 f8db 	bl	8003644 <myprintf>
	myprintf(" yaw = %.2f\r\n", combined_sat_att.yaw);
 800348e:	4b07      	ldr	r3, [pc, #28]	; (80034ac <MagRead+0x474>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fc ffc8 	bl	8000428 <__aeabi_f2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4808      	ldr	r0, [pc, #32]	; (80034c0 <MagRead+0x488>)
 800349e:	f000 f8d1 	bl	8003644 <myprintf>

}
 80034a2:	bf00      	nop
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034ac:	2000028c 	.word	0x2000028c
 80034b0:	20000204 	.word	0x20000204
 80034b4:	20000208 	.word	0x20000208
 80034b8:	0800e2bc 	.word	0x0800e2bc
 80034bc:	0800e2cc 	.word	0x0800e2cc
 80034c0:	0800e2dc 	.word	0x0800e2dc

080034c4 <IMU_Setup>:

void IMU_Setup() {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0

	LSM9DS1_Init(&IMU_STREAM, 0x60); // ±16 Gauss full scale, 20Hz ODR, Continuous conversion mode
 80034c8:	2160      	movs	r1, #96	; 0x60
 80034ca:	481a      	ldr	r0, [pc, #104]	; (8003534 <IMU_Setup+0x70>)
 80034cc:	f7fe ff8c 	bl	80023e8 <LSM9DS1_Init>
	HAL_Delay(1000);
 80034d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034d4:	f001 fa30 	bl	8004938 <HAL_Delay>

	if (MPU_begin(&IMU_STREAM, &MPU6500) != TRUE) {
 80034d8:	4917      	ldr	r1, [pc, #92]	; (8003538 <IMU_Setup+0x74>)
 80034da:	4816      	ldr	r0, [pc, #88]	; (8003534 <IMU_Setup+0x70>)
 80034dc:	f7fe ffac 	bl	8002438 <MPU_begin>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d00e      	beq.n	8003504 <IMU_Setup+0x40>
		sprintf((char*) serialBuf, "ERROR!\r\n");
 80034e6:	4915      	ldr	r1, [pc, #84]	; (800353c <IMU_Setup+0x78>)
 80034e8:	4815      	ldr	r0, [pc, #84]	; (8003540 <IMU_Setup+0x7c>)
 80034ea:	f004 fa9d 	bl	8007a28 <siprintf>
		HAL_UART_Transmit(&DEBUG_STREAM, serialBuf, strlen((char*) serialBuf),
 80034ee:	4814      	ldr	r0, [pc, #80]	; (8003540 <IMU_Setup+0x7c>)
 80034f0:	f7fc fe2e 	bl	8000150 <strlen>
 80034f4:	4603      	mov	r3, r0
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	2364      	movs	r3, #100	; 0x64
 80034fa:	4911      	ldr	r1, [pc, #68]	; (8003540 <IMU_Setup+0x7c>)
 80034fc:	4811      	ldr	r0, [pc, #68]	; (8003544 <IMU_Setup+0x80>)
 80034fe:	f003 fa17 	bl	8006930 <HAL_UART_Transmit>
 8003502:	e002      	b.n	800350a <IMU_Setup+0x46>
				100);
	} else {
		myprintf("MPU6500 Initialization Complete..");
 8003504:	4810      	ldr	r0, [pc, #64]	; (8003548 <IMU_Setup+0x84>)
 8003506:	f000 f89d 	bl	8003644 <myprintf>
	}

	//	 Calibrate the IMU
	myprintf("\nNow, Calibrating sensors.\r\n");
 800350a:	4810      	ldr	r0, [pc, #64]	; (800354c <IMU_Setup+0x88>)
 800350c:	f000 f89a 	bl	8003644 <myprintf>
	HAL_Delay(1);
 8003510:	2001      	movs	r0, #1
 8003512:	f001 fa11 	bl	8004938 <HAL_Delay>
	MPU_calibrateGyro(&MPU6500, 1500);
 8003516:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800351a:	4807      	ldr	r0, [pc, #28]	; (8003538 <IMU_Setup+0x74>)
 800351c:	f7ff f9a0 	bl	8002860 <MPU_calibrateGyro>
	HAL_Delay(1000);
 8003520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003524:	f001 fa08 	bl	8004938 <HAL_Delay>
	myprintf("Calibration  Complete!!!\n\n");
 8003528:	4809      	ldr	r0, [pc, #36]	; (8003550 <IMU_Setup+0x8c>)
 800352a:	f000 f88b 	bl	8003644 <myprintf>

}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000504 	.word	0x20000504
 8003538:	200002d8 	.word	0x200002d8
 800353c:	0800e2ec 	.word	0x0800e2ec
 8003540:	200005d8 	.word	0x200005d8
 8003544:	20000480 	.word	0x20000480
 8003548:	0800e2f8 	.word	0x0800e2f8
 800354c:	0800e31c 	.word	0x0800e31c
 8003550:	0800e33c 	.word	0x0800e33c

08003554 <RCFilter_Init>:
 *      Author: Anjali
 */

#include "RCFilter.h"

void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (6.28318530718f * cutoffFreqHz);
 8003560:	4918      	ldr	r1, [pc, #96]	; (80035c4 <RCFilter_Init+0x70>)
 8003562:	68b8      	ldr	r0, [r7, #8]
 8003564:	f7fd fc0e 	bl	8000d84 <__aeabi_fmul>
 8003568:	4603      	mov	r3, r0
 800356a:	4619      	mov	r1, r3
 800356c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003570:	f7fd fcbc 	bl	8000eec <__aeabi_fdiv>
 8003574:	4603      	mov	r3, r0
 8003576:	617b      	str	r3, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 8003578:	6979      	ldr	r1, [r7, #20]
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd fafa 	bl	8000b74 <__addsf3>
 8003580:	4603      	mov	r3, r0
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fd fcb1 	bl	8000eec <__aeabi_fdiv>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	601a      	str	r2, [r3, #0]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fd faed 	bl	8000b74 <__addsf3>
 800359a:	4603      	mov	r3, r0
 800359c:	4619      	mov	r1, r3
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7fd fca4 	bl	8000eec <__aeabi_fdiv>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	605a      	str	r2, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	60da      	str	r2, [r3, #12]

}
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40c90fdb 	.word	0x40c90fdb

080035c8 <RCFilter_Update>:

float RCFilter_Update(RCFilter *filt, float inp) {
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]

	/* Shift output samples */
	filt->out[1] = filt->out[0];
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60da      	str	r2, [r3, #12]

	/* Compute new output sample */
	filt->out[0] = filt->coeff[0] * inp + filt->coeff[1] * filt->out[1];
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6839      	ldr	r1, [r7, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd fbcf 	bl	8000d84 <__aeabi_fmul>
 80035e6:	4603      	mov	r3, r0
 80035e8:	461c      	mov	r4, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7fd fbc5 	bl	8000d84 <__aeabi_fmul>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4619      	mov	r1, r3
 80035fe:	4620      	mov	r0, r4
 8003600:	f7fd fab8 	bl	8000b74 <__addsf3>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	609a      	str	r2, [r3, #8]

	/* Return filtered sample */
	return (filt->out[0]);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	bd90      	pop	{r4, r7, pc}

08003618 <buffersize>:
 * @brief	counts the number of non-null data in given array
 *
 * @param	buff	pointer to the array of data to be counted
 * @retval	int		number of non-null values in the array
 */
int buffersize(char *buff) {
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8003624:	e002      	b.n	800362c <buffersize+0x14>
		i++;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3301      	adds	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f6      	bne.n	8003626 <buffersize+0xe>
	return i;
 8003638:	68fb      	ldr	r3, [r7, #12]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <myprintf>:
 *
 * @param	fmt	pointer the array of characters data to be transmitted
 *
 * @retval	none
 */
void myprintf(const char *fmt, ...) {
 8003644:	b40f      	push	{r0, r1, r2, r3}
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
	static char temp[100];
		va_list args;
		va_start(args, fmt);
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	603b      	str	r3, [r7, #0]
		vsnprintf(temp, sizeof(temp), fmt, args);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	2164      	movs	r1, #100	; 0x64
 8003658:	480a      	ldr	r0, [pc, #40]	; (8003684 <myprintf+0x40>)
 800365a:	f005 f8d7 	bl	800880c <vsniprintf>
		va_end(args);
		int len = buffersize(temp);
 800365e:	4809      	ldr	r0, [pc, #36]	; (8003684 <myprintf+0x40>)
 8003660:	f7ff ffda 	bl	8003618 <buffersize>
 8003664:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&DEBUG_STREAM, (uint8_t*) temp, len, 1000);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	b29a      	uxth	r2, r3
 800366a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800366e:	4905      	ldr	r1, [pc, #20]	; (8003684 <myprintf+0x40>)
 8003670:	4805      	ldr	r0, [pc, #20]	; (8003688 <myprintf+0x44>)
 8003672:	f003 f95d 	bl	8006930 <HAL_UART_Transmit>
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003680:	b004      	add	sp, #16
 8003682:	4770      	bx	lr
 8003684:	2000021c 	.word	0x2000021c
 8003688:	20000480 	.word	0x20000480

0800368c <IMU_RCFilter>:
#define COMP_FILT_ALPHA 		0.0500000000f

#define KALMAN_PREDICT_PERIOD_MS 	10
#define KALMAN_UPDATE_PERIOD_MS 	100

imu_filter IMU_RCFilter(MPU6500_t *imu) {
 800368c:	b5b0      	push	{r4, r5, r7, lr}
 800368e:	b0a2      	sub	sp, #136	; 0x88
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
	RCFilter lpfAcc[3];
	RCFilter lpfGyr[3];
	imu_filter filt_imu;

	for (int n = 0; n < 3; n++) {
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800369c:	e01a      	b.n	80036d4 <IMU_RCFilter+0x48>
		RCFilter_Init(&lpfAcc[n], 5.0f, 0.01f);
 800369e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80036a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	4413      	add	r3, r2
 80036aa:	4a33      	ldr	r2, [pc, #204]	; (8003778 <IMU_RCFilter+0xec>)
 80036ac:	4933      	ldr	r1, [pc, #204]	; (800377c <IMU_RCFilter+0xf0>)
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ff50 	bl	8003554 <RCFilter_Init>
		RCFilter_Init(&lpfGyr[n], 25.0f, 0.01f);
 80036b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80036b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	4413      	add	r3, r2
 80036c0:	4a2d      	ldr	r2, [pc, #180]	; (8003778 <IMU_RCFilter+0xec>)
 80036c2:	492f      	ldr	r1, [pc, #188]	; (8003780 <IMU_RCFilter+0xf4>)
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff45 	bl	8003554 <RCFilter_Init>
	for (int n = 0; n < 3; n++) {
 80036ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ce:	3301      	adds	r3, #1
 80036d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036d8:	2b02      	cmp	r3, #2
 80036da:	dde0      	ble.n	800369e <IMU_RCFilter+0x12>
//	RCFilter_Update(&lpfAcc[0], imu->acc_mps2[0]);
//	RCFilter_Update(&lpfAcc[1], imu->acc_mps2[1]);
//	RCFilter_Update(&lpfAcc[2], imu->acc_mps2[2]);

	/* Filter accelerometer data */
	RCFilter_Update(&lpfAcc[0], imu->sensorData.ax);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff6e 	bl	80035c8 <RCFilter_Update>
	RCFilter_Update(&lpfAcc[1], imu->sensorData.ay);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036f4:	3310      	adds	r3, #16
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ff65 	bl	80035c8 <RCFilter_Update>
	RCFilter_Update(&lpfAcc[2], imu->sensorData.az);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003706:	3320      	adds	r3, #32
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff5c 	bl	80035c8 <RCFilter_Update>
//	RCFilter_Update(&lpfGyr[0], imu->gyr_rps[0]);
//	RCFilter_Update(&lpfGyr[1], imu->gyr_rps[1]);
//	RCFilter_Update(&lpfGyr[2], imu->gyr_rps[2]);

	/* Filter gyroscope data */
	RCFilter_Update(&lpfGyr[0], imu->sensorData.gx);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6a1a      	ldr	r2, [r3, #32]
 8003714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ff54 	bl	80035c8 <RCFilter_Update>
	RCFilter_Update(&lpfGyr[1], imu->sensorData.gy);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003728:	3310      	adds	r3, #16
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff4b 	bl	80035c8 <RCFilter_Update>
	RCFilter_Update(&lpfGyr[2], imu->sensorData.gz);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800373a:	3320      	adds	r3, #32
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff42 	bl	80035c8 <RCFilter_Update>

	//Filtered accelerometer measurement
	filt_imu.ax_mps2 = lpfAcc[0].out[0];
 8003744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003746:	60fb      	str	r3, [r7, #12]
	filt_imu.ay_mps2 = lpfAcc[1].out[0];
 8003748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374a:	613b      	str	r3, [r7, #16]
	filt_imu.az_mps2 = lpfAcc[2].out[0];
 800374c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800374e:	617b      	str	r3, [r7, #20]
	//Filtered Gyroscope measurement
	filt_imu.p_rps = lpfGyr[0].out[0];
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	61bb      	str	r3, [r7, #24]
	filt_imu.q_rps = lpfGyr[1].out[0];
 8003754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003756:	61fb      	str	r3, [r7, #28]
	filt_imu.r_rps = lpfGyr[2].out[0];
 8003758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375a:	623b      	str	r3, [r7, #32]
	return filt_imu;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	461d      	mov	r5, r3
 8003760:	f107 040c 	add.w	r4, r7, #12
 8003764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003768:	e894 0003 	ldmia.w	r4, {r0, r1}
 800376c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	3788      	adds	r7, #136	; 0x88
 8003774:	46bd      	mov	sp, r7
 8003776:	bdb0      	pop	{r4, r5, r7, pc}
 8003778:	3c23d70a 	.word	0x3c23d70a
 800377c:	40a00000 	.word	0x40a00000
 8003780:	41c80000 	.word	0x41c80000
 8003784:	00000000 	.word	0x00000000

08003788 <Attitude_genEstimate>:

void Attitude_genEstimate(imu_filter *filt, sat_attitude *att) {
 8003788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
	float phiHat_deg_ = 0.0f;
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
	float thetaHat_deg_ = 0.0f;
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	613b      	str	r3, [r7, #16]

	/*Calculate roll (phi) and pitch(theta) angle estimates using filtered accelerometer readings*/
	phiHat_deg_ = atanf(filt->ay_mps2 / filt->az_mps2) * RAD2DEG;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f7fd fb9f 	bl	8000eec <__aeabi_fdiv>
 80037ae:	4603      	mov	r3, r0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f007 ff8f 	bl	800b6d4 <atanf>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc fe35 	bl	8000428 <__aeabi_f2d>
 80037be:	a36a      	add	r3, pc, #424	; (adr r3, 8003968 <Attitude_genEstimate+0x1e0>)
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f7fc fe88 	bl	80004d8 <__aeabi_dmul>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	f7fd f97a 	bl	8000ac8 <__aeabi_d2f>
 80037d4:	4603      	mov	r3, r0
 80037d6:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = asinf(filt->ax_mps2 / G_MPS2) * RAD2DEG;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4964      	ldr	r1, [pc, #400]	; (8003970 <Attitude_genEstimate+0x1e8>)
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fb84 	bl	8000eec <__aeabi_fdiv>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f008 f93e 	bl	800ba68 <asinf>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fc fe1a 	bl	8000428 <__aeabi_f2d>
 80037f4:	a35c      	add	r3, pc, #368	; (adr r3, 8003968 <Attitude_genEstimate+0x1e0>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f7fc fe6d 	bl	80004d8 <__aeabi_dmul>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	f7fd f95f 	bl	8000ac8 <__aeabi_d2f>
 800380a:	4603      	mov	r3, r0
 800380c:	613b      	str	r3, [r7, #16]

//	phiHat_deg_ = atanf(filt->ay_mps2 / filt->az_mps2);
//	thetaHat_deg_ = asinf(filt->ax_mps2 / G_MPS2);

	myprintf("Accel phiHat_deg : %.2f\n", (double) phiHat_deg_);
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7fc fe0a 	bl	8000428 <__aeabi_f2d>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4856      	ldr	r0, [pc, #344]	; (8003974 <Attitude_genEstimate+0x1ec>)
 800381a:	f7ff ff13 	bl	8003644 <myprintf>
	myprintf("Accel thetahat_deg : %.2f\n", (double) thetaHat_deg_);
 800381e:	6938      	ldr	r0, [r7, #16]
 8003820:	f7fc fe02 	bl	8000428 <__aeabi_f2d>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4853      	ldr	r0, [pc, #332]	; (8003978 <Attitude_genEstimate+0x1f0>)
 800382a:	f7ff ff0b 	bl	8003644 <myprintf>

	att->accel_phiHat = phiHat_deg_;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	601a      	str	r2, [r3, #0]
	att->accel_thetaHat = thetaHat_deg_;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	605a      	str	r2, [r3, #4]

	phiHat_deg_ = 0.0f;
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = 0.0f;
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	613b      	str	r3, [r7, #16]

	//Transform body rates to Euler rates to get estimate of roll and pitch angles using filtered gyroscope reading
	float phiDot_rps = filt->p_rps
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68dc      	ldr	r4, [r3, #12]
			+ tanf(thetaHat_deg_)
 800384a:	6938      	ldr	r0, [r7, #16]
 800384c:	f008 f8bc 	bl	800b9c8 <tanf>
 8003850:	4605      	mov	r5, r0
					* (sinf(phiHat_deg_) * filt->q_rps
 8003852:	6978      	ldr	r0, [r7, #20]
 8003854:	f008 f882 	bl	800b95c <sinf>
 8003858:	4602      	mov	r2, r0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7fd fa8f 	bl	8000d84 <__aeabi_fmul>
 8003866:	4603      	mov	r3, r0
 8003868:	461e      	mov	r6, r3
							+ cosf(phiHat_deg_) * filt->r_rps);
 800386a:	6978      	ldr	r0, [r7, #20]
 800386c:	f008 f83e 	bl	800b8ec <cosf>
 8003870:	4602      	mov	r2, r0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f7fd fa83 	bl	8000d84 <__aeabi_fmul>
 800387e:	4603      	mov	r3, r0
 8003880:	4619      	mov	r1, r3
 8003882:	4630      	mov	r0, r6
 8003884:	f7fd f976 	bl	8000b74 <__addsf3>
 8003888:	4603      	mov	r3, r0
					* (sinf(phiHat_deg_) * filt->q_rps
 800388a:	4619      	mov	r1, r3
 800388c:	4628      	mov	r0, r5
 800388e:	f7fd fa79 	bl	8000d84 <__aeabi_fmul>
 8003892:	4603      	mov	r3, r0
	float phiDot_rps = filt->p_rps
 8003894:	4619      	mov	r1, r3
 8003896:	4620      	mov	r0, r4
 8003898:	f7fd f96c 	bl	8000b74 <__addsf3>
 800389c:	4603      	mov	r3, r0
 800389e:	60fb      	str	r3, [r7, #12]
	float thetaDot_rps = cosf(phiHat_deg_) * filt->q_rps
 80038a0:	6978      	ldr	r0, [r7, #20]
 80038a2:	f008 f823 	bl	800b8ec <cosf>
 80038a6:	4602      	mov	r2, r0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7fd fa68 	bl	8000d84 <__aeabi_fmul>
 80038b4:	4603      	mov	r3, r0
 80038b6:	461c      	mov	r4, r3
			- sinf(phiHat_deg_) * filt->r_rps;
 80038b8:	6978      	ldr	r0, [r7, #20]
 80038ba:	f008 f84f 	bl	800b95c <sinf>
 80038be:	4602      	mov	r2, r0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f7fd fa5c 	bl	8000d84 <__aeabi_fmul>
 80038cc:	4603      	mov	r3, r0
	float thetaDot_rps = cosf(phiHat_deg_) * filt->q_rps
 80038ce:	4619      	mov	r1, r3
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7fd f94d 	bl	8000b70 <__aeabi_fsub>
 80038d6:	4603      	mov	r3, r0
 80038d8:	60bb      	str	r3, [r7, #8]

	//Integrate Euler rates to get estimate of roll and pitch angles
	phiHat_deg_ = (phiHat_deg_ + (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps)
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	6978      	ldr	r0, [r7, #20]
 80038de:	f7fd f949 	bl	8000b74 <__addsf3>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fd9f 	bl	8000428 <__aeabi_f2d>
			* RAD2DEG;
 80038ea:	a31f      	add	r3, pc, #124	; (adr r3, 8003968 <Attitude_genEstimate+0x1e0>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f7fc fdf2 	bl	80004d8 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
	phiHat_deg_ = (phiHat_deg_ + (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps)
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	f7fd f8e4 	bl	8000ac8 <__aeabi_d2f>
 8003900:	4603      	mov	r3, r0
 8003902:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = (thetaHat_deg_
			+ (SAMPLE_TIME_MS_USB_ / 1000.0F) * thetaDot_rps) * RAD2DEG;
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	6938      	ldr	r0, [r7, #16]
 8003908:	f7fd f934 	bl	8000b74 <__addsf3>
 800390c:	4603      	mov	r3, r0
 800390e:	4618      	mov	r0, r3
 8003910:	f7fc fd8a 	bl	8000428 <__aeabi_f2d>
 8003914:	a314      	add	r3, pc, #80	; (adr r3, 8003968 <Attitude_genEstimate+0x1e0>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f7fc fddd 	bl	80004d8 <__aeabi_dmul>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
	thetaHat_deg_ = (thetaHat_deg_
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	f7fd f8cf 	bl	8000ac8 <__aeabi_d2f>
 800392a:	4603      	mov	r3, r0
 800392c:	613b      	str	r3, [r7, #16]

	myprintf("Gyro phiHat_deg: %.2f\n", (double) phiHat_deg_);
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7fc fd7a 	bl	8000428 <__aeabi_f2d>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4810      	ldr	r0, [pc, #64]	; (800397c <Attitude_genEstimate+0x1f4>)
 800393a:	f7ff fe83 	bl	8003644 <myprintf>
	myprintf("Gyro thetaHat_deg: %.2f\n", (double) thetaHat_deg_);
 800393e:	6938      	ldr	r0, [r7, #16]
 8003940:	f7fc fd72 	bl	8000428 <__aeabi_f2d>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	480d      	ldr	r0, [pc, #52]	; (8003980 <Attitude_genEstimate+0x1f8>)
 800394a:	f7ff fe7b 	bl	8003644 <myprintf>
	att->gyro_phiHat = phiHat_deg_;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	609a      	str	r2, [r3, #8]
	att->gyro_thetaHat = thetaHat_deg_;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	60da      	str	r2, [r3, #12]
	return;
 800395a:	bf00      	nop
}
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003962:	bf00      	nop
 8003964:	f3af 8000 	nop.w
 8003968:	1a63cbb0 	.word	0x1a63cbb0
 800396c:	404ca5dc 	.word	0x404ca5dc
 8003970:	411cf5c3 	.word	0x411cf5c3
 8003974:	0800e358 	.word	0x0800e358
 8003978:	0800e374 	.word	0x0800e374
 800397c:	0800e390 	.word	0x0800e390
 8003980:	0800e3a8 	.word	0x0800e3a8
 8003984:	00000000 	.word	0x00000000

08003988 <Attitude_compleEstimate>:

void Attitude_compleEstimate(imu_filter *filt, sat_att_combined *att) {
 8003988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]

	float thetaHat_rad_comb = 0.0f;
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
	float phiHat_rad_comb = 0.0f;
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]

	/*Calculate roll (phi) and pitch(theta) angle estimates using filtered accelerometer readings*/
	float phiHat_acc_rad = atanf(filt->ay_mps2 / filt->az_mps2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7fd fa9f 	bl	8000eec <__aeabi_fdiv>
 80039ae:	4603      	mov	r3, r0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f007 fe8f 	bl	800b6d4 <atanf>
 80039b6:	6178      	str	r0, [r7, #20]
	float thetaHat_acc_rad = asinf(filt->ax_mps2 / G_MPS2);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	496e      	ldr	r1, [pc, #440]	; (8003b78 <Attitude_compleEstimate+0x1f0>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fa94 	bl	8000eec <__aeabi_fdiv>
 80039c4:	4603      	mov	r3, r0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f008 f84e 	bl	800ba68 <asinf>
 80039cc:	6138      	str	r0, [r7, #16]

	myprintf("accel phiHat_rad : %.2f\n", (double) phiHat_acc_rad);
 80039ce:	6978      	ldr	r0, [r7, #20]
 80039d0:	f7fc fd2a 	bl	8000428 <__aeabi_f2d>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4868      	ldr	r0, [pc, #416]	; (8003b7c <Attitude_compleEstimate+0x1f4>)
 80039da:	f7ff fe33 	bl	8003644 <myprintf>
	myprintf("accel thetaHat_rad : %.2f\n", (double) thetaHat_acc_rad);
 80039de:	6938      	ldr	r0, [r7, #16]
 80039e0:	f7fc fd22 	bl	8000428 <__aeabi_f2d>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4865      	ldr	r0, [pc, #404]	; (8003b80 <Attitude_compleEstimate+0x1f8>)
 80039ea:	f7ff fe2b 	bl	8003644 <myprintf>

	//Transform body rates to Euler rates to get estimate of roll and pitch angles using filtered gyroscope readings
	float phiDot_rps = filt->p_rps
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68dc      	ldr	r4, [r3, #12]
			+ tanf(thetaHat_rad_comb)
 80039f2:	69f8      	ldr	r0, [r7, #28]
 80039f4:	f007 ffe8 	bl	800b9c8 <tanf>
 80039f8:	4605      	mov	r5, r0
					* (sinf(phiHat_rad_comb) * filt->q_rps
 80039fa:	69b8      	ldr	r0, [r7, #24]
 80039fc:	f007 ffae 	bl	800b95c <sinf>
 8003a00:	4602      	mov	r2, r0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7fd f9bb 	bl	8000d84 <__aeabi_fmul>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461e      	mov	r6, r3
							+ cosf(phiHat_rad_comb) * filt->r_rps);
 8003a12:	69b8      	ldr	r0, [r7, #24]
 8003a14:	f007 ff6a 	bl	800b8ec <cosf>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f7fd f9af 	bl	8000d84 <__aeabi_fmul>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	f7fd f8a2 	bl	8000b74 <__addsf3>
 8003a30:	4603      	mov	r3, r0
					* (sinf(phiHat_rad_comb) * filt->q_rps
 8003a32:	4619      	mov	r1, r3
 8003a34:	4628      	mov	r0, r5
 8003a36:	f7fd f9a5 	bl	8000d84 <__aeabi_fmul>
 8003a3a:	4603      	mov	r3, r0
	float phiDot_rps = filt->p_rps
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f7fd f898 	bl	8000b74 <__addsf3>
 8003a44:	4603      	mov	r3, r0
 8003a46:	60fb      	str	r3, [r7, #12]
	float thetaDot_rps = cosf(phiHat_rad_comb) * filt->q_rps
 8003a48:	69b8      	ldr	r0, [r7, #24]
 8003a4a:	f007 ff4f 	bl	800b8ec <cosf>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f7fd f994 	bl	8000d84 <__aeabi_fmul>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461c      	mov	r4, r3
			- sinf(phiHat_rad_comb) * filt->r_rps;
 8003a60:	69b8      	ldr	r0, [r7, #24]
 8003a62:	f007 ff7b 	bl	800b95c <sinf>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f7fd f988 	bl	8000d84 <__aeabi_fmul>
 8003a74:	4603      	mov	r3, r0
	float thetaDot_rps = cosf(phiHat_rad_comb) * filt->q_rps
 8003a76:	4619      	mov	r1, r3
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7fd f879 	bl	8000b70 <__aeabi_fsub>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	60bb      	str	r3, [r7, #8]

	myprintf("Gryo phidot_rps : %.2f\n", (double) phiDot_rps);
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7fc fcd0 	bl	8000428 <__aeabi_f2d>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	483d      	ldr	r0, [pc, #244]	; (8003b84 <Attitude_compleEstimate+0x1fc>)
 8003a8e:	f7ff fdd9 	bl	8003644 <myprintf>
	myprintf("Gyro thetadot_rps : %.2f\n", (double) thetaDot_rps);
 8003a92:	68b8      	ldr	r0, [r7, #8]
 8003a94:	f7fc fcc8 	bl	8000428 <__aeabi_f2d>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	483a      	ldr	r0, [pc, #232]	; (8003b88 <Attitude_compleEstimate+0x200>)
 8003a9e:	f7ff fdd1 	bl	8003644 <myprintf>

	//Combining Accel and Gyro data for complementary filter
	phiHat_rad_comb = (COMP_FILT_ALPHA * phiHat_acc_rad
 8003aa2:	493a      	ldr	r1, [pc, #232]	; (8003b8c <Attitude_compleEstimate+0x204>)
 8003aa4:	6978      	ldr	r0, [r7, #20]
 8003aa6:	f7fd f96d 	bl	8000d84 <__aeabi_fmul>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461c      	mov	r4, r3
			+ (1.0f - COMP_FILT_ALPHA)
					* (phiHat_rad_comb
							+ (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps));
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	69b8      	ldr	r0, [r7, #24]
 8003ab2:	f7fd f85f 	bl	8000b74 <__addsf3>
 8003ab6:	4603      	mov	r3, r0
					* (phiHat_rad_comb
 8003ab8:	4935      	ldr	r1, [pc, #212]	; (8003b90 <Attitude_compleEstimate+0x208>)
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd f962 	bl	8000d84 <__aeabi_fmul>
 8003ac0:	4603      	mov	r3, r0
	phiHat_rad_comb = (COMP_FILT_ALPHA * phiHat_acc_rad
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7fd f855 	bl	8000b74 <__addsf3>
 8003aca:	4603      	mov	r3, r0
 8003acc:	61bb      	str	r3, [r7, #24]
	thetaHat_rad_comb = (COMP_FILT_ALPHA * thetaHat_acc_rad
 8003ace:	492f      	ldr	r1, [pc, #188]	; (8003b8c <Attitude_compleEstimate+0x204>)
 8003ad0:	6938      	ldr	r0, [r7, #16]
 8003ad2:	f7fd f957 	bl	8000d84 <__aeabi_fmul>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	461c      	mov	r4, r3
			+ (1.0f - COMP_FILT_ALPHA)
					* (thetaHat_rad_comb
							+ (SAMPLE_TIME_MS_USB_ / 1000.0f) * thetaDot_rps));
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	69f8      	ldr	r0, [r7, #28]
 8003ade:	f7fd f849 	bl	8000b74 <__addsf3>
 8003ae2:	4603      	mov	r3, r0
					* (thetaHat_rad_comb
 8003ae4:	492a      	ldr	r1, [pc, #168]	; (8003b90 <Attitude_compleEstimate+0x208>)
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fd f94c 	bl	8000d84 <__aeabi_fmul>
 8003aec:	4603      	mov	r3, r0
	thetaHat_rad_comb = (COMP_FILT_ALPHA * thetaHat_acc_rad
 8003aee:	4619      	mov	r1, r3
 8003af0:	4620      	mov	r0, r4
 8003af2:	f7fd f83f 	bl	8000b74 <__addsf3>
 8003af6:	4603      	mov	r3, r0
 8003af8:	61fb      	str	r3, [r7, #28]
	att->pitch = RAD2DEG * thetaHat_rad_comb;
 8003afa:	69f8      	ldr	r0, [r7, #28]
 8003afc:	f7fc fc94 	bl	8000428 <__aeabi_f2d>
 8003b00:	a31b      	add	r3, pc, #108	; (adr r3, 8003b70 <Attitude_compleEstimate+0x1e8>)
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f7fc fce7 	bl	80004d8 <__aeabi_dmul>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	f7fc ffd9 	bl	8000ac8 <__aeabi_d2f>
 8003b16:	4602      	mov	r2, r0
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
	att->roll = RAD2DEG * phiHat_rad_comb;
 8003b1c:	69b8      	ldr	r0, [r7, #24]
 8003b1e:	f7fc fc83 	bl	8000428 <__aeabi_f2d>
 8003b22:	a313      	add	r3, pc, #76	; (adr r3, 8003b70 <Attitude_compleEstimate+0x1e8>)
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f7fc fcd6 	bl	80004d8 <__aeabi_dmul>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	f7fc ffc8 	bl	8000ac8 <__aeabi_d2f>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	601a      	str	r2, [r3, #0]
	myprintf("Complementary filter roll: %.2f deg\n", (double) att->roll);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fc70 	bl	8000428 <__aeabi_f2d>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4811      	ldr	r0, [pc, #68]	; (8003b94 <Attitude_compleEstimate+0x20c>)
 8003b4e:	f7ff fd79 	bl	8003644 <myprintf>
	myprintf("Complementary filter pitch: %.2f deg\n", (double) att->pitch);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fc fc66 	bl	8000428 <__aeabi_f2d>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	480d      	ldr	r0, [pc, #52]	; (8003b98 <Attitude_compleEstimate+0x210>)
 8003b62:	f7ff fd6f 	bl	8003644 <myprintf>

}
 8003b66:	bf00      	nop
 8003b68:	3724      	adds	r7, #36	; 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	1a63cbb0 	.word	0x1a63cbb0
 8003b74:	404ca5dc 	.word	0x404ca5dc
 8003b78:	411cf5c3 	.word	0x411cf5c3
 8003b7c:	0800e3c4 	.word	0x0800e3c4
 8003b80:	0800e3e0 	.word	0x0800e3e0
 8003b84:	0800e3fc 	.word	0x0800e3fc
 8003b88:	0800e414 	.word	0x0800e414
 8003b8c:	3d4ccccd 	.word	0x3d4ccccd
 8003b90:	3f733333 	.word	0x3f733333
 8003b94:	0800e430 	.word	0x0800e430
 8003b98:	0800e458 	.word	0x0800e458
 8003b9c:	00000000 	.word	0x00000000

08003ba0 <Attitude_ekfEstimate>:

void Attitude_ekfEstimate(imu_filter *filt, sat_att_combined *att) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b0a0      	sub	sp, #128	; 0x80
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]

	float KALMAN_P_INIT = 0.1f;
 8003baa:	4b4d      	ldr	r3, [pc, #308]	; (8003ce0 <Attitude_ekfEstimate+0x140>)
 8003bac:	677b      	str	r3, [r7, #116]	; 0x74
	float KALMAN_Q = 0.001f;
 8003bae:	4b4d      	ldr	r3, [pc, #308]	; (8003ce4 <Attitude_ekfEstimate+0x144>)
 8003bb0:	673b      	str	r3, [r7, #112]	; 0x70
	float KALMAN_R = 0.011f;
 8003bb2:	4b4d      	ldr	r3, [pc, #308]	; (8003ce8 <Attitude_ekfEstimate+0x148>)
 8003bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
	float KalmanQ[2] = { KALMAN_Q, KALMAN_Q };
 8003bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bbc:	653b      	str	r3, [r7, #80]	; 0x50
	float KalmanR[3] = { KALMAN_R, KALMAN_R, KALMAN_R };
 8003bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc8:	64bb      	str	r3, [r7, #72]	; 0x48
	float Kalman_P_Init[2] = { KALMAN_P_INIT, KALMAN_P_INIT };
 8003bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
	Eekf ekf_1;

	//Filtered accelerometer measurement
	float ax_mps2 = 0.0f;
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	66bb      	str	r3, [r7, #104]	; 0x68
	float ay_mps2 = 0.0f;
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	667b      	str	r3, [r7, #100]	; 0x64
	float az_mps2 = 0.0f;
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	663b      	str	r3, [r7, #96]	; 0x60
	//Filtered gyroscope measurement
	float p_rps = 0.0f;
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	65fb      	str	r3, [r7, #92]	; 0x5c
	float q_rps = 0.0f;
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	65bb      	str	r3, [r7, #88]	; 0x58
	float r_rps = 0.0f;
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	657b      	str	r3, [r7, #84]	; 0x54

	//Remapping axis data of Accel and Gyro
	ax_mps2 = -(filt->az_mps2);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003bfe:	66bb      	str	r3, [r7, #104]	; 0x68
	ay_mps2 = -filt->ay_mps2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c08:	667b      	str	r3, [r7, #100]	; 0x64
	az_mps2 = (filt->ax_mps2);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	663b      	str	r3, [r7, #96]	; 0x60
	p_rps = -(filt->r_rps);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c18:	65fb      	str	r3, [r7, #92]	; 0x5c
	q_rps = -filt->q_rps;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c22:	65bb      	str	r3, [r7, #88]	; 0x58
	r_rps = (filt->p_rps);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	657b      	str	r3, [r7, #84]	; 0x54

	//Initialize kalman filter
	EKF_Init(&ekf_1, Kalman_P_Init, KalmanQ, KalmanR);
 8003c2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c2e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003c32:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003c36:	f107 000c 	add.w	r0, r7, #12
 8003c3a:	f7fd fadd 	bl	80011f8 <EKF_Init>
	//Prediction step using filtered gyro data
	EKF_Predict(&ekf_1, p_rps, q_rps, r_rps, 0.001f * KALMAN_PREDICT_PERIOD_MS);
 8003c3e:	f107 000c 	add.w	r0, r7, #12
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <Attitude_ekfEstimate+0x14c>)
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c4a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003c4c:	f7fd fb0c 	bl	8001268 <EKF_Predict>

	//Update step using Accel data
	EKF_Update(&ekf_1, ax_mps2, ay_mps2, az_mps2);
 8003c50:	f107 000c 	add.w	r0, r7, #12
 8003c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c5a:	f7fd fcb6 	bl	80015ca <EKF_Update>
	att->pitch = RAD2DEG * ekf_1.theta_r;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fbe1 	bl	8000428 <__aeabi_f2d>
 8003c66:	a31c      	add	r3, pc, #112	; (adr r3, 8003cd8 <Attitude_ekfEstimate+0x138>)
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f7fc fc34 	bl	80004d8 <__aeabi_dmul>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	f7fc ff26 	bl	8000ac8 <__aeabi_d2f>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	605a      	str	r2, [r3, #4]
	att->roll = RAD2DEG * ekf_1.phi_r;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fc fbcf 	bl	8000428 <__aeabi_f2d>
 8003c8a:	a313      	add	r3, pc, #76	; (adr r3, 8003cd8 <Attitude_ekfEstimate+0x138>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f7fc fc22 	bl	80004d8 <__aeabi_dmul>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f7fc ff14 	bl	8000ac8 <__aeabi_d2f>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	601a      	str	r2, [r3, #0]

	myprintf("EKF Update : pitch : %.2f deg\n", (double) att->pitch);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fbbc 	bl	8000428 <__aeabi_f2d>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	480e      	ldr	r0, [pc, #56]	; (8003cf0 <Attitude_ekfEstimate+0x150>)
 8003cb6:	f7ff fcc5 	bl	8003644 <myprintf>
	myprintf("EKF Update : roll : %.2f deg\n", (double) att->roll);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc fbb2 	bl	8000428 <__aeabi_f2d>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	480a      	ldr	r0, [pc, #40]	; (8003cf4 <Attitude_ekfEstimate+0x154>)
 8003cca:	f7ff fcbb 	bl	8003644 <myprintf>
}
 8003cce:	bf00      	nop
 8003cd0:	3778      	adds	r7, #120	; 0x78
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	1a63cbb0 	.word	0x1a63cbb0
 8003cdc:	404ca5dc 	.word	0x404ca5dc
 8003ce0:	3dcccccd 	.word	0x3dcccccd
 8003ce4:	3a83126f 	.word	0x3a83126f
 8003ce8:	3c343958 	.word	0x3c343958
 8003cec:	3c23d70b 	.word	0x3c23d70b
 8003cf0:	0800e480 	.word	0x0800e480
 8003cf4:	0800e4a0 	.word	0x0800e4a0

08003cf8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003cf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003d00:	f000 fdb8 	bl	8004874 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003d04:	f000 f884 	bl	8003e10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003d08:	f000 fa52 	bl	80041b0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8003d0c:	f000 f8c6 	bl	8003e9c <MX_SPI1_Init>
	MX_SPI2_Init();
 8003d10:	f000 f8fa 	bl	8003f08 <MX_SPI2_Init>
	MX_TIM3_Init();
 8003d14:	f000 f92e 	bl	8003f74 <MX_TIM3_Init>
	MX_TIM4_Init();
 8003d18:	f000 f990 	bl	800403c <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8003d1c:	f000 f9f4 	bl	8004108 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8003d20:	f000 fa1c 	bl	800415c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	uint32_t flash_address = FLASH_START_ADDRESS;
 8003d24:	2300      	movs	r3, #0
 8003d26:	607b      	str	r3, [r7, #4]
//	Read_ID(&hspi2, &FM_ID);
	myprintf("### Read_Id : 0x%x \n", FM_ID.MAN_ID);
 8003d28:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <main+0xe4>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	482c      	ldr	r0, [pc, #176]	; (8003de0 <main+0xe8>)
 8003d30:	f7ff fc88 	bl	8003644 <myprintf>
	HAL_Delay(1);
 8003d34:	2001      	movs	r0, #1
 8003d36:	f000 fdff 	bl	8004938 <HAL_Delay>
//	int ret = Sector_Erase(&hspi2, flash_address, 64);
//	Bulk_Read(&hspi2, flash_address, rxData, sizeof(rxData));
	HAL_Delay(1);
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	f000 fdfc 	bl	8004938 <HAL_Delay>
	myprintf("%s \n", (char*) rxData);
 8003d40:	4928      	ldr	r1, [pc, #160]	; (8003de4 <main+0xec>)
 8003d42:	4829      	ldr	r0, [pc, #164]	; (8003de8 <main+0xf0>)
 8003d44:	f7ff fc7e 	bl	8003644 <myprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		whoAmI();
 8003d48:	f7fe fc5a 	bl	8002600 <whoAmI>
		IMU_Setup();
 8003d4c:	f7ff fbba 	bl	80034c4 <IMU_Setup>
		HAL_Delay(1000);
 8003d50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d54:	f000 fdf0 	bl	8004938 <HAL_Delay>
		MPU_calcAttitude(&MPU6500);
 8003d58:	4824      	ldr	r0, [pc, #144]	; (8003dec <main+0xf4>)
 8003d5a:	f7fe feb5 	bl	8002ac8 <MPU_calcAttitude>
		MagRead(&lsm9ds1);
 8003d5e:	4824      	ldr	r0, [pc, #144]	; (8003df0 <main+0xf8>)
 8003d60:	f7ff f96a 	bl	8003038 <MagRead>

		myprintf("### Storing IMU Data in : 0x%x \n", flash_address);
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4823      	ldr	r0, [pc, #140]	; (8003df4 <main+0xfc>)
 8003d68:	f7ff fc6c 	bl	8003644 <myprintf>
		//		IMU_Data();
		sprintf((char*) txBuffer, "%.2f%.2f%.2f", combined_sat_att.roll,
 8003d6c:	4b22      	ldr	r3, [pc, #136]	; (8003df8 <main+0x100>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fc fb59 	bl	8000428 <__aeabi_f2d>
 8003d76:	4680      	mov	r8, r0
 8003d78:	4689      	mov	r9, r1
				combined_sat_att.pitch, combined_sat_att.yaw);
 8003d7a:	4b1f      	ldr	r3, [pc, #124]	; (8003df8 <main+0x100>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) txBuffer, "%.2f%.2f%.2f", combined_sat_att.roll,
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fc fb52 	bl	8000428 <__aeabi_f2d>
 8003d84:	4604      	mov	r4, r0
 8003d86:	460d      	mov	r5, r1
				combined_sat_att.pitch, combined_sat_att.yaw);
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <main+0x100>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) txBuffer, "%.2f%.2f%.2f", combined_sat_att.roll,
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fb4b 	bl	8000428 <__aeabi_f2d>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d9a:	e9cd 4500 	strd	r4, r5, [sp]
 8003d9e:	4642      	mov	r2, r8
 8003da0:	464b      	mov	r3, r9
 8003da2:	4916      	ldr	r1, [pc, #88]	; (8003dfc <main+0x104>)
 8003da4:	4816      	ldr	r0, [pc, #88]	; (8003e00 <main+0x108>)
 8003da6:	f003 fe3f 	bl	8007a28 <siprintf>
		//		if (sizeof(SAT_IMU) <= PAGE_SIZE) {
//		Page_Write(&hspi2, flash_address, txBuffer, sizeof(txBuffer));
		//		}
		HAL_Delay(1);
 8003daa:	2001      	movs	r0, #1
 8003dac:	f000 fdc4 	bl	8004938 <HAL_Delay>
		myprintf("### Checking if data is stored or not, in : 0x%x \n",
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4814      	ldr	r0, [pc, #80]	; (8003e04 <main+0x10c>)
 8003db4:	f7ff fc46 	bl	8003644 <myprintf>
				flash_address);
		myprintf("--> Stored Data : \n");
 8003db8:	4813      	ldr	r0, [pc, #76]	; (8003e08 <main+0x110>)
 8003dba:	f7ff fc43 	bl	8003644 <myprintf>
//		Bulk_Read(&hspi2, flash_address, rxData, sizeof(rxData));
		HAL_Delay(1);
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	f000 fdba 	bl	8004938 <HAL_Delay>
		myprintf("%s \n", (char*) rxData);
 8003dc4:	4907      	ldr	r1, [pc, #28]	; (8003de4 <main+0xec>)
 8003dc6:	4808      	ldr	r0, [pc, #32]	; (8003de8 <main+0xf0>)
 8003dc8:	f7ff fc3c 	bl	8003644 <myprintf>
		//		for (int i = 0; i < FLASH_START_ADDRESS; i++) {
		//			myprintf("%x ", rxData[i]);
		//		}
		myprintf("\n");
 8003dcc:	480f      	ldr	r0, [pc, #60]	; (8003e0c <main+0x114>)
 8003dce:	f7ff fc39 	bl	8003644 <myprintf>
		HAL_Delay(1000);
 8003dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dd6:	f000 fdaf 	bl	8004938 <HAL_Delay>
		whoAmI();
 8003dda:	e7b5      	b.n	8003d48 <main+0x50>
 8003ddc:	20000418 	.word	0x20000418
 8003de0:	0800e4c0 	.word	0x0800e4c0
 8003de4:	200002bc 	.word	0x200002bc
 8003de8:	0800e4d8 	.word	0x0800e4d8
 8003dec:	200002d8 	.word	0x200002d8
 8003df0:	200004f8 	.word	0x200004f8
 8003df4:	0800e4e0 	.word	0x0800e4e0
 8003df8:	2000028c 	.word	0x2000028c
 8003dfc:	0800e504 	.word	0x0800e504
 8003e00:	200004dc 	.word	0x200004dc
 8003e04:	0800e514 	.word	0x0800e514
 8003e08:	0800e548 	.word	0x0800e548
 8003e0c:	0800e55c 	.word	0x0800e55c

08003e10 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b090      	sub	sp, #64	; 0x40
 8003e14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003e16:	f107 0318 	add.w	r3, r7, #24
 8003e1a:	2228      	movs	r2, #40	; 0x28
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f002 ff84 	bl	8006d2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
 8003e2c:	609a      	str	r2, [r3, #8]
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e3a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e40:	2301      	movs	r3, #1
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e44:	2302      	movs	r3, #2
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003e54:	f107 0318 	add.w	r3, r7, #24
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 f811 	bl	8004e80 <HAL_RCC_OscConfig>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <SystemClock_Config+0x58>
		Error_Handler();
 8003e64:	f000 fa06 	bl	8004274 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003e68:	230f      	movs	r3, #15
 8003e6a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e78:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003e7e:	1d3b      	adds	r3, r7, #4
 8003e80:	2102      	movs	r1, #2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 fa7c 	bl	8005380 <HAL_RCC_ClockConfig>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <SystemClock_Config+0x82>
		Error_Handler();
 8003e8e:	f000 f9f1 	bl	8004274 <Error_Handler>
	}
}
 8003e92:	bf00      	nop
 8003e94:	3740      	adds	r7, #64	; 0x40
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003ea0:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003ea2:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <MX_SPI1_Init+0x68>)
 8003ea4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eac:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003eb4:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ecc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003ed0:	2218      	movs	r2, #24
 8003ed2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003ee8:	220a      	movs	r2, #10
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8003eec:	4804      	ldr	r0, [pc, #16]	; (8003f00 <MX_SPI1_Init+0x64>)
 8003eee:	f001 fbd5 	bl	800569c <HAL_SPI_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_SPI1_Init+0x60>
		Error_Handler();
 8003ef8:	f000 f9bc 	bl	8004274 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000504 	.word	0x20000504
 8003f04:	40013000 	.word	0x40013000

08003f08 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003f0c:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f0e:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <MX_SPI2_Init+0x68>)
 8003f10:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f12:	4b16      	ldr	r3, [pc, #88]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f18:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f20:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f38:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f3c:	2218      	movs	r2, #24
 8003f3e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f4c:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f54:	220a      	movs	r2, #10
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003f58:	4804      	ldr	r0, [pc, #16]	; (8003f6c <MX_SPI2_Init+0x64>)
 8003f5a:	f001 fb9f 	bl	800569c <HAL_SPI_Init>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <MX_SPI2_Init+0x60>
		Error_Handler();
 8003f64:	f000 f986 	bl	8004274 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000330 	.word	0x20000330
 8003f70:	40003800 	.word	0x40003800

08003f74 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003f7a:	f107 0320 	add.w	r3, r7, #32
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003f84:	1d3b      	adds	r3, r7, #4
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
 8003f8e:	60da      	str	r2, [r3, #12]
 8003f90:	611a      	str	r2, [r3, #16]
 8003f92:	615a      	str	r2, [r3, #20]
 8003f94:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003f96:	4b27      	ldr	r3, [pc, #156]	; (8004034 <MX_TIM3_Init+0xc0>)
 8003f98:	4a27      	ldr	r2, [pc, #156]	; (8004038 <MX_TIM3_Init+0xc4>)
 8003f9a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003f9c:	4b25      	ldr	r3, [pc, #148]	; (8004034 <MX_TIM3_Init+0xc0>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa2:	4b24      	ldr	r3, [pc, #144]	; (8004034 <MX_TIM3_Init+0xc0>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003fa8:	4b22      	ldr	r3, [pc, #136]	; (8004034 <MX_TIM3_Init+0xc0>)
 8003faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fae:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb0:	4b20      	ldr	r3, [pc, #128]	; (8004034 <MX_TIM3_Init+0xc0>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb6:	4b1f      	ldr	r3, [pc, #124]	; (8004034 <MX_TIM3_Init+0xc0>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8003fbc:	481d      	ldr	r0, [pc, #116]	; (8004034 <MX_TIM3_Init+0xc0>)
 8003fbe:	f002 f902 	bl	80061c6 <HAL_TIM_PWM_Init>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM3_Init+0x58>
		Error_Handler();
 8003fc8:	f000 f954 	bl	8004274 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003fd4:	f107 0320 	add.w	r3, r7, #32
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4816      	ldr	r0, [pc, #88]	; (8004034 <MX_TIM3_Init+0xc0>)
 8003fdc:	f002 fbfa 	bl	80067d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8003fe6:	f000 f945 	bl	8004274 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fea:	2360      	movs	r3, #96	; 0x60
 8003fec:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4619      	mov	r1, r3
 8004000:	480c      	ldr	r0, [pc, #48]	; (8004034 <MX_TIM3_Init+0xc0>)
 8004002:	f002 f92f 	bl	8006264 <HAL_TIM_PWM_ConfigChannel>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 800400c:	f000 f932 	bl	8004274 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8004010:	1d3b      	adds	r3, r7, #4
 8004012:	2204      	movs	r2, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4807      	ldr	r0, [pc, #28]	; (8004034 <MX_TIM3_Init+0xc0>)
 8004018:	f002 f924 	bl	8006264 <HAL_TIM_PWM_ConfigChannel>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8004022:	f000 f927 	bl	8004274 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8004026:	4803      	ldr	r0, [pc, #12]	; (8004034 <MX_TIM3_Init+0xc0>)
 8004028:	f000 fa14 	bl	8004454 <HAL_TIM_MspPostInit>

}
 800402c:	bf00      	nop
 800402e:	3728      	adds	r7, #40	; 0x28
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000434 	.word	0x20000434
 8004038:	40000400 	.word	0x40000400

0800403c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	; 0x28
 8004040:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004042:	f107 0320 	add.w	r3, r7, #32
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	60da      	str	r2, [r3, #12]
 8004058:	611a      	str	r2, [r3, #16]
 800405a:	615a      	str	r2, [r3, #20]
 800405c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800405e:	4b28      	ldr	r3, [pc, #160]	; (8004100 <MX_TIM4_Init+0xc4>)
 8004060:	4a28      	ldr	r2, [pc, #160]	; (8004104 <MX_TIM4_Init+0xc8>)
 8004062:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 2000 - 1;
 8004064:	4b26      	ldr	r3, [pc, #152]	; (8004100 <MX_TIM4_Init+0xc4>)
 8004066:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800406a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800406c:	4b24      	ldr	r3, [pc, #144]	; (8004100 <MX_TIM4_Init+0xc4>)
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 36000 - 1;
 8004072:	4b23      	ldr	r3, [pc, #140]	; (8004100 <MX_TIM4_Init+0xc4>)
 8004074:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8004078:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800407a:	4b21      	ldr	r3, [pc, #132]	; (8004100 <MX_TIM4_Init+0xc4>)
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004080:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <MX_TIM4_Init+0xc4>)
 8004082:	2200      	movs	r2, #0
 8004084:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8004086:	481e      	ldr	r0, [pc, #120]	; (8004100 <MX_TIM4_Init+0xc4>)
 8004088:	f002 f89d 	bl	80061c6 <HAL_TIM_PWM_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM4_Init+0x5a>
		Error_Handler();
 8004092:	f000 f8ef 	bl	8004274 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800409a:	2300      	movs	r3, #0
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800409e:	f107 0320 	add.w	r3, r7, #32
 80040a2:	4619      	mov	r1, r3
 80040a4:	4816      	ldr	r0, [pc, #88]	; (8004100 <MX_TIM4_Init+0xc4>)
 80040a6:	f002 fb95 	bl	80067d4 <HAL_TIMEx_MasterConfigSynchronization>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80040b0:	f000 f8e0 	bl	8004274 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b4:	2360      	movs	r3, #96	; 0x60
 80040b6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	2208      	movs	r2, #8
 80040c8:	4619      	mov	r1, r3
 80040ca:	480d      	ldr	r0, [pc, #52]	; (8004100 <MX_TIM4_Init+0xc4>)
 80040cc:	f002 f8ca 	bl	8006264 <HAL_TIM_PWM_ConfigChannel>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80040d6:	f000 f8cd 	bl	8004274 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	220c      	movs	r2, #12
 80040de:	4619      	mov	r1, r3
 80040e0:	4807      	ldr	r0, [pc, #28]	; (8004100 <MX_TIM4_Init+0xc4>)
 80040e2:	f002 f8bf 	bl	8006264 <HAL_TIM_PWM_ConfigChannel>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80040ec:	f000 f8c2 	bl	8004274 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80040f0:	4803      	ldr	r0, [pc, #12]	; (8004100 <MX_TIM4_Init+0xc4>)
 80040f2:	f000 f9af 	bl	8004454 <HAL_TIM_MspPostInit>

}
 80040f6:	bf00      	nop
 80040f8:	3728      	adds	r7, #40	; 0x28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000388 	.word	0x20000388
 8004104:	40000800 	.word	0x40000800

08004108 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800410c:	4b11      	ldr	r3, [pc, #68]	; (8004154 <MX_USART1_UART_Init+0x4c>)
 800410e:	4a12      	ldr	r2, [pc, #72]	; (8004158 <MX_USART1_UART_Init+0x50>)
 8004110:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <MX_USART1_UART_Init+0x4c>)
 8004114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004118:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <MX_USART1_UART_Init+0x4c>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <MX_USART1_UART_Init+0x4c>)
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <MX_USART1_UART_Init+0x4c>)
 8004128:	2200      	movs	r2, #0
 800412a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <MX_USART1_UART_Init+0x4c>)
 800412e:	220c      	movs	r2, #12
 8004130:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <MX_USART1_UART_Init+0x4c>)
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <MX_USART1_UART_Init+0x4c>)
 800413a:	2200      	movs	r2, #0
 800413c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800413e:	4805      	ldr	r0, [pc, #20]	; (8004154 <MX_USART1_UART_Init+0x4c>)
 8004140:	f002 fba6 	bl	8006890 <HAL_UART_Init>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800414a:	f000 f893 	bl	8004274 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000480 	.word	0x20000480
 8004158:	40013800 	.word	0x40013800

0800415c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <MX_USART3_UART_Init+0x4c>)
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <MX_USART3_UART_Init+0x50>)
 8004164:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <MX_USART3_UART_Init+0x4c>)
 8004168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800416c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800416e:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <MX_USART3_UART_Init+0x4c>)
 8004170:	2200      	movs	r2, #0
 8004172:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <MX_USART3_UART_Init+0x4c>)
 8004176:	2200      	movs	r2, #0
 8004178:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <MX_USART3_UART_Init+0x4c>)
 800417c:	2200      	movs	r2, #0
 800417e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <MX_USART3_UART_Init+0x4c>)
 8004182:	220c      	movs	r2, #12
 8004184:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <MX_USART3_UART_Init+0x4c>)
 8004188:	2200      	movs	r2, #0
 800418a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <MX_USART3_UART_Init+0x4c>)
 800418e:	2200      	movs	r2, #0
 8004190:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8004192:	4805      	ldr	r0, [pc, #20]	; (80041a8 <MX_USART3_UART_Init+0x4c>)
 8004194:	f002 fb7c 	bl	8006890 <HAL_UART_Init>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800419e:	f000 f869 	bl	8004274 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200003d0 	.word	0x200003d0
 80041ac:	40004800 	.word	0x40004800

080041b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80041b6:	f107 0310 	add.w	r3, r7, #16
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	609a      	str	r2, [r3, #8]
 80041c2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80041c4:	4b28      	ldr	r3, [pc, #160]	; (8004268 <MX_GPIO_Init+0xb8>)
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	4a27      	ldr	r2, [pc, #156]	; (8004268 <MX_GPIO_Init+0xb8>)
 80041ca:	f043 0320 	orr.w	r3, r3, #32
 80041ce:	6193      	str	r3, [r2, #24]
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <MX_GPIO_Init+0xb8>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80041dc:	4b22      	ldr	r3, [pc, #136]	; (8004268 <MX_GPIO_Init+0xb8>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	4a21      	ldr	r2, [pc, #132]	; (8004268 <MX_GPIO_Init+0xb8>)
 80041e2:	f043 0304 	orr.w	r3, r3, #4
 80041e6:	6193      	str	r3, [r2, #24]
 80041e8:	4b1f      	ldr	r3, [pc, #124]	; (8004268 <MX_GPIO_Init+0xb8>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80041f4:	4b1c      	ldr	r3, [pc, #112]	; (8004268 <MX_GPIO_Init+0xb8>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <MX_GPIO_Init+0xb8>)
 80041fa:	f043 0308 	orr.w	r3, r3, #8
 80041fe:	6193      	str	r3, [r2, #24]
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <MX_GPIO_Init+0xb8>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin | SMSN_FM_CS_MSNS_Pin, GPIO_PIN_RESET);
 800420c:	2200      	movs	r2, #0
 800420e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004212:	4816      	ldr	r0, [pc, #88]	; (800426c <MX_GPIO_Init+0xbc>)
 8004214:	f000 fe1c 	bl	8004e50 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CS_MPU_Pin | MTQEN_5V_Pin, GPIO_PIN_RESET);
 8004218:	2200      	movs	r2, #0
 800421a:	f241 0108 	movw	r1, #4104	; 0x1008
 800421e:	4814      	ldr	r0, [pc, #80]	; (8004270 <MX_GPIO_Init+0xc0>)
 8004220:	f000 fe16 	bl	8004e50 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CS_MAG_Pin SMSN_FM_CS_MSNS_Pin */
	GPIO_InitStruct.Pin = CS_MAG_Pin | SMSN_FM_CS_MSNS_Pin;
 8004224:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004228:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800422a:	2301      	movs	r3, #1
 800422c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	2302      	movs	r3, #2
 8004234:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004236:	f107 0310 	add.w	r3, r7, #16
 800423a:	4619      	mov	r1, r3
 800423c:	480b      	ldr	r0, [pc, #44]	; (800426c <MX_GPIO_Init+0xbc>)
 800423e:	f000 fc83 	bl	8004b48 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_MPU_Pin MTQEN_5V_Pin */
	GPIO_InitStruct.Pin = CS_MPU_Pin | MTQEN_5V_Pin;
 8004242:	f241 0308 	movw	r3, #4104	; 0x1008
 8004246:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	2300      	movs	r3, #0
 800424e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004250:	2302      	movs	r3, #2
 8004252:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	4619      	mov	r1, r3
 800425a:	4805      	ldr	r0, [pc, #20]	; (8004270 <MX_GPIO_Init+0xc0>)
 800425c:	f000 fc74 	bl	8004b48 <HAL_GPIO_Init>

}
 8004260:	bf00      	nop
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40021000 	.word	0x40021000
 800426c:	40010800 	.word	0x40010800
 8004270:	40010c00 	.word	0x40010c00

08004274 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004278:	b672      	cpsid	i
}
 800427a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800427c:	e7fe      	b.n	800427c <Error_Handler+0x8>
	...

08004280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_MspInit+0x5c>)
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	4a14      	ldr	r2, [pc, #80]	; (80042dc <HAL_MspInit+0x5c>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6193      	str	r3, [r2, #24]
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_MspInit+0x5c>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_MspInit+0x5c>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <HAL_MspInit+0x5c>)
 80042a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a8:	61d3      	str	r3, [r2, #28]
 80042aa:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <HAL_MspInit+0x5c>)
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <HAL_MspInit+0x60>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <HAL_MspInit+0x60>)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40010000 	.word	0x40010000

080042e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ec:	f107 0318 	add.w	r3, r7, #24
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a37      	ldr	r2, [pc, #220]	; (80043dc <HAL_SPI_MspInit+0xf8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d130      	bne.n	8004366 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004304:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	4a35      	ldr	r2, [pc, #212]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 800430a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800430e:	6193      	str	r3, [r2, #24]
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800431c:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	4a2f      	ldr	r2, [pc, #188]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 8004322:	f043 0304 	orr.w	r3, r3, #4
 8004326:	6193      	str	r3, [r2, #24]
 8004328:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SEN_SCK_Pin|SEN_MOSI_Pin;
 8004334:	23a0      	movs	r3, #160	; 0xa0
 8004336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004338:	2302      	movs	r3, #2
 800433a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800433c:	2303      	movs	r3, #3
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004340:	f107 0318 	add.w	r3, r7, #24
 8004344:	4619      	mov	r1, r3
 8004346:	4827      	ldr	r0, [pc, #156]	; (80043e4 <HAL_SPI_MspInit+0x100>)
 8004348:	f000 fbfe 	bl	8004b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEN_MISO_Pin;
 800434c:	2340      	movs	r3, #64	; 0x40
 800434e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004354:	2300      	movs	r3, #0
 8004356:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SEN_MISO_GPIO_Port, &GPIO_InitStruct);
 8004358:	f107 0318 	add.w	r3, r7, #24
 800435c:	4619      	mov	r1, r3
 800435e:	4821      	ldr	r0, [pc, #132]	; (80043e4 <HAL_SPI_MspInit+0x100>)
 8004360:	f000 fbf2 	bl	8004b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004364:	e036      	b.n	80043d4 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <HAL_SPI_MspInit+0x104>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d131      	bne.n	80043d4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 8004376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800437a:	61d3      	str	r3, [r2, #28]
 800437c:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 800438e:	f043 0308 	orr.w	r3, r3, #8
 8004392:	6193      	str	r3, [r2, #24]
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_SPI_MspInit+0xfc>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SMSN_FM_SCK_MSN_Pin|SMSN_FM_MOSI_MSNS_Pin;
 80043a0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80043a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a6:	2302      	movs	r3, #2
 80043a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043aa:	2303      	movs	r3, #3
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ae:	f107 0318 	add.w	r3, r7, #24
 80043b2:	4619      	mov	r1, r3
 80043b4:	480d      	ldr	r0, [pc, #52]	; (80043ec <HAL_SPI_MspInit+0x108>)
 80043b6:	f000 fbc7 	bl	8004b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SMSN_FM_MISO_MSNS_Pin;
 80043ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SMSN_FM_MISO_MSNS_GPIO_Port, &GPIO_InitStruct);
 80043c8:	f107 0318 	add.w	r3, r7, #24
 80043cc:	4619      	mov	r1, r3
 80043ce:	4807      	ldr	r0, [pc, #28]	; (80043ec <HAL_SPI_MspInit+0x108>)
 80043d0:	f000 fbba 	bl	8004b48 <HAL_GPIO_Init>
}
 80043d4:	bf00      	nop
 80043d6:	3728      	adds	r7, #40	; 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40013000 	.word	0x40013000
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40010800 	.word	0x40010800
 80043e8:	40003800 	.word	0x40003800
 80043ec:	40010c00 	.word	0x40010c00

080043f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a12      	ldr	r2, [pc, #72]	; (8004448 <HAL_TIM_PWM_MspInit+0x58>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10c      	bne.n	800441c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_TIM_PWM_MspInit+0x5c>)
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	4a11      	ldr	r2, [pc, #68]	; (800444c <HAL_TIM_PWM_MspInit+0x5c>)
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	61d3      	str	r3, [r2, #28]
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_TIM_PWM_MspInit+0x5c>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800441a:	e010      	b.n	800443e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0b      	ldr	r2, [pc, #44]	; (8004450 <HAL_TIM_PWM_MspInit+0x60>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10b      	bne.n	800443e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_TIM_PWM_MspInit+0x5c>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4a08      	ldr	r2, [pc, #32]	; (800444c <HAL_TIM_PWM_MspInit+0x5c>)
 800442c:	f043 0304 	orr.w	r3, r3, #4
 8004430:	61d3      	str	r3, [r2, #28]
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_TIM_PWM_MspInit+0x5c>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	40000400 	.word	0x40000400
 800444c:	40021000 	.word	0x40021000
 8004450:	40000800 	.word	0x40000800

08004454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445c:	f107 0314 	add.w	r3, r7, #20
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a28      	ldr	r2, [pc, #160]	; (8004510 <HAL_TIM_MspPostInit+0xbc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d12a      	bne.n	80044ca <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004474:	4b27      	ldr	r3, [pc, #156]	; (8004514 <HAL_TIM_MspPostInit+0xc0>)
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	4a26      	ldr	r2, [pc, #152]	; (8004514 <HAL_TIM_MspPostInit+0xc0>)
 800447a:	f043 0308 	orr.w	r3, r3, #8
 800447e:	6193      	str	r3, [r2, #24]
 8004480:	4b24      	ldr	r3, [pc, #144]	; (8004514 <HAL_TIM_MspPostInit+0xc0>)
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800448c:	2330      	movs	r3, #48	; 0x30
 800448e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004490:	2302      	movs	r3, #2
 8004492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004494:	2302      	movs	r3, #2
 8004496:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	4619      	mov	r1, r3
 800449e:	481e      	ldr	r0, [pc, #120]	; (8004518 <HAL_TIM_MspPostInit+0xc4>)
 80044a0:	f000 fb52 	bl	8004b48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_TIM_MspPostInit+0xc8>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
 80044c2:	4a16      	ldr	r2, [pc, #88]	; (800451c <HAL_TIM_MspPostInit+0xc8>)
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80044c8:	e01d      	b.n	8004506 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM4)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a14      	ldr	r2, [pc, #80]	; (8004520 <HAL_TIM_MspPostInit+0xcc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d118      	bne.n	8004506 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d4:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <HAL_TIM_MspPostInit+0xc0>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <HAL_TIM_MspPostInit+0xc0>)
 80044da:	f043 0308 	orr.w	r3, r3, #8
 80044de:	6193      	str	r3, [r2, #24]
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <HAL_TIM_MspPostInit+0xc0>)
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f6:	2302      	movs	r3, #2
 80044f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	4619      	mov	r1, r3
 8004500:	4805      	ldr	r0, [pc, #20]	; (8004518 <HAL_TIM_MspPostInit+0xc4>)
 8004502:	f000 fb21 	bl	8004b48 <HAL_GPIO_Init>
}
 8004506:	bf00      	nop
 8004508:	3728      	adds	r7, #40	; 0x28
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40000400 	.word	0x40000400
 8004514:	40021000 	.word	0x40021000
 8004518:	40010c00 	.word	0x40010c00
 800451c:	40010000 	.word	0x40010000
 8004520:	40000800 	.word	0x40000800

08004524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08c      	sub	sp, #48	; 0x30
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	f107 031c 	add.w	r3, r7, #28
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a3e      	ldr	r2, [pc, #248]	; (8004638 <HAL_UART_MspInit+0x114>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d13e      	bne.n	80045c2 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004544:	4b3d      	ldr	r3, [pc, #244]	; (800463c <HAL_UART_MspInit+0x118>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	4a3c      	ldr	r2, [pc, #240]	; (800463c <HAL_UART_MspInit+0x118>)
 800454a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800454e:	6193      	str	r3, [r2, #24]
 8004550:	4b3a      	ldr	r3, [pc, #232]	; (800463c <HAL_UART_MspInit+0x118>)
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800455c:	4b37      	ldr	r3, [pc, #220]	; (800463c <HAL_UART_MspInit+0x118>)
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	4a36      	ldr	r2, [pc, #216]	; (800463c <HAL_UART_MspInit+0x118>)
 8004562:	f043 0308 	orr.w	r3, r3, #8
 8004566:	6193      	str	r3, [r2, #24]
 8004568:	4b34      	ldr	r3, [pc, #208]	; (800463c <HAL_UART_MspInit+0x118>)
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004574:	2340      	movs	r3, #64	; 0x40
 8004576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004578:	2302      	movs	r3, #2
 800457a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800457c:	2303      	movs	r3, #3
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004580:	f107 031c 	add.w	r3, r7, #28
 8004584:	4619      	mov	r1, r3
 8004586:	482e      	ldr	r0, [pc, #184]	; (8004640 <HAL_UART_MspInit+0x11c>)
 8004588:	f000 fade 	bl	8004b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004590:	2300      	movs	r3, #0
 8004592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004598:	f107 031c 	add.w	r3, r7, #28
 800459c:	4619      	mov	r1, r3
 800459e:	4828      	ldr	r0, [pc, #160]	; (8004640 <HAL_UART_MspInit+0x11c>)
 80045a0:	f000 fad2 	bl	8004b48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <HAL_UART_MspInit+0x120>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ba:	4a22      	ldr	r2, [pc, #136]	; (8004644 <HAL_UART_MspInit+0x120>)
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80045c0:	e036      	b.n	8004630 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a20      	ldr	r2, [pc, #128]	; (8004648 <HAL_UART_MspInit+0x124>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d131      	bne.n	8004630 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_UART_MspInit+0x118>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	4a1a      	ldr	r2, [pc, #104]	; (800463c <HAL_UART_MspInit+0x118>)
 80045d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d6:	61d3      	str	r3, [r2, #28]
 80045d8:	4b18      	ldr	r3, [pc, #96]	; (800463c <HAL_UART_MspInit+0x118>)
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e4:	4b15      	ldr	r3, [pc, #84]	; (800463c <HAL_UART_MspInit+0x118>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	4a14      	ldr	r2, [pc, #80]	; (800463c <HAL_UART_MspInit+0x118>)
 80045ea:	f043 0308 	orr.w	r3, r3, #8
 80045ee:	6193      	str	r3, [r2, #24]
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <HAL_UART_MspInit+0x118>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004602:	2302      	movs	r3, #2
 8004604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004606:	2303      	movs	r3, #3
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800460a:	f107 031c 	add.w	r3, r7, #28
 800460e:	4619      	mov	r1, r3
 8004610:	480b      	ldr	r0, [pc, #44]	; (8004640 <HAL_UART_MspInit+0x11c>)
 8004612:	f000 fa99 	bl	8004b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004616:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800461a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800461c:	2300      	movs	r3, #0
 800461e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004620:	2300      	movs	r3, #0
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004624:	f107 031c 	add.w	r3, r7, #28
 8004628:	4619      	mov	r1, r3
 800462a:	4805      	ldr	r0, [pc, #20]	; (8004640 <HAL_UART_MspInit+0x11c>)
 800462c:	f000 fa8c 	bl	8004b48 <HAL_GPIO_Init>
}
 8004630:	bf00      	nop
 8004632:	3730      	adds	r7, #48	; 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40013800 	.word	0x40013800
 800463c:	40021000 	.word	0x40021000
 8004640:	40010c00 	.word	0x40010c00
 8004644:	40010000 	.word	0x40010000
 8004648:	40004800 	.word	0x40004800

0800464c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004650:	e7fe      	b.n	8004650 <NMI_Handler+0x4>

08004652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004656:	e7fe      	b.n	8004656 <HardFault_Handler+0x4>

08004658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800465c:	e7fe      	b.n	800465c <MemManage_Handler+0x4>

0800465e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004662:	e7fe      	b.n	8004662 <BusFault_Handler+0x4>

08004664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004668:	e7fe      	b.n	8004668 <UsageFault_Handler+0x4>

0800466a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800466a:	b480      	push	{r7}
 800466c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004676:	b480      	push	{r7}
 8004678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004692:	f000 f935 	bl	8004900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004696:	bf00      	nop
 8004698:	bd80      	pop	{r7, pc}

0800469a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0
	return 1;
 800469e:	2301      	movs	r3, #1
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <_kill>:

int _kill(int pid, int sig)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80046b2:	f002 fb11 	bl	8006cd8 <__errno>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2216      	movs	r2, #22
 80046ba:	601a      	str	r2, [r3, #0]
	return -1;
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_exit>:

void _exit (int status)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80046d0:	f04f 31ff 	mov.w	r1, #4294967295
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ffe7 	bl	80046a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80046da:	e7fe      	b.n	80046da <_exit+0x12>

080046dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	e00a      	b.n	8004704 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80046ee:	f3af 8000 	nop.w
 80046f2:	4601      	mov	r1, r0
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	60ba      	str	r2, [r7, #8]
 80046fa:	b2ca      	uxtb	r2, r1
 80046fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	3301      	adds	r3, #1
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	dbf0      	blt.n	80046ee <_read+0x12>
	}

return len;
 800470c:	687b      	ldr	r3, [r7, #4]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b086      	sub	sp, #24
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e009      	b.n	800473c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	60ba      	str	r2, [r7, #8]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	3301      	adds	r3, #1
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	dbf1      	blt.n	8004728 <_write+0x12>
	}
	return len;
 8004744:	687b      	ldr	r3, [r7, #4]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <_close>:

int _close(int file)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
	return -1;
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004774:	605a      	str	r2, [r3, #4]
	return 0;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr

08004782 <_isatty>:

int _isatty(int file)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
	return 1;
 800478a:	2301      	movs	r3, #1
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
	return 0;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
	...

080047b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047b8:	4a14      	ldr	r2, [pc, #80]	; (800480c <_sbrk+0x5c>)
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <_sbrk+0x60>)
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <_sbrk+0x64>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <_sbrk+0x64>)
 80047ce:	4a12      	ldr	r2, [pc, #72]	; (8004818 <_sbrk+0x68>)
 80047d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <_sbrk+0x64>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4413      	add	r3, r2
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d207      	bcs.n	80047f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047e0:	f002 fa7a 	bl	8006cd8 <__errno>
 80047e4:	4603      	mov	r3, r0
 80047e6:	220c      	movs	r2, #12
 80047e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047ea:	f04f 33ff 	mov.w	r3, #4294967295
 80047ee:	e009      	b.n	8004804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <_sbrk+0x64>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047f6:	4b07      	ldr	r3, [pc, #28]	; (8004814 <_sbrk+0x64>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	4a05      	ldr	r2, [pc, #20]	; (8004814 <_sbrk+0x64>)
 8004800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004802:	68fb      	ldr	r3, [r7, #12]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20005000 	.word	0x20005000
 8004810:	00000400 	.word	0x00000400
 8004814:	20000280 	.word	0x20000280
 8004818:	20000670 	.word	0x20000670

0800481c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004820:	bf00      	nop
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004828:	f7ff fff8 	bl	800481c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800482c:	480b      	ldr	r0, [pc, #44]	; (800485c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800482e:	490c      	ldr	r1, [pc, #48]	; (8004860 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004830:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004834:	e002      	b.n	800483c <LoopCopyDataInit>

08004836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800483a:	3304      	adds	r3, #4

0800483c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800483c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800483e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004840:	d3f9      	bcc.n	8004836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004842:	4a09      	ldr	r2, [pc, #36]	; (8004868 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004844:	4c09      	ldr	r4, [pc, #36]	; (800486c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004848:	e001      	b.n	800484e <LoopFillZerobss>

0800484a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800484a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800484c:	3204      	adds	r2, #4

0800484e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800484e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004850:	d3fb      	bcc.n	800484a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004852:	f002 fa47 	bl	8006ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004856:	f7ff fa4f 	bl	8003cf8 <main>
  bx lr
 800485a:	4770      	bx	lr
  ldr r0, =_sdata
 800485c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004860:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004864:	0800f088 	.word	0x0800f088
  ldr r2, =_sbss
 8004868:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800486c:	20000670 	.word	0x20000670

08004870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004870:	e7fe      	b.n	8004870 <ADC1_2_IRQHandler>
	...

08004874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004878:	4b08      	ldr	r3, [pc, #32]	; (800489c <HAL_Init+0x28>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a07      	ldr	r2, [pc, #28]	; (800489c <HAL_Init+0x28>)
 800487e:	f043 0310 	orr.w	r3, r3, #16
 8004882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004884:	2003      	movs	r0, #3
 8004886:	f000 f92b 	bl	8004ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800488a:	200f      	movs	r0, #15
 800488c:	f000 f808 	bl	80048a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004890:	f7ff fcf6 	bl	8004280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40022000 	.word	0x40022000

080048a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048a8:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_InitTick+0x54>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <HAL_InitTick+0x58>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	4619      	mov	r1, r3
 80048b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f935 	bl	8004b2e <HAL_SYSTICK_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e00e      	b.n	80048ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b0f      	cmp	r3, #15
 80048d2:	d80a      	bhi.n	80048ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048d4:	2200      	movs	r2, #0
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	f000 f90b 	bl	8004af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048e0:	4a06      	ldr	r2, [pc, #24]	; (80048fc <HAL_InitTick+0x5c>)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000000 	.word	0x20000000
 80048f8:	20000008 	.word	0x20000008
 80048fc:	20000004 	.word	0x20000004

08004900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_IncTick+0x1c>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_IncTick+0x20>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4413      	add	r3, r2
 8004910:	4a03      	ldr	r2, [pc, #12]	; (8004920 <HAL_IncTick+0x20>)
 8004912:	6013      	str	r3, [r2, #0]
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	20000008 	.word	0x20000008
 8004920:	2000065c 	.word	0x2000065c

08004924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  return uwTick;
 8004928:	4b02      	ldr	r3, [pc, #8]	; (8004934 <HAL_GetTick+0x10>)
 800492a:	681b      	ldr	r3, [r3, #0]
}
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr
 8004934:	2000065c 	.word	0x2000065c

08004938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004940:	f7ff fff0 	bl	8004924 <HAL_GetTick>
 8004944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d005      	beq.n	800495e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004952:	4b0a      	ldr	r3, [pc, #40]	; (800497c <HAL_Delay+0x44>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800495e:	bf00      	nop
 8004960:	f7ff ffe0 	bl	8004924 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	429a      	cmp	r2, r3
 800496e:	d8f7      	bhi.n	8004960 <HAL_Delay+0x28>
  {
  }
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000008 	.word	0x20000008

08004980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004990:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049b2:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	60d3      	str	r3, [r2, #12]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <__NVIC_GetPriorityGrouping+0x18>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 0307 	and.w	r3, r3, #7
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	6039      	str	r1, [r7, #0]
 80049ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	db0a      	blt.n	8004a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	490c      	ldr	r1, [pc, #48]	; (8004a30 <__NVIC_SetPriority+0x4c>)
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	0112      	lsls	r2, r2, #4
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	440b      	add	r3, r1
 8004a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a0c:	e00a      	b.n	8004a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	4908      	ldr	r1, [pc, #32]	; (8004a34 <__NVIC_SetPriority+0x50>)
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	3b04      	subs	r3, #4
 8004a1c:	0112      	lsls	r2, r2, #4
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	440b      	add	r3, r1
 8004a22:	761a      	strb	r2, [r3, #24]
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000e100 	.word	0xe000e100
 8004a34:	e000ed00 	.word	0xe000ed00

08004a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b089      	sub	sp, #36	; 0x24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f1c3 0307 	rsb	r3, r3, #7
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	bf28      	it	cs
 8004a56:	2304      	movcs	r3, #4
 8004a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	2b06      	cmp	r3, #6
 8004a60:	d902      	bls.n	8004a68 <NVIC_EncodePriority+0x30>
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3b03      	subs	r3, #3
 8004a66:	e000      	b.n	8004a6a <NVIC_EncodePriority+0x32>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43da      	mvns	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a80:	f04f 31ff 	mov.w	r1, #4294967295
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8a:	43d9      	mvns	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a90:	4313      	orrs	r3, r2
         );
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3724      	adds	r7, #36	; 0x24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aac:	d301      	bcc.n	8004ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e00f      	b.n	8004ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ab2:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <SysTick_Config+0x40>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aba:	210f      	movs	r1, #15
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	f7ff ff90 	bl	80049e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <SysTick_Config+0x40>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aca:	4b04      	ldr	r3, [pc, #16]	; (8004adc <SysTick_Config+0x40>)
 8004acc:	2207      	movs	r2, #7
 8004ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	e000e010 	.word	0xe000e010

08004ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff ff49 	bl	8004980 <__NVIC_SetPriorityGrouping>
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	4603      	mov	r3, r0
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b08:	f7ff ff5e 	bl	80049c8 <__NVIC_GetPriorityGrouping>
 8004b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f7ff ff90 	bl	8004a38 <NVIC_EncodePriority>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff5f 	bl	80049e4 <__NVIC_SetPriority>
}
 8004b26:	bf00      	nop
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff ffb0 	bl	8004a9c <SysTick_Config>
 8004b3c:	4603      	mov	r3, r0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b08b      	sub	sp, #44	; 0x2c
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b52:	2300      	movs	r3, #0
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004b56:	2300      	movs	r3, #0
 8004b58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b5a:	e169      	b.n	8004e30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	f040 8158 	bne.w	8004e2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4a9a      	ldr	r2, [pc, #616]	; (8004de8 <HAL_GPIO_Init+0x2a0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d05e      	beq.n	8004c42 <HAL_GPIO_Init+0xfa>
 8004b84:	4a98      	ldr	r2, [pc, #608]	; (8004de8 <HAL_GPIO_Init+0x2a0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d875      	bhi.n	8004c76 <HAL_GPIO_Init+0x12e>
 8004b8a:	4a98      	ldr	r2, [pc, #608]	; (8004dec <HAL_GPIO_Init+0x2a4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d058      	beq.n	8004c42 <HAL_GPIO_Init+0xfa>
 8004b90:	4a96      	ldr	r2, [pc, #600]	; (8004dec <HAL_GPIO_Init+0x2a4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d86f      	bhi.n	8004c76 <HAL_GPIO_Init+0x12e>
 8004b96:	4a96      	ldr	r2, [pc, #600]	; (8004df0 <HAL_GPIO_Init+0x2a8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d052      	beq.n	8004c42 <HAL_GPIO_Init+0xfa>
 8004b9c:	4a94      	ldr	r2, [pc, #592]	; (8004df0 <HAL_GPIO_Init+0x2a8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d869      	bhi.n	8004c76 <HAL_GPIO_Init+0x12e>
 8004ba2:	4a94      	ldr	r2, [pc, #592]	; (8004df4 <HAL_GPIO_Init+0x2ac>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d04c      	beq.n	8004c42 <HAL_GPIO_Init+0xfa>
 8004ba8:	4a92      	ldr	r2, [pc, #584]	; (8004df4 <HAL_GPIO_Init+0x2ac>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d863      	bhi.n	8004c76 <HAL_GPIO_Init+0x12e>
 8004bae:	4a92      	ldr	r2, [pc, #584]	; (8004df8 <HAL_GPIO_Init+0x2b0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d046      	beq.n	8004c42 <HAL_GPIO_Init+0xfa>
 8004bb4:	4a90      	ldr	r2, [pc, #576]	; (8004df8 <HAL_GPIO_Init+0x2b0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d85d      	bhi.n	8004c76 <HAL_GPIO_Init+0x12e>
 8004bba:	2b12      	cmp	r3, #18
 8004bbc:	d82a      	bhi.n	8004c14 <HAL_GPIO_Init+0xcc>
 8004bbe:	2b12      	cmp	r3, #18
 8004bc0:	d859      	bhi.n	8004c76 <HAL_GPIO_Init+0x12e>
 8004bc2:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <HAL_GPIO_Init+0x80>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004c43 	.word	0x08004c43
 8004bcc:	08004c1d 	.word	0x08004c1d
 8004bd0:	08004c2f 	.word	0x08004c2f
 8004bd4:	08004c71 	.word	0x08004c71
 8004bd8:	08004c77 	.word	0x08004c77
 8004bdc:	08004c77 	.word	0x08004c77
 8004be0:	08004c77 	.word	0x08004c77
 8004be4:	08004c77 	.word	0x08004c77
 8004be8:	08004c77 	.word	0x08004c77
 8004bec:	08004c77 	.word	0x08004c77
 8004bf0:	08004c77 	.word	0x08004c77
 8004bf4:	08004c77 	.word	0x08004c77
 8004bf8:	08004c77 	.word	0x08004c77
 8004bfc:	08004c77 	.word	0x08004c77
 8004c00:	08004c77 	.word	0x08004c77
 8004c04:	08004c77 	.word	0x08004c77
 8004c08:	08004c77 	.word	0x08004c77
 8004c0c:	08004c25 	.word	0x08004c25
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	4a79      	ldr	r2, [pc, #484]	; (8004dfc <HAL_GPIO_Init+0x2b4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004c1a:	e02c      	b.n	8004c76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	623b      	str	r3, [r7, #32]
          break;
 8004c22:	e029      	b.n	8004c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	623b      	str	r3, [r7, #32]
          break;
 8004c2c:	e024      	b.n	8004c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	3308      	adds	r3, #8
 8004c34:	623b      	str	r3, [r7, #32]
          break;
 8004c36:	e01f      	b.n	8004c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	623b      	str	r3, [r7, #32]
          break;
 8004c40:	e01a      	b.n	8004c78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d102      	bne.n	8004c50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004c4a:	2304      	movs	r3, #4
 8004c4c:	623b      	str	r3, [r7, #32]
          break;
 8004c4e:	e013      	b.n	8004c78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d105      	bne.n	8004c64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c58:	2308      	movs	r3, #8
 8004c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	611a      	str	r2, [r3, #16]
          break;
 8004c62:	e009      	b.n	8004c78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c64:	2308      	movs	r3, #8
 8004c66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	615a      	str	r2, [r3, #20]
          break;
 8004c6e:	e003      	b.n	8004c78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004c70:	2300      	movs	r3, #0
 8004c72:	623b      	str	r3, [r7, #32]
          break;
 8004c74:	e000      	b.n	8004c78 <HAL_GPIO_Init+0x130>
          break;
 8004c76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2bff      	cmp	r3, #255	; 0xff
 8004c7c:	d801      	bhi.n	8004c82 <HAL_GPIO_Init+0x13a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	e001      	b.n	8004c86 <HAL_GPIO_Init+0x13e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3304      	adds	r3, #4
 8004c86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2bff      	cmp	r3, #255	; 0xff
 8004c8c:	d802      	bhi.n	8004c94 <HAL_GPIO_Init+0x14c>
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	e002      	b.n	8004c9a <HAL_GPIO_Init+0x152>
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	3b08      	subs	r3, #8
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	210f      	movs	r1, #15
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	401a      	ands	r2, r3
 8004cac:	6a39      	ldr	r1, [r7, #32]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80b1 	beq.w	8004e2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004cc8:	4b4d      	ldr	r3, [pc, #308]	; (8004e00 <HAL_GPIO_Init+0x2b8>)
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	4a4c      	ldr	r2, [pc, #304]	; (8004e00 <HAL_GPIO_Init+0x2b8>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6193      	str	r3, [r2, #24]
 8004cd4:	4b4a      	ldr	r3, [pc, #296]	; (8004e00 <HAL_GPIO_Init+0x2b8>)
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ce0:	4a48      	ldr	r2, [pc, #288]	; (8004e04 <HAL_GPIO_Init+0x2bc>)
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	089b      	lsrs	r3, r3, #2
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	220f      	movs	r2, #15
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4013      	ands	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a40      	ldr	r2, [pc, #256]	; (8004e08 <HAL_GPIO_Init+0x2c0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <HAL_GPIO_Init+0x1ec>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a3f      	ldr	r2, [pc, #252]	; (8004e0c <HAL_GPIO_Init+0x2c4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00d      	beq.n	8004d30 <HAL_GPIO_Init+0x1e8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a3e      	ldr	r2, [pc, #248]	; (8004e10 <HAL_GPIO_Init+0x2c8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <HAL_GPIO_Init+0x1e4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3d      	ldr	r2, [pc, #244]	; (8004e14 <HAL_GPIO_Init+0x2cc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d101      	bne.n	8004d28 <HAL_GPIO_Init+0x1e0>
 8004d24:	2303      	movs	r3, #3
 8004d26:	e006      	b.n	8004d36 <HAL_GPIO_Init+0x1ee>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	e004      	b.n	8004d36 <HAL_GPIO_Init+0x1ee>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e002      	b.n	8004d36 <HAL_GPIO_Init+0x1ee>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <HAL_GPIO_Init+0x1ee>
 8004d34:	2300      	movs	r3, #0
 8004d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d38:	f002 0203 	and.w	r2, r2, #3
 8004d3c:	0092      	lsls	r2, r2, #2
 8004d3e:	4093      	lsls	r3, r2
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004d46:	492f      	ldr	r1, [pc, #188]	; (8004e04 <HAL_GPIO_Init+0x2bc>)
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	089b      	lsrs	r3, r3, #2
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d006      	beq.n	8004d6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d60:	4b2d      	ldr	r3, [pc, #180]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	492c      	ldr	r1, [pc, #176]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	608b      	str	r3, [r1, #8]
 8004d6c:	e006      	b.n	8004d7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004d6e:	4b2a      	ldr	r3, [pc, #168]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	43db      	mvns	r3, r3
 8004d76:	4928      	ldr	r1, [pc, #160]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d006      	beq.n	8004d96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d88:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	4922      	ldr	r1, [pc, #136]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60cb      	str	r3, [r1, #12]
 8004d94:	e006      	b.n	8004da4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d96:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	491e      	ldr	r1, [pc, #120]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d006      	beq.n	8004dbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004db0:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	4918      	ldr	r1, [pc, #96]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
 8004dbc:	e006      	b.n	8004dcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004dbe:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	4914      	ldr	r1, [pc, #80]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d021      	beq.n	8004e1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	490e      	ldr	r1, [pc, #56]	; (8004e18 <HAL_GPIO_Init+0x2d0>)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	600b      	str	r3, [r1, #0]
 8004de4:	e021      	b.n	8004e2a <HAL_GPIO_Init+0x2e2>
 8004de6:	bf00      	nop
 8004de8:	10320000 	.word	0x10320000
 8004dec:	10310000 	.word	0x10310000
 8004df0:	10220000 	.word	0x10220000
 8004df4:	10210000 	.word	0x10210000
 8004df8:	10120000 	.word	0x10120000
 8004dfc:	10110000 	.word	0x10110000
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40010800 	.word	0x40010800
 8004e0c:	40010c00 	.word	0x40010c00
 8004e10:	40011000 	.word	0x40011000
 8004e14:	40011400 	.word	0x40011400
 8004e18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_GPIO_Init+0x304>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	4909      	ldr	r1, [pc, #36]	; (8004e4c <HAL_GPIO_Init+0x304>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f47f ae8e 	bne.w	8004b5c <HAL_GPIO_Init+0x14>
  }
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	372c      	adds	r7, #44	; 0x2c
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	40010400 	.word	0x40010400

08004e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e60:	787b      	ldrb	r3, [r7, #1]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004e6c:	e003      	b.n	8004e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	041a      	lsls	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	611a      	str	r2, [r3, #16]
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr

08004e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e26c      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 8087 	beq.w	8004fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ea0:	4b92      	ldr	r3, [pc, #584]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d00c      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004eac:	4b8f      	ldr	r3, [pc, #572]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 030c 	and.w	r3, r3, #12
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d112      	bne.n	8004ede <HAL_RCC_OscConfig+0x5e>
 8004eb8:	4b8c      	ldr	r3, [pc, #560]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec4:	d10b      	bne.n	8004ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec6:	4b89      	ldr	r3, [pc, #548]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d06c      	beq.n	8004fac <HAL_RCC_OscConfig+0x12c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d168      	bne.n	8004fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e246      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x76>
 8004ee8:	4b80      	ldr	r3, [pc, #512]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a7f      	ldr	r2, [pc, #508]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	e02e      	b.n	8004f54 <HAL_RCC_OscConfig+0xd4>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x98>
 8004efe:	4b7b      	ldr	r3, [pc, #492]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7a      	ldr	r2, [pc, #488]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b78      	ldr	r3, [pc, #480]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a77      	ldr	r2, [pc, #476]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e01d      	b.n	8004f54 <HAL_RCC_OscConfig+0xd4>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f20:	d10c      	bne.n	8004f3c <HAL_RCC_OscConfig+0xbc>
 8004f22:	4b72      	ldr	r3, [pc, #456]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a71      	ldr	r2, [pc, #452]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	4b6f      	ldr	r3, [pc, #444]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a6e      	ldr	r2, [pc, #440]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCC_OscConfig+0xd4>
 8004f3c:	4b6b      	ldr	r3, [pc, #428]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a6a      	ldr	r2, [pc, #424]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	4b68      	ldr	r3, [pc, #416]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a67      	ldr	r2, [pc, #412]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d013      	beq.n	8004f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7ff fce2 	bl	8004924 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f64:	f7ff fcde 	bl	8004924 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	; 0x64
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e1fa      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f76:	4b5d      	ldr	r3, [pc, #372]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0xe4>
 8004f82:	e014      	b.n	8004fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f84:	f7ff fcce 	bl	8004924 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f8c:	f7ff fcca 	bl	8004924 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b64      	cmp	r3, #100	; 0x64
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e1e6      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f9e:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x10c>
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d063      	beq.n	8005082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fba:	4b4c      	ldr	r3, [pc, #304]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004fc6:	4b49      	ldr	r3, [pc, #292]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 030c 	and.w	r3, r3, #12
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d11c      	bne.n	800500c <HAL_RCC_OscConfig+0x18c>
 8004fd2:	4b46      	ldr	r3, [pc, #280]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d116      	bne.n	800500c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fde:	4b43      	ldr	r3, [pc, #268]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x176>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e1ba      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff6:	4b3d      	ldr	r3, [pc, #244]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4939      	ldr	r1, [pc, #228]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500a:	e03a      	b.n	8005082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d020      	beq.n	8005056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005014:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <HAL_RCC_OscConfig+0x270>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501a:	f7ff fc83 	bl	8004924 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005022:	f7ff fc7f 	bl	8004924 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e19b      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005034:	4b2d      	ldr	r3, [pc, #180]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005040:	4b2a      	ldr	r3, [pc, #168]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4927      	ldr	r1, [pc, #156]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8005050:	4313      	orrs	r3, r2
 8005052:	600b      	str	r3, [r1, #0]
 8005054:	e015      	b.n	8005082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005056:	4b26      	ldr	r3, [pc, #152]	; (80050f0 <HAL_RCC_OscConfig+0x270>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7ff fc62 	bl	8004924 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005064:	f7ff fc5e 	bl	8004924 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e17a      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005076:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d03a      	beq.n	8005104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d019      	beq.n	80050ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005096:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <HAL_RCC_OscConfig+0x274>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509c:	f7ff fc42 	bl	8004924 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a4:	f7ff fc3e 	bl	8004924 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e15a      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <HAL_RCC_OscConfig+0x26c>)
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050c2:	2001      	movs	r0, #1
 80050c4:	f000 facc 	bl	8005660 <RCC_Delay>
 80050c8:	e01c      	b.n	8005104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ca:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <HAL_RCC_OscConfig+0x274>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d0:	f7ff fc28 	bl	8004924 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d6:	e00f      	b.n	80050f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d8:	f7ff fc24 	bl	8004924 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d908      	bls.n	80050f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e140      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
 80050ea:	bf00      	nop
 80050ec:	40021000 	.word	0x40021000
 80050f0:	42420000 	.word	0x42420000
 80050f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f8:	4b9e      	ldr	r3, [pc, #632]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e9      	bne.n	80050d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80a6 	beq.w	800525e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005112:	2300      	movs	r3, #0
 8005114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005116:	4b97      	ldr	r3, [pc, #604]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005122:	4b94      	ldr	r3, [pc, #592]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4a93      	ldr	r2, [pc, #588]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 8005128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800512c:	61d3      	str	r3, [r2, #28]
 800512e:	4b91      	ldr	r3, [pc, #580]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005136:	60bb      	str	r3, [r7, #8]
 8005138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800513a:	2301      	movs	r3, #1
 800513c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513e:	4b8e      	ldr	r3, [pc, #568]	; (8005378 <HAL_RCC_OscConfig+0x4f8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d118      	bne.n	800517c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800514a:	4b8b      	ldr	r3, [pc, #556]	; (8005378 <HAL_RCC_OscConfig+0x4f8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a8a      	ldr	r2, [pc, #552]	; (8005378 <HAL_RCC_OscConfig+0x4f8>)
 8005150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005156:	f7ff fbe5 	bl	8004924 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515e:	f7ff fbe1 	bl	8004924 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b64      	cmp	r3, #100	; 0x64
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e0fd      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005170:	4b81      	ldr	r3, [pc, #516]	; (8005378 <HAL_RCC_OscConfig+0x4f8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d106      	bne.n	8005192 <HAL_RCC_OscConfig+0x312>
 8005184:	4b7b      	ldr	r3, [pc, #492]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	4a7a      	ldr	r2, [pc, #488]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6213      	str	r3, [r2, #32]
 8005190:	e02d      	b.n	80051ee <HAL_RCC_OscConfig+0x36e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0x334>
 800519a:	4b76      	ldr	r3, [pc, #472]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	4a75      	ldr	r2, [pc, #468]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051a0:	f023 0301 	bic.w	r3, r3, #1
 80051a4:	6213      	str	r3, [r2, #32]
 80051a6:	4b73      	ldr	r3, [pc, #460]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	4a72      	ldr	r2, [pc, #456]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051ac:	f023 0304 	bic.w	r3, r3, #4
 80051b0:	6213      	str	r3, [r2, #32]
 80051b2:	e01c      	b.n	80051ee <HAL_RCC_OscConfig+0x36e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b05      	cmp	r3, #5
 80051ba:	d10c      	bne.n	80051d6 <HAL_RCC_OscConfig+0x356>
 80051bc:	4b6d      	ldr	r3, [pc, #436]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	4a6c      	ldr	r2, [pc, #432]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051c2:	f043 0304 	orr.w	r3, r3, #4
 80051c6:	6213      	str	r3, [r2, #32]
 80051c8:	4b6a      	ldr	r3, [pc, #424]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	4a69      	ldr	r2, [pc, #420]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	6213      	str	r3, [r2, #32]
 80051d4:	e00b      	b.n	80051ee <HAL_RCC_OscConfig+0x36e>
 80051d6:	4b67      	ldr	r3, [pc, #412]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4a66      	ldr	r2, [pc, #408]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051dc:	f023 0301 	bic.w	r3, r3, #1
 80051e0:	6213      	str	r3, [r2, #32]
 80051e2:	4b64      	ldr	r3, [pc, #400]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4a63      	ldr	r2, [pc, #396]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80051e8:	f023 0304 	bic.w	r3, r3, #4
 80051ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d015      	beq.n	8005222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f6:	f7ff fb95 	bl	8004924 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fc:	e00a      	b.n	8005214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fe:	f7ff fb91 	bl	8004924 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	f241 3288 	movw	r2, #5000	; 0x1388
 800520c:	4293      	cmp	r3, r2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e0ab      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005214:	4b57      	ldr	r3, [pc, #348]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0ee      	beq.n	80051fe <HAL_RCC_OscConfig+0x37e>
 8005220:	e014      	b.n	800524c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005222:	f7ff fb7f 	bl	8004924 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005228:	e00a      	b.n	8005240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522a:	f7ff fb7b 	bl	8004924 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	f241 3288 	movw	r2, #5000	; 0x1388
 8005238:	4293      	cmp	r3, r2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e095      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005240:	4b4c      	ldr	r3, [pc, #304]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1ee      	bne.n	800522a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d105      	bne.n	800525e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005252:	4b48      	ldr	r3, [pc, #288]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	4a47      	ldr	r2, [pc, #284]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 8005258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800525c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 8081 	beq.w	800536a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005268:	4b42      	ldr	r3, [pc, #264]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 030c 	and.w	r3, r3, #12
 8005270:	2b08      	cmp	r3, #8
 8005272:	d061      	beq.n	8005338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d146      	bne.n	800530a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527c:	4b3f      	ldr	r3, [pc, #252]	; (800537c <HAL_RCC_OscConfig+0x4fc>)
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005282:	f7ff fb4f 	bl	8004924 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528a:	f7ff fb4b 	bl	8004924 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e067      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800529c:	4b35      	ldr	r3, [pc, #212]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f0      	bne.n	800528a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b0:	d108      	bne.n	80052c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052b2:	4b30      	ldr	r3, [pc, #192]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	492d      	ldr	r1, [pc, #180]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a19      	ldr	r1, [r3, #32]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	430b      	orrs	r3, r1
 80052d6:	4927      	ldr	r1, [pc, #156]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0x4fc>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e2:	f7ff fb1f 	bl	8004924 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ea:	f7ff fb1b 	bl	8004924 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e037      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052fc:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x46a>
 8005308:	e02f      	b.n	800536a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530a:	4b1c      	ldr	r3, [pc, #112]	; (800537c <HAL_RCC_OscConfig+0x4fc>)
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005310:	f7ff fb08 	bl	8004924 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005318:	f7ff fb04 	bl	8004924 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e020      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x498>
 8005336:	e018      	b.n	800536a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e013      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <HAL_RCC_OscConfig+0x4f4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	429a      	cmp	r2, r3
 8005356:	d106      	bne.n	8005366 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005362:	429a      	cmp	r2, r3
 8005364:	d001      	beq.n	800536a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40021000 	.word	0x40021000
 8005378:	40007000 	.word	0x40007000
 800537c:	42420060 	.word	0x42420060

08005380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0d0      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b6a      	ldr	r3, [pc, #424]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d910      	bls.n	80053c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b67      	ldr	r3, [pc, #412]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f023 0207 	bic.w	r2, r3, #7
 80053aa:	4965      	ldr	r1, [pc, #404]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b63      	ldr	r3, [pc, #396]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0b8      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d020      	beq.n	8005412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4a58      	ldr	r2, [pc, #352]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80053e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053f4:	4b53      	ldr	r3, [pc, #332]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80053fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	494d      	ldr	r1, [pc, #308]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d040      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b47      	ldr	r3, [pc, #284]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d115      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b41      	ldr	r3, [pc, #260]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e073      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e06b      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b39      	ldr	r3, [pc, #228]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4936      	ldr	r1, [pc, #216]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005470:	f7ff fa58 	bl	8004924 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7ff fa54 	bl	8004924 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e053      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2d      	ldr	r3, [pc, #180]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d210      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 0207 	bic.w	r2, r3, #7
 80054b6:	4922      	ldr	r1, [pc, #136]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e032      	b.n	8005536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4916      	ldr	r1, [pc, #88]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	490e      	ldr	r1, [pc, #56]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 800550a:	4313      	orrs	r3, r2
 800550c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800550e:	f000 f821 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8005512:	4602      	mov	r2, r0
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	490a      	ldr	r1, [pc, #40]	; (8005548 <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	5ccb      	ldrb	r3, [r1, r3]
 8005522:	fa22 f303 	lsr.w	r3, r2, r3
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <HAL_RCC_ClockConfig+0x1cc>)
 8005528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCC_ClockConfig+0x1d0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff f9b6 	bl	80048a0 <HAL_InitTick>

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40022000 	.word	0x40022000
 8005544:	40021000 	.word	0x40021000
 8005548:	0800e560 	.word	0x0800e560
 800554c:	20000000 	.word	0x20000000
 8005550:	20000004 	.word	0x20000004

08005554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	2300      	movs	r3, #0
 8005568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800556e:	4b1e      	ldr	r3, [pc, #120]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 030c 	and.w	r3, r3, #12
 800557a:	2b04      	cmp	r3, #4
 800557c:	d002      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x30>
 800557e:	2b08      	cmp	r3, #8
 8005580:	d003      	beq.n	800558a <HAL_RCC_GetSysClockFreq+0x36>
 8005582:	e027      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <HAL_RCC_GetSysClockFreq+0x98>)
 8005586:	613b      	str	r3, [r7, #16]
      break;
 8005588:	e027      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	0c9b      	lsrs	r3, r3, #18
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005594:	5cd3      	ldrb	r3, [r2, r3]
 8005596:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d010      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	0c5b      	lsrs	r3, r3, #17
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	4a11      	ldr	r2, [pc, #68]	; (80055f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <HAL_RCC_GetSysClockFreq+0x98>)
 80055b6:	fb02 f203 	mul.w	r2, r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e004      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055c8:	fb02 f303 	mul.w	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	613b      	str	r3, [r7, #16]
      break;
 80055d2:	e002      	b.n	80055da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <HAL_RCC_GetSysClockFreq+0x98>)
 80055d6:	613b      	str	r3, [r7, #16]
      break;
 80055d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055da:	693b      	ldr	r3, [r7, #16]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40021000 	.word	0x40021000
 80055ec:	007a1200 	.word	0x007a1200
 80055f0:	0800e578 	.word	0x0800e578
 80055f4:	0800e588 	.word	0x0800e588
 80055f8:	003d0900 	.word	0x003d0900

080055fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005600:	4b02      	ldr	r3, [pc, #8]	; (800560c <HAL_RCC_GetHCLKFreq+0x10>)
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	20000000 	.word	0x20000000

08005610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005614:	f7ff fff2 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b05      	ldr	r3, [pc, #20]	; (8005630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	4903      	ldr	r1, [pc, #12]	; (8005634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800562c:	4618      	mov	r0, r3
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40021000 	.word	0x40021000
 8005634:	0800e570 	.word	0x0800e570

08005638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800563c:	f7ff ffde 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005640:	4602      	mov	r2, r0
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	0adb      	lsrs	r3, r3, #11
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4903      	ldr	r1, [pc, #12]	; (800565c <HAL_RCC_GetPCLK2Freq+0x24>)
 800564e:	5ccb      	ldrb	r3, [r1, r3]
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40021000 	.word	0x40021000
 800565c:	0800e570 	.word	0x0800e570

08005660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <RCC_Delay+0x34>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <RCC_Delay+0x38>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	0a5b      	lsrs	r3, r3, #9
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	fb02 f303 	mul.w	r3, r2, r3
 800567a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800567c:	bf00      	nop
  }
  while (Delay --);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1e5a      	subs	r2, r3, #1
 8005682:	60fa      	str	r2, [r7, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f9      	bne.n	800567c <RCC_Delay+0x1c>
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr
 8005694:	20000000 	.word	0x20000000
 8005698:	10624dd3 	.word	0x10624dd3

0800569c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e076      	b.n	800579c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d108      	bne.n	80056c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056be:	d009      	beq.n	80056d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	61da      	str	r2, [r3, #28]
 80056c6:	e005      	b.n	80056d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fe fdf8 	bl	80042e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800570a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005758:	ea42 0103 	orr.w	r1, r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	0c1a      	lsrs	r2, r3, #16
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f002 0204 	and.w	r2, r2, #4
 800577a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69da      	ldr	r2, [r3, #28]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057b4:	f7ff f8b6 	bl	8004924 <HAL_GetTick>
 80057b8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d001      	beq.n	80057ce <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80057ca:	2302      	movs	r3, #2
 80057cc:	e12a      	b.n	8005a24 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <HAL_SPI_Transmit+0x36>
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e122      	b.n	8005a24 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_SPI_Transmit+0x48>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e11b      	b.n	8005a24 <HAL_SPI_Transmit+0x280>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2203      	movs	r2, #3
 80057f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	88fa      	ldrh	r2, [r7, #6]
 800580c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800583a:	d10f      	bne.n	800585c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800585a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d007      	beq.n	800587a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005878:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005882:	d152      	bne.n	800592a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_SPI_Transmit+0xee>
 800588c:	8b7b      	ldrh	r3, [r7, #26]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d145      	bne.n	800591e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	881a      	ldrh	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	1c9a      	adds	r2, r3, #2
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058b6:	e032      	b.n	800591e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d112      	bne.n	80058ec <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	881a      	ldrh	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	1c9a      	adds	r2, r3, #2
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80058ea:	e018      	b.n	800591e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ec:	f7ff f81a 	bl	8004924 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d803      	bhi.n	8005904 <HAL_SPI_Transmit+0x160>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d102      	bne.n	800590a <HAL_SPI_Transmit+0x166>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e082      	b.n	8005a24 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1c7      	bne.n	80058b8 <HAL_SPI_Transmit+0x114>
 8005928:	e053      	b.n	80059d2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_SPI_Transmit+0x194>
 8005932:	8b7b      	ldrh	r3, [r7, #26]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d147      	bne.n	80059c8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	7812      	ldrb	r2, [r2, #0]
 8005944:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800595e:	e033      	b.n	80059c8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b02      	cmp	r3, #2
 800596c:	d113      	bne.n	8005996 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	330c      	adds	r3, #12
 8005978:	7812      	ldrb	r2, [r2, #0]
 800597a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	86da      	strh	r2, [r3, #54]	; 0x36
 8005994:	e018      	b.n	80059c8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005996:	f7fe ffc5 	bl	8004924 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d803      	bhi.n	80059ae <HAL_SPI_Transmit+0x20a>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d102      	bne.n	80059b4 <HAL_SPI_Transmit+0x210>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e02d      	b.n	8005a24 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1c6      	bne.n	8005960 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 fbc4 	bl	8006164 <SPI_EndRxTxTransaction>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005a22:	2300      	movs	r3, #0
  }
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d001      	beq.n	8005a4c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e104      	b.n	8005c56 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a54:	d112      	bne.n	8005a7c <HAL_SPI_Receive+0x50>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10e      	bne.n	8005a7c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2204      	movs	r2, #4
 8005a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f8f3 	bl	8005c5e <HAL_SPI_TransmitReceive>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	e0ec      	b.n	8005c56 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a7c:	f7fe ff52 	bl	8004924 <HAL_GetTick>
 8005a80:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_SPI_Receive+0x62>
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0e1      	b.n	8005c56 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_SPI_Receive+0x74>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e0da      	b.n	8005c56 <HAL_SPI_Receive+0x22a>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2204      	movs	r2, #4
 8005aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	88fa      	ldrh	r2, [r7, #6]
 8005ac6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aee:	d10f      	bne.n	8005b10 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005afe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d007      	beq.n	8005b2e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d170      	bne.n	8005c18 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b36:	e035      	b.n	8005ba4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d115      	bne.n	8005b72 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f103 020c 	add.w	r2, r3, #12
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	7812      	ldrb	r2, [r2, #0]
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b70:	e018      	b.n	8005ba4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b72:	f7fe fed7 	bl	8004924 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d803      	bhi.n	8005b8a <HAL_SPI_Receive+0x15e>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d102      	bne.n	8005b90 <HAL_SPI_Receive+0x164>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d109      	bne.n	8005ba4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e058      	b.n	8005c56 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1c4      	bne.n	8005b38 <HAL_SPI_Receive+0x10c>
 8005bae:	e038      	b.n	8005c22 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d113      	bne.n	8005be6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	b292      	uxth	r2, r2
 8005bca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	1c9a      	adds	r2, r3, #2
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005be4:	e018      	b.n	8005c18 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005be6:	f7fe fe9d 	bl	8004924 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d803      	bhi.n	8005bfe <HAL_SPI_Receive+0x1d2>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d102      	bne.n	8005c04 <HAL_SPI_Receive+0x1d8>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e01e      	b.n	8005c56 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1c6      	bne.n	8005bb0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fa4a 	bl	80060c0 <SPI_EndRxTransaction>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b08a      	sub	sp, #40	; 0x28
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c70:	f7fe fe58 	bl	8004924 <HAL_GetTick>
 8005c74:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c7c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005c84:	887b      	ldrh	r3, [r7, #2]
 8005c86:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c88:	7ffb      	ldrb	r3, [r7, #31]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d00c      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x4a>
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c94:	d106      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x46>
 8005c9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d001      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e17f      	b.n	8005fa8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_SPI_TransmitReceive+0x5c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_SPI_TransmitReceive+0x5c>
 8005cb4:	887b      	ldrh	r3, [r7, #2]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e174      	b.n	8005fa8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_SPI_TransmitReceive+0x6e>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e16d      	b.n	8005fa8 <HAL_SPI_TransmitReceive+0x34a>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d003      	beq.n	8005ce8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2205      	movs	r2, #5
 8005ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	887a      	ldrh	r2, [r7, #2]
 8005cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	887a      	ldrh	r2, [r7, #2]
 8005cfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	887a      	ldrh	r2, [r7, #2]
 8005d0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	887a      	ldrh	r2, [r7, #2]
 8005d10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	d007      	beq.n	8005d3c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d44:	d17e      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_SPI_TransmitReceive+0xf6>
 8005d4e:	8afb      	ldrh	r3, [r7, #22]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d16c      	bne.n	8005e2e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	881a      	ldrh	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d78:	e059      	b.n	8005e2e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d11b      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x162>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d016      	beq.n	8005dc0 <HAL_SPI_TransmitReceive+0x162>
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d113      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d119      	bne.n	8005e02 <HAL_SPI_TransmitReceive+0x1a4>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d014      	beq.n	8005e02 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	b292      	uxth	r2, r2
 8005de4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	1c9a      	adds	r2, r3, #2
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e02:	f7fe fd8f 	bl	8004924 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d80d      	bhi.n	8005e2e <HAL_SPI_TransmitReceive+0x1d0>
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d009      	beq.n	8005e2e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e0bc      	b.n	8005fa8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1a0      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x11c>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d19b      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x11c>
 8005e42:	e082      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <HAL_SPI_TransmitReceive+0x1f4>
 8005e4c:	8afb      	ldrh	r3, [r7, #22]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d171      	bne.n	8005f36 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	7812      	ldrb	r2, [r2, #0]
 8005e5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e78:	e05d      	b.n	8005f36 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d11c      	bne.n	8005ec2 <HAL_SPI_TransmitReceive+0x264>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <HAL_SPI_TransmitReceive+0x264>
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d114      	bne.n	8005ec2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	7812      	ldrb	r2, [r2, #0]
 8005ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d119      	bne.n	8005f04 <HAL_SPI_TransmitReceive+0x2a6>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d014      	beq.n	8005f04 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f00:	2301      	movs	r3, #1
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f04:	f7fe fd0e 	bl	8004924 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d803      	bhi.n	8005f1c <HAL_SPI_TransmitReceive+0x2be>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1a:	d102      	bne.n	8005f22 <HAL_SPI_TransmitReceive+0x2c4>
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e038      	b.n	8005fa8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d19c      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x21c>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d197      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f4a:	6a3a      	ldr	r2, [r7, #32]
 8005f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 f908 	bl	8006164 <SPI_EndRxTxTransaction>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d008      	beq.n	8005f6c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e01d      	b.n	8005fa8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
  }
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3728      	adds	r7, #40	; 0x28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fc0:	f7fe fcb0 	bl	8004924 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	1a9b      	subs	r3, r3, r2
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	4413      	add	r3, r2
 8005fce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fd0:	f7fe fca8 	bl	8004924 <HAL_GetTick>
 8005fd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fd6:	4b39      	ldr	r3, [pc, #228]	; (80060bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	015b      	lsls	r3, r3, #5
 8005fdc:	0d1b      	lsrs	r3, r3, #20
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fe6:	e054      	b.n	8006092 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d050      	beq.n	8006092 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ff0:	f7fe fc98 	bl	8004924 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d902      	bls.n	8006006 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d13d      	bne.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006014:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601e:	d111      	bne.n	8006044 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006028:	d004      	beq.n	8006034 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006032:	d107      	bne.n	8006044 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006042:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604c:	d10f      	bne.n	800606e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800606c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e017      	b.n	80060b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3b01      	subs	r3, #1
 8006090:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4013      	ands	r3, r2
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	429a      	cmp	r2, r3
 80060a0:	bf0c      	ite	eq
 80060a2:	2301      	moveq	r3, #1
 80060a4:	2300      	movne	r3, #0
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d19b      	bne.n	8005fe8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000000 	.word	0x20000000

080060c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d4:	d111      	bne.n	80060fa <SPI_EndRxTransaction+0x3a>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060de:	d004      	beq.n	80060ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e8:	d107      	bne.n	80060fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006102:	d117      	bne.n	8006134 <SPI_EndRxTransaction+0x74>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610c:	d112      	bne.n	8006134 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2200      	movs	r2, #0
 8006116:	2101      	movs	r1, #1
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff ff49 	bl	8005fb0 <SPI_WaitFlagStateUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01a      	beq.n	800615a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006128:	f043 0220 	orr.w	r2, r3, #32
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e013      	b.n	800615c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	2180      	movs	r1, #128	; 0x80
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff ff36 	bl	8005fb0 <SPI_WaitFlagStateUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	f043 0220 	orr.w	r2, r3, #32
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e000      	b.n	800615c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2201      	movs	r2, #1
 8006178:	2102      	movs	r1, #2
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f7ff ff18 	bl	8005fb0 <SPI_WaitFlagStateUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618a:	f043 0220 	orr.w	r2, r3, #32
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e013      	b.n	80061be <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	2180      	movs	r1, #128	; 0x80
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff ff05 	bl	8005fb0 <SPI_WaitFlagStateUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e000      	b.n	80061be <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e041      	b.n	800625c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fe f8ff 	bl	80043f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3304      	adds	r3, #4
 8006202:	4619      	mov	r1, r3
 8006204:	4610      	mov	r0, r2
 8006206:	f000 f8ef 	bl	80063e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800627e:	2302      	movs	r3, #2
 8006280:	e0ae      	b.n	80063e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b0c      	cmp	r3, #12
 800628e:	f200 809f 	bhi.w	80063d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062cd 	.word	0x080062cd
 800629c:	080063d1 	.word	0x080063d1
 80062a0:	080063d1 	.word	0x080063d1
 80062a4:	080063d1 	.word	0x080063d1
 80062a8:	0800630d 	.word	0x0800630d
 80062ac:	080063d1 	.word	0x080063d1
 80062b0:	080063d1 	.word	0x080063d1
 80062b4:	080063d1 	.word	0x080063d1
 80062b8:	0800634f 	.word	0x0800634f
 80062bc:	080063d1 	.word	0x080063d1
 80062c0:	080063d1 	.word	0x080063d1
 80062c4:	080063d1 	.word	0x080063d1
 80062c8:	0800638f 	.word	0x0800638f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f8f6 	bl	80064c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0208 	orr.w	r2, r2, #8
 80062e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0204 	bic.w	r2, r2, #4
 80062f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6999      	ldr	r1, [r3, #24]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	619a      	str	r2, [r3, #24]
      break;
 800630a:	e064      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 f93c 	bl	8006590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6999      	ldr	r1, [r3, #24]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	021a      	lsls	r2, r3, #8
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	619a      	str	r2, [r3, #24]
      break;
 800634c:	e043      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 f985 	bl	8006664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0208 	orr.w	r2, r2, #8
 8006368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0204 	bic.w	r2, r2, #4
 8006378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69d9      	ldr	r1, [r3, #28]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	61da      	str	r2, [r3, #28]
      break;
 800638c:	e023      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 f9cf 	bl	8006738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69d9      	ldr	r1, [r3, #28]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	021a      	lsls	r2, r3, #8
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	61da      	str	r2, [r3, #28]
      break;
 80063ce:	e002      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
      break;
 80063d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a2f      	ldr	r2, [pc, #188]	; (80064b8 <TIM_Base_SetConfig+0xd0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00b      	beq.n	8006418 <TIM_Base_SetConfig+0x30>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006406:	d007      	beq.n	8006418 <TIM_Base_SetConfig+0x30>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a2c      	ldr	r2, [pc, #176]	; (80064bc <TIM_Base_SetConfig+0xd4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_Base_SetConfig+0x30>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a2b      	ldr	r2, [pc, #172]	; (80064c0 <TIM_Base_SetConfig+0xd8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d108      	bne.n	800642a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a22      	ldr	r2, [pc, #136]	; (80064b8 <TIM_Base_SetConfig+0xd0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00b      	beq.n	800644a <TIM_Base_SetConfig+0x62>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006438:	d007      	beq.n	800644a <TIM_Base_SetConfig+0x62>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a1f      	ldr	r2, [pc, #124]	; (80064bc <TIM_Base_SetConfig+0xd4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d003      	beq.n	800644a <TIM_Base_SetConfig+0x62>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1e      	ldr	r2, [pc, #120]	; (80064c0 <TIM_Base_SetConfig+0xd8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d108      	bne.n	800645c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a0d      	ldr	r2, [pc, #52]	; (80064b8 <TIM_Base_SetConfig+0xd0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d103      	bne.n	8006490 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f023 0201 	bic.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	611a      	str	r2, [r3, #16]
  }
}
 80064ae:	bf00      	nop
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800

080064c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f023 0201 	bic.w	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f023 0302 	bic.w	r3, r3, #2
 800650c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a1c      	ldr	r2, [pc, #112]	; (800658c <TIM_OC1_SetConfig+0xc8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d10c      	bne.n	800653a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0308 	bic.w	r3, r3, #8
 8006526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f023 0304 	bic.w	r3, r3, #4
 8006538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a13      	ldr	r2, [pc, #76]	; (800658c <TIM_OC1_SetConfig+0xc8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d111      	bne.n	8006566 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	621a      	str	r2, [r3, #32]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40012c00 	.word	0x40012c00

08006590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f023 0210 	bic.w	r2, r3, #16
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f023 0320 	bic.w	r3, r3, #32
 80065da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <TIM_OC2_SetConfig+0xd0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10d      	bne.n	800660c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800660a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a14      	ldr	r2, [pc, #80]	; (8006660 <TIM_OC2_SetConfig+0xd0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d113      	bne.n	800663c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800661a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	621a      	str	r2, [r3, #32]
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr
 8006660:	40012c00 	.word	0x40012c00

08006664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0303 	bic.w	r3, r3, #3
 800669a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1d      	ldr	r2, [pc, #116]	; (8006734 <TIM_OC3_SetConfig+0xd0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d10d      	bne.n	80066de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a14      	ldr	r2, [pc, #80]	; (8006734 <TIM_OC3_SetConfig+0xd0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d113      	bne.n	800670e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	621a      	str	r2, [r3, #32]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	40012c00 	.word	0x40012c00

08006738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	031b      	lsls	r3, r3, #12
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a0f      	ldr	r2, [pc, #60]	; (80067d0 <TIM_OC4_SetConfig+0x98>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d109      	bne.n	80067ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800679e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	019b      	lsls	r3, r3, #6
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr
 80067d0:	40012c00 	.word	0x40012c00

080067d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e046      	b.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a16      	ldr	r2, [pc, #88]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00e      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006838:	d009      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a12      	ldr	r2, [pc, #72]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d004      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a10      	ldr	r2, [pc, #64]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d10c      	bne.n	8006868 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	4313      	orrs	r3, r2
 800685e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr
 8006884:	40012c00 	.word	0x40012c00
 8006888:	40000400 	.word	0x40000400
 800688c:	40000800 	.word	0x40000800

08006890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e042      	b.n	8006928 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fd fe34 	bl	8004524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2224      	movs	r2, #36	; 0x24
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f971 	bl	8006bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695a      	ldr	r2, [r3, #20]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08a      	sub	sp, #40	; 0x28
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	4613      	mov	r3, r2
 800693e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b20      	cmp	r3, #32
 800694e:	d175      	bne.n	8006a3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <HAL_UART_Transmit+0x2c>
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e06e      	b.n	8006a3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2221      	movs	r2, #33	; 0x21
 800696a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800696e:	f7fd ffd9 	bl	8004924 <HAL_GetTick>
 8006972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	88fa      	ldrh	r2, [r7, #6]
 8006978:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	88fa      	ldrh	r2, [r7, #6]
 800697e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006988:	d108      	bne.n	800699c <HAL_UART_Transmit+0x6c>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	e003      	b.n	80069a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069a4:	e02e      	b.n	8006a04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2200      	movs	r2, #0
 80069ae:	2180      	movs	r1, #128	; 0x80
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f848 	bl	8006a46 <UART_WaitOnFlagUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e03a      	b.n	8006a3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10b      	bne.n	80069e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	3302      	adds	r3, #2
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	e007      	b.n	80069f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	781a      	ldrb	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	3301      	adds	r3, #1
 80069f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1cb      	bne.n	80069a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2200      	movs	r2, #0
 8006a16:	2140      	movs	r1, #64	; 0x40
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f814 	bl	8006a46 <UART_WaitOnFlagUntilTimeout>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d005      	beq.n	8006a30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e006      	b.n	8006a3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e000      	b.n	8006a3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a3c:	2302      	movs	r3, #2
  }
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3720      	adds	r7, #32
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b086      	sub	sp, #24
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	4613      	mov	r3, r2
 8006a54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a56:	e03b      	b.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5e:	d037      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a60:	f7fd ff60 	bl	8004924 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	6a3a      	ldr	r2, [r7, #32]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d302      	bcc.n	8006a76 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e03a      	b.n	8006af0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d023      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b80      	cmp	r3, #128	; 0x80
 8006a8c:	d020      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	d01d      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d116      	bne.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f81d 	bl	8006af8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e00f      	b.n	8006af0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d0b4      	beq.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b095      	sub	sp, #84	; 0x54
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	330c      	adds	r3, #12
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b20:	643a      	str	r2, [r7, #64]	; 0x40
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e5      	bne.n	8006b00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3314      	adds	r3, #20
 8006b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3314      	adds	r3, #20
 8006b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e5      	bne.n	8006b34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d119      	bne.n	8006ba4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f023 0310 	bic.w	r3, r3, #16
 8006b86:	647b      	str	r3, [r7, #68]	; 0x44
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	330c      	adds	r3, #12
 8006b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b90:	61ba      	str	r2, [r7, #24]
 8006b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	6979      	ldr	r1, [r7, #20]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e5      	bne.n	8006b70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bb2:	bf00      	nop
 8006bb4:	3754      	adds	r7, #84	; 0x54
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr

08006bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006bf6:	f023 030c 	bic.w	r3, r3, #12
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	430b      	orrs	r3, r1
 8006c02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	; (8006cd0 <UART_SetConfig+0x114>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d103      	bne.n	8006c2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c24:	f7fe fd08 	bl	8005638 <HAL_RCC_GetPCLK2Freq>
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	e002      	b.n	8006c32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c2c:	f7fe fcf0 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 8006c30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009a      	lsls	r2, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c48:	4a22      	ldr	r2, [pc, #136]	; (8006cd4 <UART_SetConfig+0x118>)
 8006c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	0119      	lsls	r1, r3, #4
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009a      	lsls	r2, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c68:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <UART_SetConfig+0x118>)
 8006c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	2064      	movs	r0, #100	; 0x64
 8006c72:	fb00 f303 	mul.w	r3, r0, r3
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	3332      	adds	r3, #50	; 0x32
 8006c7c:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <UART_SetConfig+0x118>)
 8006c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c88:	4419      	add	r1, r3
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009a      	lsls	r2, r3, #2
 8006c94:	441a      	add	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <UART_SetConfig+0x118>)
 8006ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	2064      	movs	r0, #100	; 0x64
 8006caa:	fb00 f303 	mul.w	r3, r0, r3
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	3332      	adds	r3, #50	; 0x32
 8006cb4:	4a07      	ldr	r2, [pc, #28]	; (8006cd4 <UART_SetConfig+0x118>)
 8006cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cba:	095b      	lsrs	r3, r3, #5
 8006cbc:	f003 020f 	and.w	r2, r3, #15
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40013800 	.word	0x40013800
 8006cd4:	51eb851f 	.word	0x51eb851f

08006cd8 <__errno>:
 8006cd8:	4b01      	ldr	r3, [pc, #4]	; (8006ce0 <__errno+0x8>)
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	2000000c 	.word	0x2000000c

08006ce4 <__libc_init_array>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	2600      	movs	r6, #0
 8006ce8:	4d0c      	ldr	r5, [pc, #48]	; (8006d1c <__libc_init_array+0x38>)
 8006cea:	4c0d      	ldr	r4, [pc, #52]	; (8006d20 <__libc_init_array+0x3c>)
 8006cec:	1b64      	subs	r4, r4, r5
 8006cee:	10a4      	asrs	r4, r4, #2
 8006cf0:	42a6      	cmp	r6, r4
 8006cf2:	d109      	bne.n	8006d08 <__libc_init_array+0x24>
 8006cf4:	f007 fa20 	bl	800e138 <_init>
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	4d0a      	ldr	r5, [pc, #40]	; (8006d24 <__libc_init_array+0x40>)
 8006cfc:	4c0a      	ldr	r4, [pc, #40]	; (8006d28 <__libc_init_array+0x44>)
 8006cfe:	1b64      	subs	r4, r4, r5
 8006d00:	10a4      	asrs	r4, r4, #2
 8006d02:	42a6      	cmp	r6, r4
 8006d04:	d105      	bne.n	8006d12 <__libc_init_array+0x2e>
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0c:	4798      	blx	r3
 8006d0e:	3601      	adds	r6, #1
 8006d10:	e7ee      	b.n	8006cf0 <__libc_init_array+0xc>
 8006d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d16:	4798      	blx	r3
 8006d18:	3601      	adds	r6, #1
 8006d1a:	e7f2      	b.n	8006d02 <__libc_init_array+0x1e>
 8006d1c:	0800f080 	.word	0x0800f080
 8006d20:	0800f080 	.word	0x0800f080
 8006d24:	0800f080 	.word	0x0800f080
 8006d28:	0800f084 	.word	0x0800f084

08006d2c <memset>:
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4402      	add	r2, r0
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d100      	bne.n	8006d36 <memset+0xa>
 8006d34:	4770      	bx	lr
 8006d36:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3a:	e7f9      	b.n	8006d30 <memset+0x4>

08006d3c <__cvt>:
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d42:	461f      	mov	r7, r3
 8006d44:	bfbb      	ittet	lt
 8006d46:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d4a:	461f      	movlt	r7, r3
 8006d4c:	2300      	movge	r3, #0
 8006d4e:	232d      	movlt	r3, #45	; 0x2d
 8006d50:	b088      	sub	sp, #32
 8006d52:	4614      	mov	r4, r2
 8006d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d56:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d58:	7013      	strb	r3, [r2, #0]
 8006d5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d5c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d60:	f023 0820 	bic.w	r8, r3, #32
 8006d64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d68:	d005      	beq.n	8006d76 <__cvt+0x3a>
 8006d6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d6e:	d100      	bne.n	8006d72 <__cvt+0x36>
 8006d70:	3501      	adds	r5, #1
 8006d72:	2302      	movs	r3, #2
 8006d74:	e000      	b.n	8006d78 <__cvt+0x3c>
 8006d76:	2303      	movs	r3, #3
 8006d78:	aa07      	add	r2, sp, #28
 8006d7a:	9204      	str	r2, [sp, #16]
 8006d7c:	aa06      	add	r2, sp, #24
 8006d7e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006d82:	e9cd 3500 	strd	r3, r5, [sp]
 8006d86:	4622      	mov	r2, r4
 8006d88:	463b      	mov	r3, r7
 8006d8a:	f001 fddd 	bl	8008948 <_dtoa_r>
 8006d8e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d92:	4606      	mov	r6, r0
 8006d94:	d102      	bne.n	8006d9c <__cvt+0x60>
 8006d96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d98:	07db      	lsls	r3, r3, #31
 8006d9a:	d522      	bpl.n	8006de2 <__cvt+0xa6>
 8006d9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006da0:	eb06 0905 	add.w	r9, r6, r5
 8006da4:	d110      	bne.n	8006dc8 <__cvt+0x8c>
 8006da6:	7833      	ldrb	r3, [r6, #0]
 8006da8:	2b30      	cmp	r3, #48	; 0x30
 8006daa:	d10a      	bne.n	8006dc2 <__cvt+0x86>
 8006dac:	2200      	movs	r2, #0
 8006dae:	2300      	movs	r3, #0
 8006db0:	4620      	mov	r0, r4
 8006db2:	4639      	mov	r1, r7
 8006db4:	f7f9 fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8006db8:	b918      	cbnz	r0, 8006dc2 <__cvt+0x86>
 8006dba:	f1c5 0501 	rsb	r5, r5, #1
 8006dbe:	f8ca 5000 	str.w	r5, [sl]
 8006dc2:	f8da 3000 	ldr.w	r3, [sl]
 8006dc6:	4499      	add	r9, r3
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2300      	movs	r3, #0
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4639      	mov	r1, r7
 8006dd0:	f7f9 fdea 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd4:	b108      	cbz	r0, 8006dda <__cvt+0x9e>
 8006dd6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006dda:	2230      	movs	r2, #48	; 0x30
 8006ddc:	9b07      	ldr	r3, [sp, #28]
 8006dde:	454b      	cmp	r3, r9
 8006de0:	d307      	bcc.n	8006df2 <__cvt+0xb6>
 8006de2:	4630      	mov	r0, r6
 8006de4:	9b07      	ldr	r3, [sp, #28]
 8006de6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006de8:	1b9b      	subs	r3, r3, r6
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	b008      	add	sp, #32
 8006dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df2:	1c59      	adds	r1, r3, #1
 8006df4:	9107      	str	r1, [sp, #28]
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	e7f0      	b.n	8006ddc <__cvt+0xa0>

08006dfa <__exponent>:
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	f803 2b02 	strb.w	r2, [r3], #2
 8006e04:	bfb6      	itet	lt
 8006e06:	222d      	movlt	r2, #45	; 0x2d
 8006e08:	222b      	movge	r2, #43	; 0x2b
 8006e0a:	4249      	neglt	r1, r1
 8006e0c:	2909      	cmp	r1, #9
 8006e0e:	7042      	strb	r2, [r0, #1]
 8006e10:	dd2b      	ble.n	8006e6a <__exponent+0x70>
 8006e12:	f10d 0407 	add.w	r4, sp, #7
 8006e16:	46a4      	mov	ip, r4
 8006e18:	270a      	movs	r7, #10
 8006e1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e1e:	460a      	mov	r2, r1
 8006e20:	46a6      	mov	lr, r4
 8006e22:	fb07 1516 	mls	r5, r7, r6, r1
 8006e26:	2a63      	cmp	r2, #99	; 0x63
 8006e28:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e36:	dcf0      	bgt.n	8006e1a <__exponent+0x20>
 8006e38:	3130      	adds	r1, #48	; 0x30
 8006e3a:	f1ae 0502 	sub.w	r5, lr, #2
 8006e3e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e42:	4629      	mov	r1, r5
 8006e44:	1c44      	adds	r4, r0, #1
 8006e46:	4561      	cmp	r1, ip
 8006e48:	d30a      	bcc.n	8006e60 <__exponent+0x66>
 8006e4a:	f10d 0209 	add.w	r2, sp, #9
 8006e4e:	eba2 020e 	sub.w	r2, r2, lr
 8006e52:	4565      	cmp	r5, ip
 8006e54:	bf88      	it	hi
 8006e56:	2200      	movhi	r2, #0
 8006e58:	4413      	add	r3, r2
 8006e5a:	1a18      	subs	r0, r3, r0
 8006e5c:	b003      	add	sp, #12
 8006e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e64:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e68:	e7ed      	b.n	8006e46 <__exponent+0x4c>
 8006e6a:	2330      	movs	r3, #48	; 0x30
 8006e6c:	3130      	adds	r1, #48	; 0x30
 8006e6e:	7083      	strb	r3, [r0, #2]
 8006e70:	70c1      	strb	r1, [r0, #3]
 8006e72:	1d03      	adds	r3, r0, #4
 8006e74:	e7f1      	b.n	8006e5a <__exponent+0x60>
	...

08006e78 <_printf_float>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	b091      	sub	sp, #68	; 0x44
 8006e7e:	460c      	mov	r4, r1
 8006e80:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e84:	4616      	mov	r6, r2
 8006e86:	461f      	mov	r7, r3
 8006e88:	4605      	mov	r5, r0
 8006e8a:	f002 feb1 	bl	8009bf0 <_localeconv_r>
 8006e8e:	6803      	ldr	r3, [r0, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	9309      	str	r3, [sp, #36]	; 0x24
 8006e94:	f7f9 f95c 	bl	8000150 <strlen>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	930e      	str	r3, [sp, #56]	; 0x38
 8006e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea0:	900a      	str	r0, [sp, #40]	; 0x28
 8006ea2:	3307      	adds	r3, #7
 8006ea4:	f023 0307 	bic.w	r3, r3, #7
 8006ea8:	f103 0208 	add.w	r2, r3, #8
 8006eac:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006eb0:	f8d4 b000 	ldr.w	fp, [r4]
 8006eb4:	f8c8 2000 	str.w	r2, [r8]
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ec0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006ec4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4b9c      	ldr	r3, [pc, #624]	; (8007144 <_printf_float+0x2cc>)
 8006ed2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ed4:	f7f9 fd9a 	bl	8000a0c <__aeabi_dcmpun>
 8006ed8:	bb70      	cbnz	r0, 8006f38 <_printf_float+0xc0>
 8006eda:	f04f 32ff 	mov.w	r2, #4294967295
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4b98      	ldr	r3, [pc, #608]	; (8007144 <_printf_float+0x2cc>)
 8006ee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ee4:	f7f9 fd74 	bl	80009d0 <__aeabi_dcmple>
 8006ee8:	bb30      	cbnz	r0, 8006f38 <_printf_float+0xc0>
 8006eea:	2200      	movs	r2, #0
 8006eec:	2300      	movs	r3, #0
 8006eee:	4640      	mov	r0, r8
 8006ef0:	4651      	mov	r1, sl
 8006ef2:	f7f9 fd63 	bl	80009bc <__aeabi_dcmplt>
 8006ef6:	b110      	cbz	r0, 8006efe <_printf_float+0x86>
 8006ef8:	232d      	movs	r3, #45	; 0x2d
 8006efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006efe:	4b92      	ldr	r3, [pc, #584]	; (8007148 <_printf_float+0x2d0>)
 8006f00:	4892      	ldr	r0, [pc, #584]	; (800714c <_printf_float+0x2d4>)
 8006f02:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f06:	bf94      	ite	ls
 8006f08:	4698      	movls	r8, r3
 8006f0a:	4680      	movhi	r8, r0
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	f04f 0a00 	mov.w	sl, #0
 8006f12:	6123      	str	r3, [r4, #16]
 8006f14:	f02b 0304 	bic.w	r3, fp, #4
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	4633      	mov	r3, r6
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	4628      	mov	r0, r5
 8006f20:	9700      	str	r7, [sp, #0]
 8006f22:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f24:	f000 f9d4 	bl	80072d0 <_printf_common>
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f040 8090 	bne.w	800704e <_printf_float+0x1d6>
 8006f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f32:	b011      	add	sp, #68	; 0x44
 8006f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	4642      	mov	r2, r8
 8006f3a:	4653      	mov	r3, sl
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	4651      	mov	r1, sl
 8006f40:	f7f9 fd64 	bl	8000a0c <__aeabi_dcmpun>
 8006f44:	b148      	cbz	r0, 8006f5a <_printf_float+0xe2>
 8006f46:	f1ba 0f00 	cmp.w	sl, #0
 8006f4a:	bfb8      	it	lt
 8006f4c:	232d      	movlt	r3, #45	; 0x2d
 8006f4e:	4880      	ldr	r0, [pc, #512]	; (8007150 <_printf_float+0x2d8>)
 8006f50:	bfb8      	it	lt
 8006f52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f56:	4b7f      	ldr	r3, [pc, #508]	; (8007154 <_printf_float+0x2dc>)
 8006f58:	e7d3      	b.n	8006f02 <_printf_float+0x8a>
 8006f5a:	6863      	ldr	r3, [r4, #4]
 8006f5c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f60:	1c5a      	adds	r2, r3, #1
 8006f62:	d142      	bne.n	8006fea <_printf_float+0x172>
 8006f64:	2306      	movs	r3, #6
 8006f66:	6063      	str	r3, [r4, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	9206      	str	r2, [sp, #24]
 8006f6c:	aa0e      	add	r2, sp, #56	; 0x38
 8006f6e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f72:	aa0d      	add	r2, sp, #52	; 0x34
 8006f74:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f78:	9203      	str	r2, [sp, #12]
 8006f7a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006f7e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f82:	6023      	str	r3, [r4, #0]
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	4642      	mov	r2, r8
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	4653      	mov	r3, sl
 8006f8e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f90:	f7ff fed4 	bl	8006d3c <__cvt>
 8006f94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f96:	4680      	mov	r8, r0
 8006f98:	2947      	cmp	r1, #71	; 0x47
 8006f9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f9c:	d108      	bne.n	8006fb0 <_printf_float+0x138>
 8006f9e:	1cc8      	adds	r0, r1, #3
 8006fa0:	db02      	blt.n	8006fa8 <_printf_float+0x130>
 8006fa2:	6863      	ldr	r3, [r4, #4]
 8006fa4:	4299      	cmp	r1, r3
 8006fa6:	dd40      	ble.n	800702a <_printf_float+0x1b2>
 8006fa8:	f1a9 0902 	sub.w	r9, r9, #2
 8006fac:	fa5f f989 	uxtb.w	r9, r9
 8006fb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fb4:	d81f      	bhi.n	8006ff6 <_printf_float+0x17e>
 8006fb6:	464a      	mov	r2, r9
 8006fb8:	3901      	subs	r1, #1
 8006fba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fbe:	910d      	str	r1, [sp, #52]	; 0x34
 8006fc0:	f7ff ff1b 	bl	8006dfa <__exponent>
 8006fc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fc6:	4682      	mov	sl, r0
 8006fc8:	1813      	adds	r3, r2, r0
 8006fca:	2a01      	cmp	r2, #1
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	dc02      	bgt.n	8006fd6 <_printf_float+0x15e>
 8006fd0:	6822      	ldr	r2, [r4, #0]
 8006fd2:	07d2      	lsls	r2, r2, #31
 8006fd4:	d501      	bpl.n	8006fda <_printf_float+0x162>
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	6123      	str	r3, [r4, #16]
 8006fda:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d09b      	beq.n	8006f1a <_printf_float+0xa2>
 8006fe2:	232d      	movs	r3, #45	; 0x2d
 8006fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe8:	e797      	b.n	8006f1a <_printf_float+0xa2>
 8006fea:	2947      	cmp	r1, #71	; 0x47
 8006fec:	d1bc      	bne.n	8006f68 <_printf_float+0xf0>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1ba      	bne.n	8006f68 <_printf_float+0xf0>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e7b7      	b.n	8006f66 <_printf_float+0xee>
 8006ff6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006ffa:	d118      	bne.n	800702e <_printf_float+0x1b6>
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	dd0b      	ble.n	800701a <_printf_float+0x1a2>
 8007002:	6121      	str	r1, [r4, #16]
 8007004:	b913      	cbnz	r3, 800700c <_printf_float+0x194>
 8007006:	6822      	ldr	r2, [r4, #0]
 8007008:	07d0      	lsls	r0, r2, #31
 800700a:	d502      	bpl.n	8007012 <_printf_float+0x19a>
 800700c:	3301      	adds	r3, #1
 800700e:	440b      	add	r3, r1
 8007010:	6123      	str	r3, [r4, #16]
 8007012:	f04f 0a00 	mov.w	sl, #0
 8007016:	65a1      	str	r1, [r4, #88]	; 0x58
 8007018:	e7df      	b.n	8006fda <_printf_float+0x162>
 800701a:	b913      	cbnz	r3, 8007022 <_printf_float+0x1aa>
 800701c:	6822      	ldr	r2, [r4, #0]
 800701e:	07d2      	lsls	r2, r2, #31
 8007020:	d501      	bpl.n	8007026 <_printf_float+0x1ae>
 8007022:	3302      	adds	r3, #2
 8007024:	e7f4      	b.n	8007010 <_printf_float+0x198>
 8007026:	2301      	movs	r3, #1
 8007028:	e7f2      	b.n	8007010 <_printf_float+0x198>
 800702a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800702e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007030:	4299      	cmp	r1, r3
 8007032:	db05      	blt.n	8007040 <_printf_float+0x1c8>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	6121      	str	r1, [r4, #16]
 8007038:	07d8      	lsls	r0, r3, #31
 800703a:	d5ea      	bpl.n	8007012 <_printf_float+0x19a>
 800703c:	1c4b      	adds	r3, r1, #1
 800703e:	e7e7      	b.n	8007010 <_printf_float+0x198>
 8007040:	2900      	cmp	r1, #0
 8007042:	bfcc      	ite	gt
 8007044:	2201      	movgt	r2, #1
 8007046:	f1c1 0202 	rsble	r2, r1, #2
 800704a:	4413      	add	r3, r2
 800704c:	e7e0      	b.n	8007010 <_printf_float+0x198>
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	055a      	lsls	r2, r3, #21
 8007052:	d407      	bmi.n	8007064 <_printf_float+0x1ec>
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	4642      	mov	r2, r8
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	47b8      	blx	r7
 800705e:	3001      	adds	r0, #1
 8007060:	d12b      	bne.n	80070ba <_printf_float+0x242>
 8007062:	e764      	b.n	8006f2e <_printf_float+0xb6>
 8007064:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007068:	f240 80dd 	bls.w	8007226 <_printf_float+0x3ae>
 800706c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007070:	2200      	movs	r2, #0
 8007072:	2300      	movs	r3, #0
 8007074:	f7f9 fc98 	bl	80009a8 <__aeabi_dcmpeq>
 8007078:	2800      	cmp	r0, #0
 800707a:	d033      	beq.n	80070e4 <_printf_float+0x26c>
 800707c:	2301      	movs	r3, #1
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	4a35      	ldr	r2, [pc, #212]	; (8007158 <_printf_float+0x2e0>)
 8007084:	47b8      	blx	r7
 8007086:	3001      	adds	r0, #1
 8007088:	f43f af51 	beq.w	8006f2e <_printf_float+0xb6>
 800708c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007090:	429a      	cmp	r2, r3
 8007092:	db02      	blt.n	800709a <_printf_float+0x222>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	07d8      	lsls	r0, r3, #31
 8007098:	d50f      	bpl.n	80070ba <_printf_float+0x242>
 800709a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b8      	blx	r7
 80070a4:	3001      	adds	r0, #1
 80070a6:	f43f af42 	beq.w	8006f2e <_printf_float+0xb6>
 80070aa:	f04f 0800 	mov.w	r8, #0
 80070ae:	f104 091a 	add.w	r9, r4, #26
 80070b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b4:	3b01      	subs	r3, #1
 80070b6:	4543      	cmp	r3, r8
 80070b8:	dc09      	bgt.n	80070ce <_printf_float+0x256>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	079b      	lsls	r3, r3, #30
 80070be:	f100 8102 	bmi.w	80072c6 <_printf_float+0x44e>
 80070c2:	68e0      	ldr	r0, [r4, #12]
 80070c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070c6:	4298      	cmp	r0, r3
 80070c8:	bfb8      	it	lt
 80070ca:	4618      	movlt	r0, r3
 80070cc:	e731      	b.n	8006f32 <_printf_float+0xba>
 80070ce:	2301      	movs	r3, #1
 80070d0:	464a      	mov	r2, r9
 80070d2:	4631      	mov	r1, r6
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	f43f af28 	beq.w	8006f2e <_printf_float+0xb6>
 80070de:	f108 0801 	add.w	r8, r8, #1
 80070e2:	e7e6      	b.n	80070b2 <_printf_float+0x23a>
 80070e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	dc38      	bgt.n	800715c <_printf_float+0x2e4>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	4a19      	ldr	r2, [pc, #100]	; (8007158 <_printf_float+0x2e0>)
 80070f2:	47b8      	blx	r7
 80070f4:	3001      	adds	r0, #1
 80070f6:	f43f af1a 	beq.w	8006f2e <_printf_float+0xb6>
 80070fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070fe:	4313      	orrs	r3, r2
 8007100:	d102      	bne.n	8007108 <_printf_float+0x290>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	07d9      	lsls	r1, r3, #31
 8007106:	d5d8      	bpl.n	80070ba <_printf_float+0x242>
 8007108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800710c:	4631      	mov	r1, r6
 800710e:	4628      	mov	r0, r5
 8007110:	47b8      	blx	r7
 8007112:	3001      	adds	r0, #1
 8007114:	f43f af0b 	beq.w	8006f2e <_printf_float+0xb6>
 8007118:	f04f 0900 	mov.w	r9, #0
 800711c:	f104 0a1a 	add.w	sl, r4, #26
 8007120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007122:	425b      	negs	r3, r3
 8007124:	454b      	cmp	r3, r9
 8007126:	dc01      	bgt.n	800712c <_printf_float+0x2b4>
 8007128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800712a:	e794      	b.n	8007056 <_printf_float+0x1de>
 800712c:	2301      	movs	r3, #1
 800712e:	4652      	mov	r2, sl
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f aef9 	beq.w	8006f2e <_printf_float+0xb6>
 800713c:	f109 0901 	add.w	r9, r9, #1
 8007140:	e7ee      	b.n	8007120 <_printf_float+0x2a8>
 8007142:	bf00      	nop
 8007144:	7fefffff 	.word	0x7fefffff
 8007148:	0800e590 	.word	0x0800e590
 800714c:	0800e594 	.word	0x0800e594
 8007150:	0800e59c 	.word	0x0800e59c
 8007154:	0800e598 	.word	0x0800e598
 8007158:	0800e5a0 	.word	0x0800e5a0
 800715c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800715e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007160:	429a      	cmp	r2, r3
 8007162:	bfa8      	it	ge
 8007164:	461a      	movge	r2, r3
 8007166:	2a00      	cmp	r2, #0
 8007168:	4691      	mov	r9, r2
 800716a:	dc37      	bgt.n	80071dc <_printf_float+0x364>
 800716c:	f04f 0b00 	mov.w	fp, #0
 8007170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007174:	f104 021a 	add.w	r2, r4, #26
 8007178:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800717c:	ebaa 0309 	sub.w	r3, sl, r9
 8007180:	455b      	cmp	r3, fp
 8007182:	dc33      	bgt.n	80071ec <_printf_float+0x374>
 8007184:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007188:	429a      	cmp	r2, r3
 800718a:	db3b      	blt.n	8007204 <_printf_float+0x38c>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	07da      	lsls	r2, r3, #31
 8007190:	d438      	bmi.n	8007204 <_printf_float+0x38c>
 8007192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007194:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007196:	eba2 030a 	sub.w	r3, r2, sl
 800719a:	eba2 0901 	sub.w	r9, r2, r1
 800719e:	4599      	cmp	r9, r3
 80071a0:	bfa8      	it	ge
 80071a2:	4699      	movge	r9, r3
 80071a4:	f1b9 0f00 	cmp.w	r9, #0
 80071a8:	dc34      	bgt.n	8007214 <_printf_float+0x39c>
 80071aa:	f04f 0800 	mov.w	r8, #0
 80071ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071b2:	f104 0a1a 	add.w	sl, r4, #26
 80071b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	eba3 0309 	sub.w	r3, r3, r9
 80071c0:	4543      	cmp	r3, r8
 80071c2:	f77f af7a 	ble.w	80070ba <_printf_float+0x242>
 80071c6:	2301      	movs	r3, #1
 80071c8:	4652      	mov	r2, sl
 80071ca:	4631      	mov	r1, r6
 80071cc:	4628      	mov	r0, r5
 80071ce:	47b8      	blx	r7
 80071d0:	3001      	adds	r0, #1
 80071d2:	f43f aeac 	beq.w	8006f2e <_printf_float+0xb6>
 80071d6:	f108 0801 	add.w	r8, r8, #1
 80071da:	e7ec      	b.n	80071b6 <_printf_float+0x33e>
 80071dc:	4613      	mov	r3, r2
 80071de:	4631      	mov	r1, r6
 80071e0:	4642      	mov	r2, r8
 80071e2:	4628      	mov	r0, r5
 80071e4:	47b8      	blx	r7
 80071e6:	3001      	adds	r0, #1
 80071e8:	d1c0      	bne.n	800716c <_printf_float+0x2f4>
 80071ea:	e6a0      	b.n	8006f2e <_printf_float+0xb6>
 80071ec:	2301      	movs	r3, #1
 80071ee:	4631      	mov	r1, r6
 80071f0:	4628      	mov	r0, r5
 80071f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80071f4:	47b8      	blx	r7
 80071f6:	3001      	adds	r0, #1
 80071f8:	f43f ae99 	beq.w	8006f2e <_printf_float+0xb6>
 80071fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071fe:	f10b 0b01 	add.w	fp, fp, #1
 8007202:	e7b9      	b.n	8007178 <_printf_float+0x300>
 8007204:	4631      	mov	r1, r6
 8007206:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800720a:	4628      	mov	r0, r5
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	d1bf      	bne.n	8007192 <_printf_float+0x31a>
 8007212:	e68c      	b.n	8006f2e <_printf_float+0xb6>
 8007214:	464b      	mov	r3, r9
 8007216:	4631      	mov	r1, r6
 8007218:	4628      	mov	r0, r5
 800721a:	eb08 020a 	add.w	r2, r8, sl
 800721e:	47b8      	blx	r7
 8007220:	3001      	adds	r0, #1
 8007222:	d1c2      	bne.n	80071aa <_printf_float+0x332>
 8007224:	e683      	b.n	8006f2e <_printf_float+0xb6>
 8007226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007228:	2a01      	cmp	r2, #1
 800722a:	dc01      	bgt.n	8007230 <_printf_float+0x3b8>
 800722c:	07db      	lsls	r3, r3, #31
 800722e:	d537      	bpl.n	80072a0 <_printf_float+0x428>
 8007230:	2301      	movs	r3, #1
 8007232:	4642      	mov	r2, r8
 8007234:	4631      	mov	r1, r6
 8007236:	4628      	mov	r0, r5
 8007238:	47b8      	blx	r7
 800723a:	3001      	adds	r0, #1
 800723c:	f43f ae77 	beq.w	8006f2e <_printf_float+0xb6>
 8007240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007244:	4631      	mov	r1, r6
 8007246:	4628      	mov	r0, r5
 8007248:	47b8      	blx	r7
 800724a:	3001      	adds	r0, #1
 800724c:	f43f ae6f 	beq.w	8006f2e <_printf_float+0xb6>
 8007250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007254:	2200      	movs	r2, #0
 8007256:	2300      	movs	r3, #0
 8007258:	f7f9 fba6 	bl	80009a8 <__aeabi_dcmpeq>
 800725c:	b9d8      	cbnz	r0, 8007296 <_printf_float+0x41e>
 800725e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007260:	f108 0201 	add.w	r2, r8, #1
 8007264:	3b01      	subs	r3, #1
 8007266:	4631      	mov	r1, r6
 8007268:	4628      	mov	r0, r5
 800726a:	47b8      	blx	r7
 800726c:	3001      	adds	r0, #1
 800726e:	d10e      	bne.n	800728e <_printf_float+0x416>
 8007270:	e65d      	b.n	8006f2e <_printf_float+0xb6>
 8007272:	2301      	movs	r3, #1
 8007274:	464a      	mov	r2, r9
 8007276:	4631      	mov	r1, r6
 8007278:	4628      	mov	r0, r5
 800727a:	47b8      	blx	r7
 800727c:	3001      	adds	r0, #1
 800727e:	f43f ae56 	beq.w	8006f2e <_printf_float+0xb6>
 8007282:	f108 0801 	add.w	r8, r8, #1
 8007286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007288:	3b01      	subs	r3, #1
 800728a:	4543      	cmp	r3, r8
 800728c:	dcf1      	bgt.n	8007272 <_printf_float+0x3fa>
 800728e:	4653      	mov	r3, sl
 8007290:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007294:	e6e0      	b.n	8007058 <_printf_float+0x1e0>
 8007296:	f04f 0800 	mov.w	r8, #0
 800729a:	f104 091a 	add.w	r9, r4, #26
 800729e:	e7f2      	b.n	8007286 <_printf_float+0x40e>
 80072a0:	2301      	movs	r3, #1
 80072a2:	4642      	mov	r2, r8
 80072a4:	e7df      	b.n	8007266 <_printf_float+0x3ee>
 80072a6:	2301      	movs	r3, #1
 80072a8:	464a      	mov	r2, r9
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b8      	blx	r7
 80072b0:	3001      	adds	r0, #1
 80072b2:	f43f ae3c 	beq.w	8006f2e <_printf_float+0xb6>
 80072b6:	f108 0801 	add.w	r8, r8, #1
 80072ba:	68e3      	ldr	r3, [r4, #12]
 80072bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072be:	1a5b      	subs	r3, r3, r1
 80072c0:	4543      	cmp	r3, r8
 80072c2:	dcf0      	bgt.n	80072a6 <_printf_float+0x42e>
 80072c4:	e6fd      	b.n	80070c2 <_printf_float+0x24a>
 80072c6:	f04f 0800 	mov.w	r8, #0
 80072ca:	f104 0919 	add.w	r9, r4, #25
 80072ce:	e7f4      	b.n	80072ba <_printf_float+0x442>

080072d0 <_printf_common>:
 80072d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d4:	4616      	mov	r6, r2
 80072d6:	4699      	mov	r9, r3
 80072d8:	688a      	ldr	r2, [r1, #8]
 80072da:	690b      	ldr	r3, [r1, #16]
 80072dc:	4607      	mov	r7, r0
 80072de:	4293      	cmp	r3, r2
 80072e0:	bfb8      	it	lt
 80072e2:	4613      	movlt	r3, r2
 80072e4:	6033      	str	r3, [r6, #0]
 80072e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072ea:	460c      	mov	r4, r1
 80072ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072f0:	b10a      	cbz	r2, 80072f6 <_printf_common+0x26>
 80072f2:	3301      	adds	r3, #1
 80072f4:	6033      	str	r3, [r6, #0]
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	0699      	lsls	r1, r3, #26
 80072fa:	bf42      	ittt	mi
 80072fc:	6833      	ldrmi	r3, [r6, #0]
 80072fe:	3302      	addmi	r3, #2
 8007300:	6033      	strmi	r3, [r6, #0]
 8007302:	6825      	ldr	r5, [r4, #0]
 8007304:	f015 0506 	ands.w	r5, r5, #6
 8007308:	d106      	bne.n	8007318 <_printf_common+0x48>
 800730a:	f104 0a19 	add.w	sl, r4, #25
 800730e:	68e3      	ldr	r3, [r4, #12]
 8007310:	6832      	ldr	r2, [r6, #0]
 8007312:	1a9b      	subs	r3, r3, r2
 8007314:	42ab      	cmp	r3, r5
 8007316:	dc28      	bgt.n	800736a <_printf_common+0x9a>
 8007318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800731c:	1e13      	subs	r3, r2, #0
 800731e:	6822      	ldr	r2, [r4, #0]
 8007320:	bf18      	it	ne
 8007322:	2301      	movne	r3, #1
 8007324:	0692      	lsls	r2, r2, #26
 8007326:	d42d      	bmi.n	8007384 <_printf_common+0xb4>
 8007328:	4649      	mov	r1, r9
 800732a:	4638      	mov	r0, r7
 800732c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007330:	47c0      	blx	r8
 8007332:	3001      	adds	r0, #1
 8007334:	d020      	beq.n	8007378 <_printf_common+0xa8>
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	68e5      	ldr	r5, [r4, #12]
 800733a:	f003 0306 	and.w	r3, r3, #6
 800733e:	2b04      	cmp	r3, #4
 8007340:	bf18      	it	ne
 8007342:	2500      	movne	r5, #0
 8007344:	6832      	ldr	r2, [r6, #0]
 8007346:	f04f 0600 	mov.w	r6, #0
 800734a:	68a3      	ldr	r3, [r4, #8]
 800734c:	bf08      	it	eq
 800734e:	1aad      	subeq	r5, r5, r2
 8007350:	6922      	ldr	r2, [r4, #16]
 8007352:	bf08      	it	eq
 8007354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007358:	4293      	cmp	r3, r2
 800735a:	bfc4      	itt	gt
 800735c:	1a9b      	subgt	r3, r3, r2
 800735e:	18ed      	addgt	r5, r5, r3
 8007360:	341a      	adds	r4, #26
 8007362:	42b5      	cmp	r5, r6
 8007364:	d11a      	bne.n	800739c <_printf_common+0xcc>
 8007366:	2000      	movs	r0, #0
 8007368:	e008      	b.n	800737c <_printf_common+0xac>
 800736a:	2301      	movs	r3, #1
 800736c:	4652      	mov	r2, sl
 800736e:	4649      	mov	r1, r9
 8007370:	4638      	mov	r0, r7
 8007372:	47c0      	blx	r8
 8007374:	3001      	adds	r0, #1
 8007376:	d103      	bne.n	8007380 <_printf_common+0xb0>
 8007378:	f04f 30ff 	mov.w	r0, #4294967295
 800737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007380:	3501      	adds	r5, #1
 8007382:	e7c4      	b.n	800730e <_printf_common+0x3e>
 8007384:	2030      	movs	r0, #48	; 0x30
 8007386:	18e1      	adds	r1, r4, r3
 8007388:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007392:	4422      	add	r2, r4
 8007394:	3302      	adds	r3, #2
 8007396:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800739a:	e7c5      	b.n	8007328 <_printf_common+0x58>
 800739c:	2301      	movs	r3, #1
 800739e:	4622      	mov	r2, r4
 80073a0:	4649      	mov	r1, r9
 80073a2:	4638      	mov	r0, r7
 80073a4:	47c0      	blx	r8
 80073a6:	3001      	adds	r0, #1
 80073a8:	d0e6      	beq.n	8007378 <_printf_common+0xa8>
 80073aa:	3601      	adds	r6, #1
 80073ac:	e7d9      	b.n	8007362 <_printf_common+0x92>
	...

080073b0 <_printf_i>:
 80073b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b4:	460c      	mov	r4, r1
 80073b6:	7e27      	ldrb	r7, [r4, #24]
 80073b8:	4691      	mov	r9, r2
 80073ba:	2f78      	cmp	r7, #120	; 0x78
 80073bc:	4680      	mov	r8, r0
 80073be:	469a      	mov	sl, r3
 80073c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073c6:	d807      	bhi.n	80073d8 <_printf_i+0x28>
 80073c8:	2f62      	cmp	r7, #98	; 0x62
 80073ca:	d80a      	bhi.n	80073e2 <_printf_i+0x32>
 80073cc:	2f00      	cmp	r7, #0
 80073ce:	f000 80d9 	beq.w	8007584 <_printf_i+0x1d4>
 80073d2:	2f58      	cmp	r7, #88	; 0x58
 80073d4:	f000 80a4 	beq.w	8007520 <_printf_i+0x170>
 80073d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073e0:	e03a      	b.n	8007458 <_printf_i+0xa8>
 80073e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073e6:	2b15      	cmp	r3, #21
 80073e8:	d8f6      	bhi.n	80073d8 <_printf_i+0x28>
 80073ea:	a001      	add	r0, pc, #4	; (adr r0, 80073f0 <_printf_i+0x40>)
 80073ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80073f0:	08007449 	.word	0x08007449
 80073f4:	0800745d 	.word	0x0800745d
 80073f8:	080073d9 	.word	0x080073d9
 80073fc:	080073d9 	.word	0x080073d9
 8007400:	080073d9 	.word	0x080073d9
 8007404:	080073d9 	.word	0x080073d9
 8007408:	0800745d 	.word	0x0800745d
 800740c:	080073d9 	.word	0x080073d9
 8007410:	080073d9 	.word	0x080073d9
 8007414:	080073d9 	.word	0x080073d9
 8007418:	080073d9 	.word	0x080073d9
 800741c:	0800756b 	.word	0x0800756b
 8007420:	0800748d 	.word	0x0800748d
 8007424:	0800754d 	.word	0x0800754d
 8007428:	080073d9 	.word	0x080073d9
 800742c:	080073d9 	.word	0x080073d9
 8007430:	0800758d 	.word	0x0800758d
 8007434:	080073d9 	.word	0x080073d9
 8007438:	0800748d 	.word	0x0800748d
 800743c:	080073d9 	.word	0x080073d9
 8007440:	080073d9 	.word	0x080073d9
 8007444:	08007555 	.word	0x08007555
 8007448:	680b      	ldr	r3, [r1, #0]
 800744a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	600a      	str	r2, [r1, #0]
 8007454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007458:	2301      	movs	r3, #1
 800745a:	e0a4      	b.n	80075a6 <_printf_i+0x1f6>
 800745c:	6825      	ldr	r5, [r4, #0]
 800745e:	6808      	ldr	r0, [r1, #0]
 8007460:	062e      	lsls	r6, r5, #24
 8007462:	f100 0304 	add.w	r3, r0, #4
 8007466:	d50a      	bpl.n	800747e <_printf_i+0xce>
 8007468:	6805      	ldr	r5, [r0, #0]
 800746a:	600b      	str	r3, [r1, #0]
 800746c:	2d00      	cmp	r5, #0
 800746e:	da03      	bge.n	8007478 <_printf_i+0xc8>
 8007470:	232d      	movs	r3, #45	; 0x2d
 8007472:	426d      	negs	r5, r5
 8007474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007478:	230a      	movs	r3, #10
 800747a:	485e      	ldr	r0, [pc, #376]	; (80075f4 <_printf_i+0x244>)
 800747c:	e019      	b.n	80074b2 <_printf_i+0x102>
 800747e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007482:	6805      	ldr	r5, [r0, #0]
 8007484:	600b      	str	r3, [r1, #0]
 8007486:	bf18      	it	ne
 8007488:	b22d      	sxthne	r5, r5
 800748a:	e7ef      	b.n	800746c <_printf_i+0xbc>
 800748c:	680b      	ldr	r3, [r1, #0]
 800748e:	6825      	ldr	r5, [r4, #0]
 8007490:	1d18      	adds	r0, r3, #4
 8007492:	6008      	str	r0, [r1, #0]
 8007494:	0628      	lsls	r0, r5, #24
 8007496:	d501      	bpl.n	800749c <_printf_i+0xec>
 8007498:	681d      	ldr	r5, [r3, #0]
 800749a:	e002      	b.n	80074a2 <_printf_i+0xf2>
 800749c:	0669      	lsls	r1, r5, #25
 800749e:	d5fb      	bpl.n	8007498 <_printf_i+0xe8>
 80074a0:	881d      	ldrh	r5, [r3, #0]
 80074a2:	2f6f      	cmp	r7, #111	; 0x6f
 80074a4:	bf0c      	ite	eq
 80074a6:	2308      	moveq	r3, #8
 80074a8:	230a      	movne	r3, #10
 80074aa:	4852      	ldr	r0, [pc, #328]	; (80075f4 <_printf_i+0x244>)
 80074ac:	2100      	movs	r1, #0
 80074ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074b2:	6866      	ldr	r6, [r4, #4]
 80074b4:	2e00      	cmp	r6, #0
 80074b6:	bfa8      	it	ge
 80074b8:	6821      	ldrge	r1, [r4, #0]
 80074ba:	60a6      	str	r6, [r4, #8]
 80074bc:	bfa4      	itt	ge
 80074be:	f021 0104 	bicge.w	r1, r1, #4
 80074c2:	6021      	strge	r1, [r4, #0]
 80074c4:	b90d      	cbnz	r5, 80074ca <_printf_i+0x11a>
 80074c6:	2e00      	cmp	r6, #0
 80074c8:	d04d      	beq.n	8007566 <_printf_i+0x1b6>
 80074ca:	4616      	mov	r6, r2
 80074cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80074d0:	fb03 5711 	mls	r7, r3, r1, r5
 80074d4:	5dc7      	ldrb	r7, [r0, r7]
 80074d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074da:	462f      	mov	r7, r5
 80074dc:	42bb      	cmp	r3, r7
 80074de:	460d      	mov	r5, r1
 80074e0:	d9f4      	bls.n	80074cc <_printf_i+0x11c>
 80074e2:	2b08      	cmp	r3, #8
 80074e4:	d10b      	bne.n	80074fe <_printf_i+0x14e>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	07df      	lsls	r7, r3, #31
 80074ea:	d508      	bpl.n	80074fe <_printf_i+0x14e>
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	6861      	ldr	r1, [r4, #4]
 80074f0:	4299      	cmp	r1, r3
 80074f2:	bfde      	ittt	le
 80074f4:	2330      	movle	r3, #48	; 0x30
 80074f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074fe:	1b92      	subs	r2, r2, r6
 8007500:	6122      	str	r2, [r4, #16]
 8007502:	464b      	mov	r3, r9
 8007504:	4621      	mov	r1, r4
 8007506:	4640      	mov	r0, r8
 8007508:	f8cd a000 	str.w	sl, [sp]
 800750c:	aa03      	add	r2, sp, #12
 800750e:	f7ff fedf 	bl	80072d0 <_printf_common>
 8007512:	3001      	adds	r0, #1
 8007514:	d14c      	bne.n	80075b0 <_printf_i+0x200>
 8007516:	f04f 30ff 	mov.w	r0, #4294967295
 800751a:	b004      	add	sp, #16
 800751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007520:	4834      	ldr	r0, [pc, #208]	; (80075f4 <_printf_i+0x244>)
 8007522:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007526:	680e      	ldr	r6, [r1, #0]
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	f856 5b04 	ldr.w	r5, [r6], #4
 800752e:	061f      	lsls	r7, r3, #24
 8007530:	600e      	str	r6, [r1, #0]
 8007532:	d514      	bpl.n	800755e <_printf_i+0x1ae>
 8007534:	07d9      	lsls	r1, r3, #31
 8007536:	bf44      	itt	mi
 8007538:	f043 0320 	orrmi.w	r3, r3, #32
 800753c:	6023      	strmi	r3, [r4, #0]
 800753e:	b91d      	cbnz	r5, 8007548 <_printf_i+0x198>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	f023 0320 	bic.w	r3, r3, #32
 8007546:	6023      	str	r3, [r4, #0]
 8007548:	2310      	movs	r3, #16
 800754a:	e7af      	b.n	80074ac <_printf_i+0xfc>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	f043 0320 	orr.w	r3, r3, #32
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	2378      	movs	r3, #120	; 0x78
 8007556:	4828      	ldr	r0, [pc, #160]	; (80075f8 <_printf_i+0x248>)
 8007558:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800755c:	e7e3      	b.n	8007526 <_printf_i+0x176>
 800755e:	065e      	lsls	r6, r3, #25
 8007560:	bf48      	it	mi
 8007562:	b2ad      	uxthmi	r5, r5
 8007564:	e7e6      	b.n	8007534 <_printf_i+0x184>
 8007566:	4616      	mov	r6, r2
 8007568:	e7bb      	b.n	80074e2 <_printf_i+0x132>
 800756a:	680b      	ldr	r3, [r1, #0]
 800756c:	6826      	ldr	r6, [r4, #0]
 800756e:	1d1d      	adds	r5, r3, #4
 8007570:	6960      	ldr	r0, [r4, #20]
 8007572:	600d      	str	r5, [r1, #0]
 8007574:	0635      	lsls	r5, r6, #24
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	d501      	bpl.n	800757e <_printf_i+0x1ce>
 800757a:	6018      	str	r0, [r3, #0]
 800757c:	e002      	b.n	8007584 <_printf_i+0x1d4>
 800757e:	0671      	lsls	r1, r6, #25
 8007580:	d5fb      	bpl.n	800757a <_printf_i+0x1ca>
 8007582:	8018      	strh	r0, [r3, #0]
 8007584:	2300      	movs	r3, #0
 8007586:	4616      	mov	r6, r2
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	e7ba      	b.n	8007502 <_printf_i+0x152>
 800758c:	680b      	ldr	r3, [r1, #0]
 800758e:	1d1a      	adds	r2, r3, #4
 8007590:	600a      	str	r2, [r1, #0]
 8007592:	681e      	ldr	r6, [r3, #0]
 8007594:	2100      	movs	r1, #0
 8007596:	4630      	mov	r0, r6
 8007598:	6862      	ldr	r2, [r4, #4]
 800759a:	f002 fb47 	bl	8009c2c <memchr>
 800759e:	b108      	cbz	r0, 80075a4 <_printf_i+0x1f4>
 80075a0:	1b80      	subs	r0, r0, r6
 80075a2:	6060      	str	r0, [r4, #4]
 80075a4:	6863      	ldr	r3, [r4, #4]
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	2300      	movs	r3, #0
 80075aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ae:	e7a8      	b.n	8007502 <_printf_i+0x152>
 80075b0:	4632      	mov	r2, r6
 80075b2:	4649      	mov	r1, r9
 80075b4:	4640      	mov	r0, r8
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	47d0      	blx	sl
 80075ba:	3001      	adds	r0, #1
 80075bc:	d0ab      	beq.n	8007516 <_printf_i+0x166>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	079b      	lsls	r3, r3, #30
 80075c2:	d413      	bmi.n	80075ec <_printf_i+0x23c>
 80075c4:	68e0      	ldr	r0, [r4, #12]
 80075c6:	9b03      	ldr	r3, [sp, #12]
 80075c8:	4298      	cmp	r0, r3
 80075ca:	bfb8      	it	lt
 80075cc:	4618      	movlt	r0, r3
 80075ce:	e7a4      	b.n	800751a <_printf_i+0x16a>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4632      	mov	r2, r6
 80075d4:	4649      	mov	r1, r9
 80075d6:	4640      	mov	r0, r8
 80075d8:	47d0      	blx	sl
 80075da:	3001      	adds	r0, #1
 80075dc:	d09b      	beq.n	8007516 <_printf_i+0x166>
 80075de:	3501      	adds	r5, #1
 80075e0:	68e3      	ldr	r3, [r4, #12]
 80075e2:	9903      	ldr	r1, [sp, #12]
 80075e4:	1a5b      	subs	r3, r3, r1
 80075e6:	42ab      	cmp	r3, r5
 80075e8:	dcf2      	bgt.n	80075d0 <_printf_i+0x220>
 80075ea:	e7eb      	b.n	80075c4 <_printf_i+0x214>
 80075ec:	2500      	movs	r5, #0
 80075ee:	f104 0619 	add.w	r6, r4, #25
 80075f2:	e7f5      	b.n	80075e0 <_printf_i+0x230>
 80075f4:	0800e5a2 	.word	0x0800e5a2
 80075f8:	0800e5b3 	.word	0x0800e5b3

080075fc <_scanf_float>:
 80075fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	b087      	sub	sp, #28
 8007602:	9303      	str	r3, [sp, #12]
 8007604:	688b      	ldr	r3, [r1, #8]
 8007606:	4617      	mov	r7, r2
 8007608:	1e5a      	subs	r2, r3, #1
 800760a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800760e:	bf85      	ittet	hi
 8007610:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007614:	195b      	addhi	r3, r3, r5
 8007616:	2300      	movls	r3, #0
 8007618:	9302      	strhi	r3, [sp, #8]
 800761a:	bf88      	it	hi
 800761c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007620:	468b      	mov	fp, r1
 8007622:	f04f 0500 	mov.w	r5, #0
 8007626:	bf8c      	ite	hi
 8007628:	608b      	strhi	r3, [r1, #8]
 800762a:	9302      	strls	r3, [sp, #8]
 800762c:	680b      	ldr	r3, [r1, #0]
 800762e:	4680      	mov	r8, r0
 8007630:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007634:	f84b 3b1c 	str.w	r3, [fp], #28
 8007638:	460c      	mov	r4, r1
 800763a:	465e      	mov	r6, fp
 800763c:	46aa      	mov	sl, r5
 800763e:	46a9      	mov	r9, r5
 8007640:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007644:	9501      	str	r5, [sp, #4]
 8007646:	68a2      	ldr	r2, [r4, #8]
 8007648:	b152      	cbz	r2, 8007660 <_scanf_float+0x64>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b4e      	cmp	r3, #78	; 0x4e
 8007650:	d864      	bhi.n	800771c <_scanf_float+0x120>
 8007652:	2b40      	cmp	r3, #64	; 0x40
 8007654:	d83c      	bhi.n	80076d0 <_scanf_float+0xd4>
 8007656:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800765a:	b2c8      	uxtb	r0, r1
 800765c:	280e      	cmp	r0, #14
 800765e:	d93a      	bls.n	80076d6 <_scanf_float+0xda>
 8007660:	f1b9 0f00 	cmp.w	r9, #0
 8007664:	d003      	beq.n	800766e <_scanf_float+0x72>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007672:	f1ba 0f01 	cmp.w	sl, #1
 8007676:	f200 8113 	bhi.w	80078a0 <_scanf_float+0x2a4>
 800767a:	455e      	cmp	r6, fp
 800767c:	f200 8105 	bhi.w	800788a <_scanf_float+0x28e>
 8007680:	2501      	movs	r5, #1
 8007682:	4628      	mov	r0, r5
 8007684:	b007      	add	sp, #28
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800768e:	2a0d      	cmp	r2, #13
 8007690:	d8e6      	bhi.n	8007660 <_scanf_float+0x64>
 8007692:	a101      	add	r1, pc, #4	; (adr r1, 8007698 <_scanf_float+0x9c>)
 8007694:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007698:	080077d7 	.word	0x080077d7
 800769c:	08007661 	.word	0x08007661
 80076a0:	08007661 	.word	0x08007661
 80076a4:	08007661 	.word	0x08007661
 80076a8:	08007837 	.word	0x08007837
 80076ac:	0800780f 	.word	0x0800780f
 80076b0:	08007661 	.word	0x08007661
 80076b4:	08007661 	.word	0x08007661
 80076b8:	080077e5 	.word	0x080077e5
 80076bc:	08007661 	.word	0x08007661
 80076c0:	08007661 	.word	0x08007661
 80076c4:	08007661 	.word	0x08007661
 80076c8:	08007661 	.word	0x08007661
 80076cc:	0800779d 	.word	0x0800779d
 80076d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80076d4:	e7db      	b.n	800768e <_scanf_float+0x92>
 80076d6:	290e      	cmp	r1, #14
 80076d8:	d8c2      	bhi.n	8007660 <_scanf_float+0x64>
 80076da:	a001      	add	r0, pc, #4	; (adr r0, 80076e0 <_scanf_float+0xe4>)
 80076dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80076e0:	0800778f 	.word	0x0800778f
 80076e4:	08007661 	.word	0x08007661
 80076e8:	0800778f 	.word	0x0800778f
 80076ec:	08007823 	.word	0x08007823
 80076f0:	08007661 	.word	0x08007661
 80076f4:	0800773d 	.word	0x0800773d
 80076f8:	08007779 	.word	0x08007779
 80076fc:	08007779 	.word	0x08007779
 8007700:	08007779 	.word	0x08007779
 8007704:	08007779 	.word	0x08007779
 8007708:	08007779 	.word	0x08007779
 800770c:	08007779 	.word	0x08007779
 8007710:	08007779 	.word	0x08007779
 8007714:	08007779 	.word	0x08007779
 8007718:	08007779 	.word	0x08007779
 800771c:	2b6e      	cmp	r3, #110	; 0x6e
 800771e:	d809      	bhi.n	8007734 <_scanf_float+0x138>
 8007720:	2b60      	cmp	r3, #96	; 0x60
 8007722:	d8b2      	bhi.n	800768a <_scanf_float+0x8e>
 8007724:	2b54      	cmp	r3, #84	; 0x54
 8007726:	d077      	beq.n	8007818 <_scanf_float+0x21c>
 8007728:	2b59      	cmp	r3, #89	; 0x59
 800772a:	d199      	bne.n	8007660 <_scanf_float+0x64>
 800772c:	2d07      	cmp	r5, #7
 800772e:	d197      	bne.n	8007660 <_scanf_float+0x64>
 8007730:	2508      	movs	r5, #8
 8007732:	e029      	b.n	8007788 <_scanf_float+0x18c>
 8007734:	2b74      	cmp	r3, #116	; 0x74
 8007736:	d06f      	beq.n	8007818 <_scanf_float+0x21c>
 8007738:	2b79      	cmp	r3, #121	; 0x79
 800773a:	e7f6      	b.n	800772a <_scanf_float+0x12e>
 800773c:	6821      	ldr	r1, [r4, #0]
 800773e:	05c8      	lsls	r0, r1, #23
 8007740:	d51a      	bpl.n	8007778 <_scanf_float+0x17c>
 8007742:	9b02      	ldr	r3, [sp, #8]
 8007744:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007748:	6021      	str	r1, [r4, #0]
 800774a:	f109 0901 	add.w	r9, r9, #1
 800774e:	b11b      	cbz	r3, 8007758 <_scanf_float+0x15c>
 8007750:	3b01      	subs	r3, #1
 8007752:	3201      	adds	r2, #1
 8007754:	9302      	str	r3, [sp, #8]
 8007756:	60a2      	str	r2, [r4, #8]
 8007758:	68a3      	ldr	r3, [r4, #8]
 800775a:	3b01      	subs	r3, #1
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	3301      	adds	r3, #1
 8007762:	6123      	str	r3, [r4, #16]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3b01      	subs	r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	607b      	str	r3, [r7, #4]
 800776c:	f340 8084 	ble.w	8007878 <_scanf_float+0x27c>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	3301      	adds	r3, #1
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	e766      	b.n	8007646 <_scanf_float+0x4a>
 8007778:	eb1a 0f05 	cmn.w	sl, r5
 800777c:	f47f af70 	bne.w	8007660 <_scanf_float+0x64>
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007786:	6022      	str	r2, [r4, #0]
 8007788:	f806 3b01 	strb.w	r3, [r6], #1
 800778c:	e7e4      	b.n	8007758 <_scanf_float+0x15c>
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	0610      	lsls	r0, r2, #24
 8007792:	f57f af65 	bpl.w	8007660 <_scanf_float+0x64>
 8007796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800779a:	e7f4      	b.n	8007786 <_scanf_float+0x18a>
 800779c:	f1ba 0f00 	cmp.w	sl, #0
 80077a0:	d10e      	bne.n	80077c0 <_scanf_float+0x1c4>
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	d10e      	bne.n	80077c6 <_scanf_float+0x1ca>
 80077a8:	6822      	ldr	r2, [r4, #0]
 80077aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077b2:	d108      	bne.n	80077c6 <_scanf_float+0x1ca>
 80077b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077b8:	f04f 0a01 	mov.w	sl, #1
 80077bc:	6022      	str	r2, [r4, #0]
 80077be:	e7e3      	b.n	8007788 <_scanf_float+0x18c>
 80077c0:	f1ba 0f02 	cmp.w	sl, #2
 80077c4:	d055      	beq.n	8007872 <_scanf_float+0x276>
 80077c6:	2d01      	cmp	r5, #1
 80077c8:	d002      	beq.n	80077d0 <_scanf_float+0x1d4>
 80077ca:	2d04      	cmp	r5, #4
 80077cc:	f47f af48 	bne.w	8007660 <_scanf_float+0x64>
 80077d0:	3501      	adds	r5, #1
 80077d2:	b2ed      	uxtb	r5, r5
 80077d4:	e7d8      	b.n	8007788 <_scanf_float+0x18c>
 80077d6:	f1ba 0f01 	cmp.w	sl, #1
 80077da:	f47f af41 	bne.w	8007660 <_scanf_float+0x64>
 80077de:	f04f 0a02 	mov.w	sl, #2
 80077e2:	e7d1      	b.n	8007788 <_scanf_float+0x18c>
 80077e4:	b97d      	cbnz	r5, 8007806 <_scanf_float+0x20a>
 80077e6:	f1b9 0f00 	cmp.w	r9, #0
 80077ea:	f47f af3c 	bne.w	8007666 <_scanf_float+0x6a>
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077f8:	f47f af39 	bne.w	800766e <_scanf_float+0x72>
 80077fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007800:	2501      	movs	r5, #1
 8007802:	6022      	str	r2, [r4, #0]
 8007804:	e7c0      	b.n	8007788 <_scanf_float+0x18c>
 8007806:	2d03      	cmp	r5, #3
 8007808:	d0e2      	beq.n	80077d0 <_scanf_float+0x1d4>
 800780a:	2d05      	cmp	r5, #5
 800780c:	e7de      	b.n	80077cc <_scanf_float+0x1d0>
 800780e:	2d02      	cmp	r5, #2
 8007810:	f47f af26 	bne.w	8007660 <_scanf_float+0x64>
 8007814:	2503      	movs	r5, #3
 8007816:	e7b7      	b.n	8007788 <_scanf_float+0x18c>
 8007818:	2d06      	cmp	r5, #6
 800781a:	f47f af21 	bne.w	8007660 <_scanf_float+0x64>
 800781e:	2507      	movs	r5, #7
 8007820:	e7b2      	b.n	8007788 <_scanf_float+0x18c>
 8007822:	6822      	ldr	r2, [r4, #0]
 8007824:	0591      	lsls	r1, r2, #22
 8007826:	f57f af1b 	bpl.w	8007660 <_scanf_float+0x64>
 800782a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800782e:	6022      	str	r2, [r4, #0]
 8007830:	f8cd 9004 	str.w	r9, [sp, #4]
 8007834:	e7a8      	b.n	8007788 <_scanf_float+0x18c>
 8007836:	6822      	ldr	r2, [r4, #0]
 8007838:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800783c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007840:	d006      	beq.n	8007850 <_scanf_float+0x254>
 8007842:	0550      	lsls	r0, r2, #21
 8007844:	f57f af0c 	bpl.w	8007660 <_scanf_float+0x64>
 8007848:	f1b9 0f00 	cmp.w	r9, #0
 800784c:	f43f af0f 	beq.w	800766e <_scanf_float+0x72>
 8007850:	0591      	lsls	r1, r2, #22
 8007852:	bf58      	it	pl
 8007854:	9901      	ldrpl	r1, [sp, #4]
 8007856:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800785a:	bf58      	it	pl
 800785c:	eba9 0101 	subpl.w	r1, r9, r1
 8007860:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007864:	f04f 0900 	mov.w	r9, #0
 8007868:	bf58      	it	pl
 800786a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800786e:	6022      	str	r2, [r4, #0]
 8007870:	e78a      	b.n	8007788 <_scanf_float+0x18c>
 8007872:	f04f 0a03 	mov.w	sl, #3
 8007876:	e787      	b.n	8007788 <_scanf_float+0x18c>
 8007878:	4639      	mov	r1, r7
 800787a:	4640      	mov	r0, r8
 800787c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007880:	4798      	blx	r3
 8007882:	2800      	cmp	r0, #0
 8007884:	f43f aedf 	beq.w	8007646 <_scanf_float+0x4a>
 8007888:	e6ea      	b.n	8007660 <_scanf_float+0x64>
 800788a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800788e:	463a      	mov	r2, r7
 8007890:	4640      	mov	r0, r8
 8007892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007896:	4798      	blx	r3
 8007898:	6923      	ldr	r3, [r4, #16]
 800789a:	3b01      	subs	r3, #1
 800789c:	6123      	str	r3, [r4, #16]
 800789e:	e6ec      	b.n	800767a <_scanf_float+0x7e>
 80078a0:	1e6b      	subs	r3, r5, #1
 80078a2:	2b06      	cmp	r3, #6
 80078a4:	d825      	bhi.n	80078f2 <_scanf_float+0x2f6>
 80078a6:	2d02      	cmp	r5, #2
 80078a8:	d836      	bhi.n	8007918 <_scanf_float+0x31c>
 80078aa:	455e      	cmp	r6, fp
 80078ac:	f67f aee8 	bls.w	8007680 <_scanf_float+0x84>
 80078b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078b4:	463a      	mov	r2, r7
 80078b6:	4640      	mov	r0, r8
 80078b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078bc:	4798      	blx	r3
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	6123      	str	r3, [r4, #16]
 80078c4:	e7f1      	b.n	80078aa <_scanf_float+0x2ae>
 80078c6:	9802      	ldr	r0, [sp, #8]
 80078c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80078d0:	463a      	mov	r2, r7
 80078d2:	9002      	str	r0, [sp, #8]
 80078d4:	4640      	mov	r0, r8
 80078d6:	4798      	blx	r3
 80078d8:	6923      	ldr	r3, [r4, #16]
 80078da:	3b01      	subs	r3, #1
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078e2:	fa5f fa8a 	uxtb.w	sl, sl
 80078e6:	f1ba 0f02 	cmp.w	sl, #2
 80078ea:	d1ec      	bne.n	80078c6 <_scanf_float+0x2ca>
 80078ec:	3d03      	subs	r5, #3
 80078ee:	b2ed      	uxtb	r5, r5
 80078f0:	1b76      	subs	r6, r6, r5
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	05da      	lsls	r2, r3, #23
 80078f6:	d52f      	bpl.n	8007958 <_scanf_float+0x35c>
 80078f8:	055b      	lsls	r3, r3, #21
 80078fa:	d510      	bpl.n	800791e <_scanf_float+0x322>
 80078fc:	455e      	cmp	r6, fp
 80078fe:	f67f aebf 	bls.w	8007680 <_scanf_float+0x84>
 8007902:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007906:	463a      	mov	r2, r7
 8007908:	4640      	mov	r0, r8
 800790a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800790e:	4798      	blx	r3
 8007910:	6923      	ldr	r3, [r4, #16]
 8007912:	3b01      	subs	r3, #1
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	e7f1      	b.n	80078fc <_scanf_float+0x300>
 8007918:	46aa      	mov	sl, r5
 800791a:	9602      	str	r6, [sp, #8]
 800791c:	e7df      	b.n	80078de <_scanf_float+0x2e2>
 800791e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	2965      	cmp	r1, #101	; 0x65
 8007926:	f103 33ff 	add.w	r3, r3, #4294967295
 800792a:	f106 35ff 	add.w	r5, r6, #4294967295
 800792e:	6123      	str	r3, [r4, #16]
 8007930:	d00c      	beq.n	800794c <_scanf_float+0x350>
 8007932:	2945      	cmp	r1, #69	; 0x45
 8007934:	d00a      	beq.n	800794c <_scanf_float+0x350>
 8007936:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800793a:	463a      	mov	r2, r7
 800793c:	4640      	mov	r0, r8
 800793e:	4798      	blx	r3
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007946:	3b01      	subs	r3, #1
 8007948:	1eb5      	subs	r5, r6, #2
 800794a:	6123      	str	r3, [r4, #16]
 800794c:	463a      	mov	r2, r7
 800794e:	4640      	mov	r0, r8
 8007950:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007954:	4798      	blx	r3
 8007956:	462e      	mov	r6, r5
 8007958:	6825      	ldr	r5, [r4, #0]
 800795a:	f015 0510 	ands.w	r5, r5, #16
 800795e:	d159      	bne.n	8007a14 <_scanf_float+0x418>
 8007960:	7035      	strb	r5, [r6, #0]
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796c:	d11c      	bne.n	80079a8 <_scanf_float+0x3ac>
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	454b      	cmp	r3, r9
 8007972:	eba3 0209 	sub.w	r2, r3, r9
 8007976:	d124      	bne.n	80079c2 <_scanf_float+0x3c6>
 8007978:	2200      	movs	r2, #0
 800797a:	4659      	mov	r1, fp
 800797c:	4640      	mov	r0, r8
 800797e:	f000 fe8b 	bl	8008698 <_strtod_r>
 8007982:	f8d4 c000 	ldr.w	ip, [r4]
 8007986:	9b03      	ldr	r3, [sp, #12]
 8007988:	f01c 0f02 	tst.w	ip, #2
 800798c:	4606      	mov	r6, r0
 800798e:	460f      	mov	r7, r1
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	d021      	beq.n	80079d8 <_scanf_float+0x3dc>
 8007994:	9903      	ldr	r1, [sp, #12]
 8007996:	1d1a      	adds	r2, r3, #4
 8007998:	600a      	str	r2, [r1, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	e9c3 6700 	strd	r6, r7, [r3]
 80079a0:	68e3      	ldr	r3, [r4, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	60e3      	str	r3, [r4, #12]
 80079a6:	e66c      	b.n	8007682 <_scanf_float+0x86>
 80079a8:	9b04      	ldr	r3, [sp, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0e4      	beq.n	8007978 <_scanf_float+0x37c>
 80079ae:	9905      	ldr	r1, [sp, #20]
 80079b0:	230a      	movs	r3, #10
 80079b2:	462a      	mov	r2, r5
 80079b4:	4640      	mov	r0, r8
 80079b6:	3101      	adds	r1, #1
 80079b8:	f000 fefa 	bl	80087b0 <_strtol_r>
 80079bc:	9b04      	ldr	r3, [sp, #16]
 80079be:	9e05      	ldr	r6, [sp, #20]
 80079c0:	1ac2      	subs	r2, r0, r3
 80079c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80079c6:	429e      	cmp	r6, r3
 80079c8:	bf28      	it	cs
 80079ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80079ce:	4630      	mov	r0, r6
 80079d0:	4911      	ldr	r1, [pc, #68]	; (8007a18 <_scanf_float+0x41c>)
 80079d2:	f000 f829 	bl	8007a28 <siprintf>
 80079d6:	e7cf      	b.n	8007978 <_scanf_float+0x37c>
 80079d8:	f01c 0f04 	tst.w	ip, #4
 80079dc:	f103 0e04 	add.w	lr, r3, #4
 80079e0:	d003      	beq.n	80079ea <_scanf_float+0x3ee>
 80079e2:	9903      	ldr	r1, [sp, #12]
 80079e4:	f8c1 e000 	str.w	lr, [r1]
 80079e8:	e7d7      	b.n	800799a <_scanf_float+0x39e>
 80079ea:	9a03      	ldr	r2, [sp, #12]
 80079ec:	f8c2 e000 	str.w	lr, [r2]
 80079f0:	f8d3 8000 	ldr.w	r8, [r3]
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	f7f9 f808 	bl	8000a0c <__aeabi_dcmpun>
 80079fc:	b128      	cbz	r0, 8007a0a <_scanf_float+0x40e>
 80079fe:	4807      	ldr	r0, [pc, #28]	; (8007a1c <_scanf_float+0x420>)
 8007a00:	f000 f80e 	bl	8007a20 <nanf>
 8007a04:	f8c8 0000 	str.w	r0, [r8]
 8007a08:	e7ca      	b.n	80079a0 <_scanf_float+0x3a4>
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	f7f9 f85b 	bl	8000ac8 <__aeabi_d2f>
 8007a12:	e7f7      	b.n	8007a04 <_scanf_float+0x408>
 8007a14:	2500      	movs	r5, #0
 8007a16:	e634      	b.n	8007682 <_scanf_float+0x86>
 8007a18:	0800e5c4 	.word	0x0800e5c4
 8007a1c:	0800e9e0 	.word	0x0800e9e0

08007a20 <nanf>:
 8007a20:	4800      	ldr	r0, [pc, #0]	; (8007a24 <nanf+0x4>)
 8007a22:	4770      	bx	lr
 8007a24:	7fc00000 	.word	0x7fc00000

08007a28 <siprintf>:
 8007a28:	b40e      	push	{r1, r2, r3}
 8007a2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a2e:	b500      	push	{lr}
 8007a30:	b09c      	sub	sp, #112	; 0x70
 8007a32:	ab1d      	add	r3, sp, #116	; 0x74
 8007a34:	9002      	str	r0, [sp, #8]
 8007a36:	9006      	str	r0, [sp, #24]
 8007a38:	9107      	str	r1, [sp, #28]
 8007a3a:	9104      	str	r1, [sp, #16]
 8007a3c:	4808      	ldr	r0, [pc, #32]	; (8007a60 <siprintf+0x38>)
 8007a3e:	4909      	ldr	r1, [pc, #36]	; (8007a64 <siprintf+0x3c>)
 8007a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a44:	9105      	str	r1, [sp, #20]
 8007a46:	6800      	ldr	r0, [r0, #0]
 8007a48:	a902      	add	r1, sp, #8
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	f002 fed2 	bl	800a7f4 <_svfiprintf_r>
 8007a50:	2200      	movs	r2, #0
 8007a52:	9b02      	ldr	r3, [sp, #8]
 8007a54:	701a      	strb	r2, [r3, #0]
 8007a56:	b01c      	add	sp, #112	; 0x70
 8007a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a5c:	b003      	add	sp, #12
 8007a5e:	4770      	bx	lr
 8007a60:	2000000c 	.word	0x2000000c
 8007a64:	ffff0208 	.word	0xffff0208

08007a68 <sulp>:
 8007a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	4690      	mov	r8, r2
 8007a70:	f002 fc68 	bl	800a344 <__ulp>
 8007a74:	4604      	mov	r4, r0
 8007a76:	460d      	mov	r5, r1
 8007a78:	f1b8 0f00 	cmp.w	r8, #0
 8007a7c:	d011      	beq.n	8007aa2 <sulp+0x3a>
 8007a7e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dd0b      	ble.n	8007aa2 <sulp+0x3a>
 8007a8a:	2400      	movs	r4, #0
 8007a8c:	051b      	lsls	r3, r3, #20
 8007a8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a96:	4622      	mov	r2, r4
 8007a98:	462b      	mov	r3, r5
 8007a9a:	f7f8 fd1d 	bl	80004d8 <__aeabi_dmul>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	460d      	mov	r5, r1
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aaa:	0000      	movs	r0, r0
 8007aac:	0000      	movs	r0, r0
	...

08007ab0 <_strtod_l>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	469b      	mov	fp, r3
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	b0a1      	sub	sp, #132	; 0x84
 8007aba:	931c      	str	r3, [sp, #112]	; 0x70
 8007abc:	4ba1      	ldr	r3, [pc, #644]	; (8007d44 <_strtod_l+0x294>)
 8007abe:	4682      	mov	sl, r0
 8007ac0:	681f      	ldr	r7, [r3, #0]
 8007ac2:	460e      	mov	r6, r1
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ac8:	f7f8 fb42 	bl	8000150 <strlen>
 8007acc:	f04f 0800 	mov.w	r8, #0
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	f04f 0900 	mov.w	r9, #0
 8007ad6:	961b      	str	r6, [sp, #108]	; 0x6c
 8007ad8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ada:	781a      	ldrb	r2, [r3, #0]
 8007adc:	2a2b      	cmp	r2, #43	; 0x2b
 8007ade:	d04c      	beq.n	8007b7a <_strtod_l+0xca>
 8007ae0:	d83a      	bhi.n	8007b58 <_strtod_l+0xa8>
 8007ae2:	2a0d      	cmp	r2, #13
 8007ae4:	d833      	bhi.n	8007b4e <_strtod_l+0x9e>
 8007ae6:	2a08      	cmp	r2, #8
 8007ae8:	d833      	bhi.n	8007b52 <_strtod_l+0xa2>
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	d03d      	beq.n	8007b6a <_strtod_l+0xba>
 8007aee:	2300      	movs	r3, #0
 8007af0:	930c      	str	r3, [sp, #48]	; 0x30
 8007af2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007af4:	782b      	ldrb	r3, [r5, #0]
 8007af6:	2b30      	cmp	r3, #48	; 0x30
 8007af8:	f040 80af 	bne.w	8007c5a <_strtod_l+0x1aa>
 8007afc:	786b      	ldrb	r3, [r5, #1]
 8007afe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b02:	2b58      	cmp	r3, #88	; 0x58
 8007b04:	d16c      	bne.n	8007be0 <_strtod_l+0x130>
 8007b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b08:	4650      	mov	r0, sl
 8007b0a:	9301      	str	r3, [sp, #4]
 8007b0c:	ab1c      	add	r3, sp, #112	; 0x70
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	4a8d      	ldr	r2, [pc, #564]	; (8007d48 <_strtod_l+0x298>)
 8007b12:	f8cd b008 	str.w	fp, [sp, #8]
 8007b16:	ab1d      	add	r3, sp, #116	; 0x74
 8007b18:	a91b      	add	r1, sp, #108	; 0x6c
 8007b1a:	f001 fd6b 	bl	80095f4 <__gethex>
 8007b1e:	f010 0607 	ands.w	r6, r0, #7
 8007b22:	4604      	mov	r4, r0
 8007b24:	d005      	beq.n	8007b32 <_strtod_l+0x82>
 8007b26:	2e06      	cmp	r6, #6
 8007b28:	d129      	bne.n	8007b7e <_strtod_l+0xce>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	951b      	str	r5, [sp, #108]	; 0x6c
 8007b30:	930c      	str	r3, [sp, #48]	; 0x30
 8007b32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f040 8596 	bne.w	8008666 <_strtod_l+0xbb6>
 8007b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b3c:	b1d3      	cbz	r3, 8007b74 <_strtod_l+0xc4>
 8007b3e:	4642      	mov	r2, r8
 8007b40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b44:	4610      	mov	r0, r2
 8007b46:	4619      	mov	r1, r3
 8007b48:	b021      	add	sp, #132	; 0x84
 8007b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4e:	2a20      	cmp	r2, #32
 8007b50:	d1cd      	bne.n	8007aee <_strtod_l+0x3e>
 8007b52:	3301      	adds	r3, #1
 8007b54:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b56:	e7bf      	b.n	8007ad8 <_strtod_l+0x28>
 8007b58:	2a2d      	cmp	r2, #45	; 0x2d
 8007b5a:	d1c8      	bne.n	8007aee <_strtod_l+0x3e>
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	920c      	str	r2, [sp, #48]	; 0x30
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1c3      	bne.n	8007af2 <_strtod_l+0x42>
 8007b6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f040 8577 	bne.w	8008662 <_strtod_l+0xbb2>
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	e7e4      	b.n	8007b44 <_strtod_l+0x94>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	e7ef      	b.n	8007b5e <_strtod_l+0xae>
 8007b7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007b80:	b13a      	cbz	r2, 8007b92 <_strtod_l+0xe2>
 8007b82:	2135      	movs	r1, #53	; 0x35
 8007b84:	a81e      	add	r0, sp, #120	; 0x78
 8007b86:	f002 fce1 	bl	800a54c <__copybits>
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b8e:	f002 f8a9 	bl	8009ce4 <_Bfree>
 8007b92:	3e01      	subs	r6, #1
 8007b94:	2e05      	cmp	r6, #5
 8007b96:	d807      	bhi.n	8007ba8 <_strtod_l+0xf8>
 8007b98:	e8df f006 	tbb	[pc, r6]
 8007b9c:	1d180b0e 	.word	0x1d180b0e
 8007ba0:	030e      	.short	0x030e
 8007ba2:	f04f 0900 	mov.w	r9, #0
 8007ba6:	46c8      	mov	r8, r9
 8007ba8:	0721      	lsls	r1, r4, #28
 8007baa:	d5c2      	bpl.n	8007b32 <_strtod_l+0x82>
 8007bac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007bb0:	e7bf      	b.n	8007b32 <_strtod_l+0x82>
 8007bb2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8007bb6:	e7f7      	b.n	8007ba8 <_strtod_l+0xf8>
 8007bb8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007bba:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8007bbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007bc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007bc6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007bca:	e7ed      	b.n	8007ba8 <_strtod_l+0xf8>
 8007bcc:	f04f 0800 	mov.w	r8, #0
 8007bd0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007d4c <_strtod_l+0x29c>
 8007bd4:	e7e8      	b.n	8007ba8 <_strtod_l+0xf8>
 8007bd6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007bda:	f04f 38ff 	mov.w	r8, #4294967295
 8007bde:	e7e3      	b.n	8007ba8 <_strtod_l+0xf8>
 8007be0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	921b      	str	r2, [sp, #108]	; 0x6c
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	2b30      	cmp	r3, #48	; 0x30
 8007bea:	d0f9      	beq.n	8007be0 <_strtod_l+0x130>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0a0      	beq.n	8007b32 <_strtod_l+0x82>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	9307      	str	r3, [sp, #28]
 8007bf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bf6:	220a      	movs	r2, #10
 8007bf8:	9308      	str	r3, [sp, #32]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	469b      	mov	fp, r3
 8007bfe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007c02:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007c04:	7805      	ldrb	r5, [r0, #0]
 8007c06:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007c0a:	b2d9      	uxtb	r1, r3
 8007c0c:	2909      	cmp	r1, #9
 8007c0e:	d926      	bls.n	8007c5e <_strtod_l+0x1ae>
 8007c10:	4622      	mov	r2, r4
 8007c12:	4639      	mov	r1, r7
 8007c14:	f002 ff04 	bl	800aa20 <strncmp>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d032      	beq.n	8007c82 <_strtod_l+0x1d2>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	462b      	mov	r3, r5
 8007c20:	465c      	mov	r4, fp
 8007c22:	4602      	mov	r2, r0
 8007c24:	9004      	str	r0, [sp, #16]
 8007c26:	2b65      	cmp	r3, #101	; 0x65
 8007c28:	d001      	beq.n	8007c2e <_strtod_l+0x17e>
 8007c2a:	2b45      	cmp	r3, #69	; 0x45
 8007c2c:	d113      	bne.n	8007c56 <_strtod_l+0x1a6>
 8007c2e:	b91c      	cbnz	r4, 8007c38 <_strtod_l+0x188>
 8007c30:	9b07      	ldr	r3, [sp, #28]
 8007c32:	4303      	orrs	r3, r0
 8007c34:	d099      	beq.n	8007b6a <_strtod_l+0xba>
 8007c36:	2400      	movs	r4, #0
 8007c38:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007c3a:	1c73      	adds	r3, r6, #1
 8007c3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c3e:	7873      	ldrb	r3, [r6, #1]
 8007c40:	2b2b      	cmp	r3, #43	; 0x2b
 8007c42:	d078      	beq.n	8007d36 <_strtod_l+0x286>
 8007c44:	2b2d      	cmp	r3, #45	; 0x2d
 8007c46:	d07b      	beq.n	8007d40 <_strtod_l+0x290>
 8007c48:	2700      	movs	r7, #0
 8007c4a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007c4e:	2909      	cmp	r1, #9
 8007c50:	f240 8082 	bls.w	8007d58 <_strtod_l+0x2a8>
 8007c54:	961b      	str	r6, [sp, #108]	; 0x6c
 8007c56:	2500      	movs	r5, #0
 8007c58:	e09e      	b.n	8007d98 <_strtod_l+0x2e8>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e7c9      	b.n	8007bf2 <_strtod_l+0x142>
 8007c5e:	f1bb 0f08 	cmp.w	fp, #8
 8007c62:	bfd5      	itete	le
 8007c64:	9906      	ldrle	r1, [sp, #24]
 8007c66:	9905      	ldrgt	r1, [sp, #20]
 8007c68:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007c70:	f100 0001 	add.w	r0, r0, #1
 8007c74:	bfd4      	ite	le
 8007c76:	9306      	strle	r3, [sp, #24]
 8007c78:	9305      	strgt	r3, [sp, #20]
 8007c7a:	f10b 0b01 	add.w	fp, fp, #1
 8007c7e:	901b      	str	r0, [sp, #108]	; 0x6c
 8007c80:	e7bf      	b.n	8007c02 <_strtod_l+0x152>
 8007c82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c84:	191a      	adds	r2, r3, r4
 8007c86:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c88:	5d1b      	ldrb	r3, [r3, r4]
 8007c8a:	f1bb 0f00 	cmp.w	fp, #0
 8007c8e:	d036      	beq.n	8007cfe <_strtod_l+0x24e>
 8007c90:	465c      	mov	r4, fp
 8007c92:	9004      	str	r0, [sp, #16]
 8007c94:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007c98:	2a09      	cmp	r2, #9
 8007c9a:	d912      	bls.n	8007cc2 <_strtod_l+0x212>
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	e7c2      	b.n	8007c26 <_strtod_l+0x176>
 8007ca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b30      	cmp	r3, #48	; 0x30
 8007cac:	d0f8      	beq.n	8007ca0 <_strtod_l+0x1f0>
 8007cae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007cb2:	2a08      	cmp	r2, #8
 8007cb4:	f200 84dc 	bhi.w	8008670 <_strtod_l+0xbc0>
 8007cb8:	9004      	str	r0, [sp, #16]
 8007cba:	2000      	movs	r0, #0
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007cc0:	9208      	str	r2, [sp, #32]
 8007cc2:	3b30      	subs	r3, #48	; 0x30
 8007cc4:	f100 0201 	add.w	r2, r0, #1
 8007cc8:	d013      	beq.n	8007cf2 <_strtod_l+0x242>
 8007cca:	9904      	ldr	r1, [sp, #16]
 8007ccc:	1905      	adds	r5, r0, r4
 8007cce:	4411      	add	r1, r2
 8007cd0:	9104      	str	r1, [sp, #16]
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	210a      	movs	r1, #10
 8007cd6:	42aa      	cmp	r2, r5
 8007cd8:	d113      	bne.n	8007d02 <_strtod_l+0x252>
 8007cda:	1822      	adds	r2, r4, r0
 8007cdc:	2a08      	cmp	r2, #8
 8007cde:	f104 0401 	add.w	r4, r4, #1
 8007ce2:	4404      	add	r4, r0
 8007ce4:	dc1b      	bgt.n	8007d1e <_strtod_l+0x26e>
 8007ce6:	220a      	movs	r2, #10
 8007ce8:	9906      	ldr	r1, [sp, #24]
 8007cea:	fb02 3301 	mla	r3, r2, r1, r3
 8007cee:	9306      	str	r3, [sp, #24]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	1c59      	adds	r1, r3, #1
 8007cf8:	911b      	str	r1, [sp, #108]	; 0x6c
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	e7ca      	b.n	8007c94 <_strtod_l+0x1e4>
 8007cfe:	4658      	mov	r0, fp
 8007d00:	e7d3      	b.n	8007caa <_strtod_l+0x1fa>
 8007d02:	2a08      	cmp	r2, #8
 8007d04:	dc04      	bgt.n	8007d10 <_strtod_l+0x260>
 8007d06:	9f06      	ldr	r7, [sp, #24]
 8007d08:	434f      	muls	r7, r1
 8007d0a:	9706      	str	r7, [sp, #24]
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	e7e2      	b.n	8007cd6 <_strtod_l+0x226>
 8007d10:	1c57      	adds	r7, r2, #1
 8007d12:	2f10      	cmp	r7, #16
 8007d14:	bfde      	ittt	le
 8007d16:	9f05      	ldrle	r7, [sp, #20]
 8007d18:	434f      	mulle	r7, r1
 8007d1a:	9705      	strle	r7, [sp, #20]
 8007d1c:	e7f6      	b.n	8007d0c <_strtod_l+0x25c>
 8007d1e:	2c10      	cmp	r4, #16
 8007d20:	bfdf      	itttt	le
 8007d22:	220a      	movle	r2, #10
 8007d24:	9905      	ldrle	r1, [sp, #20]
 8007d26:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d2a:	9305      	strle	r3, [sp, #20]
 8007d2c:	e7e0      	b.n	8007cf0 <_strtod_l+0x240>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	2201      	movs	r2, #1
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	e77c      	b.n	8007c30 <_strtod_l+0x180>
 8007d36:	2700      	movs	r7, #0
 8007d38:	1cb3      	adds	r3, r6, #2
 8007d3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d3c:	78b3      	ldrb	r3, [r6, #2]
 8007d3e:	e784      	b.n	8007c4a <_strtod_l+0x19a>
 8007d40:	2701      	movs	r7, #1
 8007d42:	e7f9      	b.n	8007d38 <_strtod_l+0x288>
 8007d44:	0800e820 	.word	0x0800e820
 8007d48:	0800e5cc 	.word	0x0800e5cc
 8007d4c:	7ff00000 	.word	0x7ff00000
 8007d50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d52:	1c59      	adds	r1, r3, #1
 8007d54:	911b      	str	r1, [sp, #108]	; 0x6c
 8007d56:	785b      	ldrb	r3, [r3, #1]
 8007d58:	2b30      	cmp	r3, #48	; 0x30
 8007d5a:	d0f9      	beq.n	8007d50 <_strtod_l+0x2a0>
 8007d5c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007d60:	2908      	cmp	r1, #8
 8007d62:	f63f af78 	bhi.w	8007c56 <_strtod_l+0x1a6>
 8007d66:	f04f 0e0a 	mov.w	lr, #10
 8007d6a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007d6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d70:	9309      	str	r3, [sp, #36]	; 0x24
 8007d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d74:	1c59      	adds	r1, r3, #1
 8007d76:	911b      	str	r1, [sp, #108]	; 0x6c
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8007d7e:	2d09      	cmp	r5, #9
 8007d80:	d935      	bls.n	8007dee <_strtod_l+0x33e>
 8007d82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007d84:	1b49      	subs	r1, r1, r5
 8007d86:	2908      	cmp	r1, #8
 8007d88:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007d8c:	dc02      	bgt.n	8007d94 <_strtod_l+0x2e4>
 8007d8e:	4565      	cmp	r5, ip
 8007d90:	bfa8      	it	ge
 8007d92:	4665      	movge	r5, ip
 8007d94:	b107      	cbz	r7, 8007d98 <_strtod_l+0x2e8>
 8007d96:	426d      	negs	r5, r5
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	d14c      	bne.n	8007e36 <_strtod_l+0x386>
 8007d9c:	9907      	ldr	r1, [sp, #28]
 8007d9e:	4301      	orrs	r1, r0
 8007da0:	f47f aec7 	bne.w	8007b32 <_strtod_l+0x82>
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	f47f aee0 	bne.w	8007b6a <_strtod_l+0xba>
 8007daa:	2b69      	cmp	r3, #105	; 0x69
 8007dac:	d026      	beq.n	8007dfc <_strtod_l+0x34c>
 8007dae:	dc23      	bgt.n	8007df8 <_strtod_l+0x348>
 8007db0:	2b49      	cmp	r3, #73	; 0x49
 8007db2:	d023      	beq.n	8007dfc <_strtod_l+0x34c>
 8007db4:	2b4e      	cmp	r3, #78	; 0x4e
 8007db6:	f47f aed8 	bne.w	8007b6a <_strtod_l+0xba>
 8007dba:	499c      	ldr	r1, [pc, #624]	; (800802c <_strtod_l+0x57c>)
 8007dbc:	a81b      	add	r0, sp, #108	; 0x6c
 8007dbe:	f001 fe67 	bl	8009a90 <__match>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f43f aed1 	beq.w	8007b6a <_strtod_l+0xba>
 8007dc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b28      	cmp	r3, #40	; 0x28
 8007dce:	d12c      	bne.n	8007e2a <_strtod_l+0x37a>
 8007dd0:	4997      	ldr	r1, [pc, #604]	; (8008030 <_strtod_l+0x580>)
 8007dd2:	aa1e      	add	r2, sp, #120	; 0x78
 8007dd4:	a81b      	add	r0, sp, #108	; 0x6c
 8007dd6:	f001 fe6f 	bl	8009ab8 <__hexnan>
 8007dda:	2805      	cmp	r0, #5
 8007ddc:	d125      	bne.n	8007e2a <_strtod_l+0x37a>
 8007dde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007de0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007de4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007de8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007dec:	e6a1      	b.n	8007b32 <_strtod_l+0x82>
 8007dee:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8007df2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007df6:	e7bc      	b.n	8007d72 <_strtod_l+0x2c2>
 8007df8:	2b6e      	cmp	r3, #110	; 0x6e
 8007dfa:	e7dc      	b.n	8007db6 <_strtod_l+0x306>
 8007dfc:	498d      	ldr	r1, [pc, #564]	; (8008034 <_strtod_l+0x584>)
 8007dfe:	a81b      	add	r0, sp, #108	; 0x6c
 8007e00:	f001 fe46 	bl	8009a90 <__match>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	f43f aeb0 	beq.w	8007b6a <_strtod_l+0xba>
 8007e0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e0c:	498a      	ldr	r1, [pc, #552]	; (8008038 <_strtod_l+0x588>)
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	a81b      	add	r0, sp, #108	; 0x6c
 8007e12:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e14:	f001 fe3c 	bl	8009a90 <__match>
 8007e18:	b910      	cbnz	r0, 8007e20 <_strtod_l+0x370>
 8007e1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e20:	f04f 0800 	mov.w	r8, #0
 8007e24:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8008048 <_strtod_l+0x598>
 8007e28:	e683      	b.n	8007b32 <_strtod_l+0x82>
 8007e2a:	4884      	ldr	r0, [pc, #528]	; (800803c <_strtod_l+0x58c>)
 8007e2c:	f002 fde2 	bl	800a9f4 <nan>
 8007e30:	4680      	mov	r8, r0
 8007e32:	4689      	mov	r9, r1
 8007e34:	e67d      	b.n	8007b32 <_strtod_l+0x82>
 8007e36:	9b04      	ldr	r3, [sp, #16]
 8007e38:	f1bb 0f00 	cmp.w	fp, #0
 8007e3c:	bf08      	it	eq
 8007e3e:	46a3      	moveq	fp, r4
 8007e40:	1aeb      	subs	r3, r5, r3
 8007e42:	2c10      	cmp	r4, #16
 8007e44:	9806      	ldr	r0, [sp, #24]
 8007e46:	4626      	mov	r6, r4
 8007e48:	9307      	str	r3, [sp, #28]
 8007e4a:	bfa8      	it	ge
 8007e4c:	2610      	movge	r6, #16
 8007e4e:	f7f8 fac9 	bl	80003e4 <__aeabi_ui2d>
 8007e52:	2c09      	cmp	r4, #9
 8007e54:	4680      	mov	r8, r0
 8007e56:	4689      	mov	r9, r1
 8007e58:	dd13      	ble.n	8007e82 <_strtod_l+0x3d2>
 8007e5a:	4b79      	ldr	r3, [pc, #484]	; (8008040 <_strtod_l+0x590>)
 8007e5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e64:	f7f8 fb38 	bl	80004d8 <__aeabi_dmul>
 8007e68:	4680      	mov	r8, r0
 8007e6a:	9805      	ldr	r0, [sp, #20]
 8007e6c:	4689      	mov	r9, r1
 8007e6e:	f7f8 fab9 	bl	80003e4 <__aeabi_ui2d>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4640      	mov	r0, r8
 8007e78:	4649      	mov	r1, r9
 8007e7a:	f7f8 f977 	bl	800016c <__adddf3>
 8007e7e:	4680      	mov	r8, r0
 8007e80:	4689      	mov	r9, r1
 8007e82:	2c0f      	cmp	r4, #15
 8007e84:	dc36      	bgt.n	8007ef4 <_strtod_l+0x444>
 8007e86:	9b07      	ldr	r3, [sp, #28]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f43f ae52 	beq.w	8007b32 <_strtod_l+0x82>
 8007e8e:	dd22      	ble.n	8007ed6 <_strtod_l+0x426>
 8007e90:	2b16      	cmp	r3, #22
 8007e92:	dc09      	bgt.n	8007ea8 <_strtod_l+0x3f8>
 8007e94:	4c6a      	ldr	r4, [pc, #424]	; (8008040 <_strtod_l+0x590>)
 8007e96:	4642      	mov	r2, r8
 8007e98:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007ea2:	f7f8 fb19 	bl	80004d8 <__aeabi_dmul>
 8007ea6:	e7c3      	b.n	8007e30 <_strtod_l+0x380>
 8007ea8:	9a07      	ldr	r2, [sp, #28]
 8007eaa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	db20      	blt.n	8007ef4 <_strtod_l+0x444>
 8007eb2:	4d63      	ldr	r5, [pc, #396]	; (8008040 <_strtod_l+0x590>)
 8007eb4:	f1c4 040f 	rsb	r4, r4, #15
 8007eb8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec2:	464b      	mov	r3, r9
 8007ec4:	f7f8 fb08 	bl	80004d8 <__aeabi_dmul>
 8007ec8:	9b07      	ldr	r3, [sp, #28]
 8007eca:	1b1c      	subs	r4, r3, r4
 8007ecc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ed4:	e7e5      	b.n	8007ea2 <_strtod_l+0x3f2>
 8007ed6:	9b07      	ldr	r3, [sp, #28]
 8007ed8:	3316      	adds	r3, #22
 8007eda:	db0b      	blt.n	8007ef4 <_strtod_l+0x444>
 8007edc:	9b04      	ldr	r3, [sp, #16]
 8007ede:	4a58      	ldr	r2, [pc, #352]	; (8008040 <_strtod_l+0x590>)
 8007ee0:	1b5d      	subs	r5, r3, r5
 8007ee2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007eec:	4649      	mov	r1, r9
 8007eee:	f7f8 fc1d 	bl	800072c <__aeabi_ddiv>
 8007ef2:	e79d      	b.n	8007e30 <_strtod_l+0x380>
 8007ef4:	9b07      	ldr	r3, [sp, #28]
 8007ef6:	1ba6      	subs	r6, r4, r6
 8007ef8:	441e      	add	r6, r3
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	dd71      	ble.n	8007fe2 <_strtod_l+0x532>
 8007efe:	f016 030f 	ands.w	r3, r6, #15
 8007f02:	d00a      	beq.n	8007f1a <_strtod_l+0x46a>
 8007f04:	494e      	ldr	r1, [pc, #312]	; (8008040 <_strtod_l+0x590>)
 8007f06:	4642      	mov	r2, r8
 8007f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f10:	464b      	mov	r3, r9
 8007f12:	f7f8 fae1 	bl	80004d8 <__aeabi_dmul>
 8007f16:	4680      	mov	r8, r0
 8007f18:	4689      	mov	r9, r1
 8007f1a:	f036 060f 	bics.w	r6, r6, #15
 8007f1e:	d050      	beq.n	8007fc2 <_strtod_l+0x512>
 8007f20:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007f24:	dd27      	ble.n	8007f76 <_strtod_l+0x4c6>
 8007f26:	f04f 0b00 	mov.w	fp, #0
 8007f2a:	f8cd b010 	str.w	fp, [sp, #16]
 8007f2e:	f8cd b020 	str.w	fp, [sp, #32]
 8007f32:	f8cd b018 	str.w	fp, [sp, #24]
 8007f36:	2322      	movs	r3, #34	; 0x22
 8007f38:	f04f 0800 	mov.w	r8, #0
 8007f3c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008048 <_strtod_l+0x598>
 8007f40:	f8ca 3000 	str.w	r3, [sl]
 8007f44:	9b08      	ldr	r3, [sp, #32]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f43f adf3 	beq.w	8007b32 <_strtod_l+0x82>
 8007f4c:	4650      	mov	r0, sl
 8007f4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f50:	f001 fec8 	bl	8009ce4 <_Bfree>
 8007f54:	4650      	mov	r0, sl
 8007f56:	9906      	ldr	r1, [sp, #24]
 8007f58:	f001 fec4 	bl	8009ce4 <_Bfree>
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	9904      	ldr	r1, [sp, #16]
 8007f60:	f001 fec0 	bl	8009ce4 <_Bfree>
 8007f64:	4650      	mov	r0, sl
 8007f66:	9908      	ldr	r1, [sp, #32]
 8007f68:	f001 febc 	bl	8009ce4 <_Bfree>
 8007f6c:	4659      	mov	r1, fp
 8007f6e:	4650      	mov	r0, sl
 8007f70:	f001 feb8 	bl	8009ce4 <_Bfree>
 8007f74:	e5dd      	b.n	8007b32 <_strtod_l+0x82>
 8007f76:	2300      	movs	r3, #0
 8007f78:	4640      	mov	r0, r8
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	461f      	mov	r7, r3
 8007f7e:	1136      	asrs	r6, r6, #4
 8007f80:	2e01      	cmp	r6, #1
 8007f82:	dc21      	bgt.n	8007fc8 <_strtod_l+0x518>
 8007f84:	b10b      	cbz	r3, 8007f8a <_strtod_l+0x4da>
 8007f86:	4680      	mov	r8, r0
 8007f88:	4689      	mov	r9, r1
 8007f8a:	4b2e      	ldr	r3, [pc, #184]	; (8008044 <_strtod_l+0x594>)
 8007f8c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007f90:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007f94:	4642      	mov	r2, r8
 8007f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f9a:	464b      	mov	r3, r9
 8007f9c:	f7f8 fa9c 	bl	80004d8 <__aeabi_dmul>
 8007fa0:	4b29      	ldr	r3, [pc, #164]	; (8008048 <_strtod_l+0x598>)
 8007fa2:	460a      	mov	r2, r1
 8007fa4:	400b      	ands	r3, r1
 8007fa6:	4929      	ldr	r1, [pc, #164]	; (800804c <_strtod_l+0x59c>)
 8007fa8:	4680      	mov	r8, r0
 8007faa:	428b      	cmp	r3, r1
 8007fac:	d8bb      	bhi.n	8007f26 <_strtod_l+0x476>
 8007fae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007fb2:	428b      	cmp	r3, r1
 8007fb4:	bf86      	itte	hi
 8007fb6:	f04f 38ff 	movhi.w	r8, #4294967295
 8007fba:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008050 <_strtod_l+0x5a0>
 8007fbe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9305      	str	r3, [sp, #20]
 8007fc6:	e07e      	b.n	80080c6 <_strtod_l+0x616>
 8007fc8:	07f2      	lsls	r2, r6, #31
 8007fca:	d507      	bpl.n	8007fdc <_strtod_l+0x52c>
 8007fcc:	4b1d      	ldr	r3, [pc, #116]	; (8008044 <_strtod_l+0x594>)
 8007fce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	f7f8 fa7f 	bl	80004d8 <__aeabi_dmul>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	3701      	adds	r7, #1
 8007fde:	1076      	asrs	r6, r6, #1
 8007fe0:	e7ce      	b.n	8007f80 <_strtod_l+0x4d0>
 8007fe2:	d0ee      	beq.n	8007fc2 <_strtod_l+0x512>
 8007fe4:	4276      	negs	r6, r6
 8007fe6:	f016 020f 	ands.w	r2, r6, #15
 8007fea:	d00a      	beq.n	8008002 <_strtod_l+0x552>
 8007fec:	4b14      	ldr	r3, [pc, #80]	; (8008040 <_strtod_l+0x590>)
 8007fee:	4640      	mov	r0, r8
 8007ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	f7f8 fb97 	bl	800072c <__aeabi_ddiv>
 8007ffe:	4680      	mov	r8, r0
 8008000:	4689      	mov	r9, r1
 8008002:	1136      	asrs	r6, r6, #4
 8008004:	d0dd      	beq.n	8007fc2 <_strtod_l+0x512>
 8008006:	2e1f      	cmp	r6, #31
 8008008:	dd24      	ble.n	8008054 <_strtod_l+0x5a4>
 800800a:	f04f 0b00 	mov.w	fp, #0
 800800e:	f8cd b010 	str.w	fp, [sp, #16]
 8008012:	f8cd b020 	str.w	fp, [sp, #32]
 8008016:	f8cd b018 	str.w	fp, [sp, #24]
 800801a:	2322      	movs	r3, #34	; 0x22
 800801c:	f04f 0800 	mov.w	r8, #0
 8008020:	f04f 0900 	mov.w	r9, #0
 8008024:	f8ca 3000 	str.w	r3, [sl]
 8008028:	e78c      	b.n	8007f44 <_strtod_l+0x494>
 800802a:	bf00      	nop
 800802c:	0800e59d 	.word	0x0800e59d
 8008030:	0800e5e0 	.word	0x0800e5e0
 8008034:	0800e595 	.word	0x0800e595
 8008038:	0800e724 	.word	0x0800e724
 800803c:	0800e9e0 	.word	0x0800e9e0
 8008040:	0800e8c0 	.word	0x0800e8c0
 8008044:	0800e898 	.word	0x0800e898
 8008048:	7ff00000 	.word	0x7ff00000
 800804c:	7ca00000 	.word	0x7ca00000
 8008050:	7fefffff 	.word	0x7fefffff
 8008054:	f016 0310 	ands.w	r3, r6, #16
 8008058:	bf18      	it	ne
 800805a:	236a      	movne	r3, #106	; 0x6a
 800805c:	4640      	mov	r0, r8
 800805e:	9305      	str	r3, [sp, #20]
 8008060:	4649      	mov	r1, r9
 8008062:	2300      	movs	r3, #0
 8008064:	4fb2      	ldr	r7, [pc, #712]	; (8008330 <_strtod_l+0x880>)
 8008066:	07f2      	lsls	r2, r6, #31
 8008068:	d504      	bpl.n	8008074 <_strtod_l+0x5c4>
 800806a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800806e:	f7f8 fa33 	bl	80004d8 <__aeabi_dmul>
 8008072:	2301      	movs	r3, #1
 8008074:	1076      	asrs	r6, r6, #1
 8008076:	f107 0708 	add.w	r7, r7, #8
 800807a:	d1f4      	bne.n	8008066 <_strtod_l+0x5b6>
 800807c:	b10b      	cbz	r3, 8008082 <_strtod_l+0x5d2>
 800807e:	4680      	mov	r8, r0
 8008080:	4689      	mov	r9, r1
 8008082:	9b05      	ldr	r3, [sp, #20]
 8008084:	b1bb      	cbz	r3, 80080b6 <_strtod_l+0x606>
 8008086:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800808a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800808e:	2b00      	cmp	r3, #0
 8008090:	4649      	mov	r1, r9
 8008092:	dd10      	ble.n	80080b6 <_strtod_l+0x606>
 8008094:	2b1f      	cmp	r3, #31
 8008096:	f340 812b 	ble.w	80082f0 <_strtod_l+0x840>
 800809a:	2b34      	cmp	r3, #52	; 0x34
 800809c:	bfd8      	it	le
 800809e:	f04f 32ff 	movle.w	r2, #4294967295
 80080a2:	f04f 0800 	mov.w	r8, #0
 80080a6:	bfcf      	iteee	gt
 80080a8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80080ac:	3b20      	suble	r3, #32
 80080ae:	fa02 f303 	lslle.w	r3, r2, r3
 80080b2:	ea03 0901 	andle.w	r9, r3, r1
 80080b6:	2200      	movs	r2, #0
 80080b8:	2300      	movs	r3, #0
 80080ba:	4640      	mov	r0, r8
 80080bc:	4649      	mov	r1, r9
 80080be:	f7f8 fc73 	bl	80009a8 <__aeabi_dcmpeq>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d1a1      	bne.n	800800a <_strtod_l+0x55a>
 80080c6:	9b06      	ldr	r3, [sp, #24]
 80080c8:	465a      	mov	r2, fp
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	4650      	mov	r0, sl
 80080ce:	4623      	mov	r3, r4
 80080d0:	9908      	ldr	r1, [sp, #32]
 80080d2:	f001 fe73 	bl	8009dbc <__s2b>
 80080d6:	9008      	str	r0, [sp, #32]
 80080d8:	2800      	cmp	r0, #0
 80080da:	f43f af24 	beq.w	8007f26 <_strtod_l+0x476>
 80080de:	9b04      	ldr	r3, [sp, #16]
 80080e0:	f04f 0b00 	mov.w	fp, #0
 80080e4:	1b5d      	subs	r5, r3, r5
 80080e6:	9b07      	ldr	r3, [sp, #28]
 80080e8:	f8cd b010 	str.w	fp, [sp, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bfb4      	ite	lt
 80080f0:	462b      	movlt	r3, r5
 80080f2:	2300      	movge	r3, #0
 80080f4:	930e      	str	r3, [sp, #56]	; 0x38
 80080f6:	9b07      	ldr	r3, [sp, #28]
 80080f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80080fc:	9316      	str	r3, [sp, #88]	; 0x58
 80080fe:	9b08      	ldr	r3, [sp, #32]
 8008100:	4650      	mov	r0, sl
 8008102:	6859      	ldr	r1, [r3, #4]
 8008104:	f001 fdae 	bl	8009c64 <_Balloc>
 8008108:	9006      	str	r0, [sp, #24]
 800810a:	2800      	cmp	r0, #0
 800810c:	f43f af13 	beq.w	8007f36 <_strtod_l+0x486>
 8008110:	9b08      	ldr	r3, [sp, #32]
 8008112:	300c      	adds	r0, #12
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	f103 010c 	add.w	r1, r3, #12
 800811a:	3202      	adds	r2, #2
 800811c:	0092      	lsls	r2, r2, #2
 800811e:	f001 fd93 	bl	8009c48 <memcpy>
 8008122:	ab1e      	add	r3, sp, #120	; 0x78
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	ab1d      	add	r3, sp, #116	; 0x74
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	4642      	mov	r2, r8
 800812c:	464b      	mov	r3, r9
 800812e:	4650      	mov	r0, sl
 8008130:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8008134:	f002 f980 	bl	800a438 <__d2b>
 8008138:	901c      	str	r0, [sp, #112]	; 0x70
 800813a:	2800      	cmp	r0, #0
 800813c:	f43f aefb 	beq.w	8007f36 <_strtod_l+0x486>
 8008140:	2101      	movs	r1, #1
 8008142:	4650      	mov	r0, sl
 8008144:	f001 fed2 	bl	8009eec <__i2b>
 8008148:	4603      	mov	r3, r0
 800814a:	9004      	str	r0, [sp, #16]
 800814c:	2800      	cmp	r0, #0
 800814e:	f43f aef2 	beq.w	8007f36 <_strtod_l+0x486>
 8008152:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008154:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008156:	2d00      	cmp	r5, #0
 8008158:	bfab      	itete	ge
 800815a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800815c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800815e:	18ee      	addge	r6, r5, r3
 8008160:	1b5c      	sublt	r4, r3, r5
 8008162:	9b05      	ldr	r3, [sp, #20]
 8008164:	bfa8      	it	ge
 8008166:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008168:	eba5 0503 	sub.w	r5, r5, r3
 800816c:	4415      	add	r5, r2
 800816e:	4b71      	ldr	r3, [pc, #452]	; (8008334 <_strtod_l+0x884>)
 8008170:	f105 35ff 	add.w	r5, r5, #4294967295
 8008174:	bfb8      	it	lt
 8008176:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008178:	429d      	cmp	r5, r3
 800817a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800817e:	f280 80c9 	bge.w	8008314 <_strtod_l+0x864>
 8008182:	1b5b      	subs	r3, r3, r5
 8008184:	2b1f      	cmp	r3, #31
 8008186:	f04f 0701 	mov.w	r7, #1
 800818a:	eba2 0203 	sub.w	r2, r2, r3
 800818e:	f300 80b6 	bgt.w	80082fe <_strtod_l+0x84e>
 8008192:	2500      	movs	r5, #0
 8008194:	fa07 f303 	lsl.w	r3, r7, r3
 8008198:	930f      	str	r3, [sp, #60]	; 0x3c
 800819a:	18b7      	adds	r7, r6, r2
 800819c:	9b05      	ldr	r3, [sp, #20]
 800819e:	42be      	cmp	r6, r7
 80081a0:	4414      	add	r4, r2
 80081a2:	441c      	add	r4, r3
 80081a4:	4633      	mov	r3, r6
 80081a6:	bfa8      	it	ge
 80081a8:	463b      	movge	r3, r7
 80081aa:	42a3      	cmp	r3, r4
 80081ac:	bfa8      	it	ge
 80081ae:	4623      	movge	r3, r4
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bfc2      	ittt	gt
 80081b4:	1aff      	subgt	r7, r7, r3
 80081b6:	1ae4      	subgt	r4, r4, r3
 80081b8:	1af6      	subgt	r6, r6, r3
 80081ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dd17      	ble.n	80081f0 <_strtod_l+0x740>
 80081c0:	461a      	mov	r2, r3
 80081c2:	4650      	mov	r0, sl
 80081c4:	9904      	ldr	r1, [sp, #16]
 80081c6:	f001 ff4b 	bl	800a060 <__pow5mult>
 80081ca:	9004      	str	r0, [sp, #16]
 80081cc:	2800      	cmp	r0, #0
 80081ce:	f43f aeb2 	beq.w	8007f36 <_strtod_l+0x486>
 80081d2:	4601      	mov	r1, r0
 80081d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80081d6:	4650      	mov	r0, sl
 80081d8:	f001 fe9e 	bl	8009f18 <__multiply>
 80081dc:	9009      	str	r0, [sp, #36]	; 0x24
 80081de:	2800      	cmp	r0, #0
 80081e0:	f43f aea9 	beq.w	8007f36 <_strtod_l+0x486>
 80081e4:	4650      	mov	r0, sl
 80081e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081e8:	f001 fd7c 	bl	8009ce4 <_Bfree>
 80081ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ee:	931c      	str	r3, [sp, #112]	; 0x70
 80081f0:	2f00      	cmp	r7, #0
 80081f2:	f300 8093 	bgt.w	800831c <_strtod_l+0x86c>
 80081f6:	9b07      	ldr	r3, [sp, #28]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dd08      	ble.n	800820e <_strtod_l+0x75e>
 80081fc:	4650      	mov	r0, sl
 80081fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008200:	9906      	ldr	r1, [sp, #24]
 8008202:	f001 ff2d 	bl	800a060 <__pow5mult>
 8008206:	9006      	str	r0, [sp, #24]
 8008208:	2800      	cmp	r0, #0
 800820a:	f43f ae94 	beq.w	8007f36 <_strtod_l+0x486>
 800820e:	2c00      	cmp	r4, #0
 8008210:	dd08      	ble.n	8008224 <_strtod_l+0x774>
 8008212:	4622      	mov	r2, r4
 8008214:	4650      	mov	r0, sl
 8008216:	9906      	ldr	r1, [sp, #24]
 8008218:	f001 ff7c 	bl	800a114 <__lshift>
 800821c:	9006      	str	r0, [sp, #24]
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f ae89 	beq.w	8007f36 <_strtod_l+0x486>
 8008224:	2e00      	cmp	r6, #0
 8008226:	dd08      	ble.n	800823a <_strtod_l+0x78a>
 8008228:	4632      	mov	r2, r6
 800822a:	4650      	mov	r0, sl
 800822c:	9904      	ldr	r1, [sp, #16]
 800822e:	f001 ff71 	bl	800a114 <__lshift>
 8008232:	9004      	str	r0, [sp, #16]
 8008234:	2800      	cmp	r0, #0
 8008236:	f43f ae7e 	beq.w	8007f36 <_strtod_l+0x486>
 800823a:	4650      	mov	r0, sl
 800823c:	9a06      	ldr	r2, [sp, #24]
 800823e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008240:	f001 fff0 	bl	800a224 <__mdiff>
 8008244:	4683      	mov	fp, r0
 8008246:	2800      	cmp	r0, #0
 8008248:	f43f ae75 	beq.w	8007f36 <_strtod_l+0x486>
 800824c:	2400      	movs	r4, #0
 800824e:	68c3      	ldr	r3, [r0, #12]
 8008250:	9904      	ldr	r1, [sp, #16]
 8008252:	60c4      	str	r4, [r0, #12]
 8008254:	930d      	str	r3, [sp, #52]	; 0x34
 8008256:	f001 ffc9 	bl	800a1ec <__mcmp>
 800825a:	42a0      	cmp	r0, r4
 800825c:	da70      	bge.n	8008340 <_strtod_l+0x890>
 800825e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008260:	ea53 0308 	orrs.w	r3, r3, r8
 8008264:	f040 8096 	bne.w	8008394 <_strtod_l+0x8e4>
 8008268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800826c:	2b00      	cmp	r3, #0
 800826e:	f040 8091 	bne.w	8008394 <_strtod_l+0x8e4>
 8008272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008276:	0d1b      	lsrs	r3, r3, #20
 8008278:	051b      	lsls	r3, r3, #20
 800827a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800827e:	f240 8089 	bls.w	8008394 <_strtod_l+0x8e4>
 8008282:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008286:	b923      	cbnz	r3, 8008292 <_strtod_l+0x7e2>
 8008288:	f8db 3010 	ldr.w	r3, [fp, #16]
 800828c:	2b01      	cmp	r3, #1
 800828e:	f340 8081 	ble.w	8008394 <_strtod_l+0x8e4>
 8008292:	4659      	mov	r1, fp
 8008294:	2201      	movs	r2, #1
 8008296:	4650      	mov	r0, sl
 8008298:	f001 ff3c 	bl	800a114 <__lshift>
 800829c:	9904      	ldr	r1, [sp, #16]
 800829e:	4683      	mov	fp, r0
 80082a0:	f001 ffa4 	bl	800a1ec <__mcmp>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	dd75      	ble.n	8008394 <_strtod_l+0x8e4>
 80082a8:	9905      	ldr	r1, [sp, #20]
 80082aa:	464b      	mov	r3, r9
 80082ac:	4a22      	ldr	r2, [pc, #136]	; (8008338 <_strtod_l+0x888>)
 80082ae:	2900      	cmp	r1, #0
 80082b0:	f000 8091 	beq.w	80083d6 <_strtod_l+0x926>
 80082b4:	ea02 0109 	and.w	r1, r2, r9
 80082b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80082bc:	f300 808b 	bgt.w	80083d6 <_strtod_l+0x926>
 80082c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082c4:	f77f aea9 	ble.w	800801a <_strtod_l+0x56a>
 80082c8:	2300      	movs	r3, #0
 80082ca:	4a1c      	ldr	r2, [pc, #112]	; (800833c <_strtod_l+0x88c>)
 80082cc:	4640      	mov	r0, r8
 80082ce:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80082d2:	4649      	mov	r1, r9
 80082d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80082d8:	f7f8 f8fe 	bl	80004d8 <__aeabi_dmul>
 80082dc:	460b      	mov	r3, r1
 80082de:	4303      	orrs	r3, r0
 80082e0:	bf08      	it	eq
 80082e2:	2322      	moveq	r3, #34	; 0x22
 80082e4:	4680      	mov	r8, r0
 80082e6:	4689      	mov	r9, r1
 80082e8:	bf08      	it	eq
 80082ea:	f8ca 3000 	streq.w	r3, [sl]
 80082ee:	e62d      	b.n	8007f4c <_strtod_l+0x49c>
 80082f0:	f04f 32ff 	mov.w	r2, #4294967295
 80082f4:	fa02 f303 	lsl.w	r3, r2, r3
 80082f8:	ea03 0808 	and.w	r8, r3, r8
 80082fc:	e6db      	b.n	80080b6 <_strtod_l+0x606>
 80082fe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008302:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008306:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800830a:	35e2      	adds	r5, #226	; 0xe2
 800830c:	fa07 f505 	lsl.w	r5, r7, r5
 8008310:	970f      	str	r7, [sp, #60]	; 0x3c
 8008312:	e742      	b.n	800819a <_strtod_l+0x6ea>
 8008314:	2301      	movs	r3, #1
 8008316:	2500      	movs	r5, #0
 8008318:	930f      	str	r3, [sp, #60]	; 0x3c
 800831a:	e73e      	b.n	800819a <_strtod_l+0x6ea>
 800831c:	463a      	mov	r2, r7
 800831e:	4650      	mov	r0, sl
 8008320:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008322:	f001 fef7 	bl	800a114 <__lshift>
 8008326:	901c      	str	r0, [sp, #112]	; 0x70
 8008328:	2800      	cmp	r0, #0
 800832a:	f47f af64 	bne.w	80081f6 <_strtod_l+0x746>
 800832e:	e602      	b.n	8007f36 <_strtod_l+0x486>
 8008330:	0800e5f8 	.word	0x0800e5f8
 8008334:	fffffc02 	.word	0xfffffc02
 8008338:	7ff00000 	.word	0x7ff00000
 800833c:	39500000 	.word	0x39500000
 8008340:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008344:	d166      	bne.n	8008414 <_strtod_l+0x964>
 8008346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800834c:	b35a      	cbz	r2, 80083a6 <_strtod_l+0x8f6>
 800834e:	4a9c      	ldr	r2, [pc, #624]	; (80085c0 <_strtod_l+0xb10>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d12c      	bne.n	80083ae <_strtod_l+0x8fe>
 8008354:	9b05      	ldr	r3, [sp, #20]
 8008356:	4640      	mov	r0, r8
 8008358:	b303      	cbz	r3, 800839c <_strtod_l+0x8ec>
 800835a:	464b      	mov	r3, r9
 800835c:	4a99      	ldr	r2, [pc, #612]	; (80085c4 <_strtod_l+0xb14>)
 800835e:	f04f 31ff 	mov.w	r1, #4294967295
 8008362:	401a      	ands	r2, r3
 8008364:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008368:	d81b      	bhi.n	80083a2 <_strtod_l+0x8f2>
 800836a:	0d12      	lsrs	r2, r2, #20
 800836c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008370:	fa01 f303 	lsl.w	r3, r1, r3
 8008374:	4298      	cmp	r0, r3
 8008376:	d11a      	bne.n	80083ae <_strtod_l+0x8fe>
 8008378:	4b93      	ldr	r3, [pc, #588]	; (80085c8 <_strtod_l+0xb18>)
 800837a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800837c:	429a      	cmp	r2, r3
 800837e:	d102      	bne.n	8008386 <_strtod_l+0x8d6>
 8008380:	3001      	adds	r0, #1
 8008382:	f43f add8 	beq.w	8007f36 <_strtod_l+0x486>
 8008386:	f04f 0800 	mov.w	r8, #0
 800838a:	4b8e      	ldr	r3, [pc, #568]	; (80085c4 <_strtod_l+0xb14>)
 800838c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800838e:	401a      	ands	r2, r3
 8008390:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008394:	9b05      	ldr	r3, [sp, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d196      	bne.n	80082c8 <_strtod_l+0x818>
 800839a:	e5d7      	b.n	8007f4c <_strtod_l+0x49c>
 800839c:	f04f 33ff 	mov.w	r3, #4294967295
 80083a0:	e7e8      	b.n	8008374 <_strtod_l+0x8c4>
 80083a2:	460b      	mov	r3, r1
 80083a4:	e7e6      	b.n	8008374 <_strtod_l+0x8c4>
 80083a6:	ea53 0308 	orrs.w	r3, r3, r8
 80083aa:	f43f af7d 	beq.w	80082a8 <_strtod_l+0x7f8>
 80083ae:	b1e5      	cbz	r5, 80083ea <_strtod_l+0x93a>
 80083b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b2:	421d      	tst	r5, r3
 80083b4:	d0ee      	beq.n	8008394 <_strtod_l+0x8e4>
 80083b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b8:	4640      	mov	r0, r8
 80083ba:	4649      	mov	r1, r9
 80083bc:	9a05      	ldr	r2, [sp, #20]
 80083be:	b1c3      	cbz	r3, 80083f2 <_strtod_l+0x942>
 80083c0:	f7ff fb52 	bl	8007a68 <sulp>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083cc:	f7f7 fece 	bl	800016c <__adddf3>
 80083d0:	4680      	mov	r8, r0
 80083d2:	4689      	mov	r9, r1
 80083d4:	e7de      	b.n	8008394 <_strtod_l+0x8e4>
 80083d6:	4013      	ands	r3, r2
 80083d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083dc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80083e0:	f04f 38ff 	mov.w	r8, #4294967295
 80083e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80083e8:	e7d4      	b.n	8008394 <_strtod_l+0x8e4>
 80083ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ec:	ea13 0f08 	tst.w	r3, r8
 80083f0:	e7e0      	b.n	80083b4 <_strtod_l+0x904>
 80083f2:	f7ff fb39 	bl	8007a68 <sulp>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083fe:	f7f7 feb3 	bl	8000168 <__aeabi_dsub>
 8008402:	2200      	movs	r2, #0
 8008404:	2300      	movs	r3, #0
 8008406:	4680      	mov	r8, r0
 8008408:	4689      	mov	r9, r1
 800840a:	f7f8 facd 	bl	80009a8 <__aeabi_dcmpeq>
 800840e:	2800      	cmp	r0, #0
 8008410:	d0c0      	beq.n	8008394 <_strtod_l+0x8e4>
 8008412:	e602      	b.n	800801a <_strtod_l+0x56a>
 8008414:	4658      	mov	r0, fp
 8008416:	9904      	ldr	r1, [sp, #16]
 8008418:	f002 f86a 	bl	800a4f0 <__ratio>
 800841c:	2200      	movs	r2, #0
 800841e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008422:	4606      	mov	r6, r0
 8008424:	460f      	mov	r7, r1
 8008426:	f7f8 fad3 	bl	80009d0 <__aeabi_dcmple>
 800842a:	2800      	cmp	r0, #0
 800842c:	d075      	beq.n	800851a <_strtod_l+0xa6a>
 800842e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008430:	2b00      	cmp	r3, #0
 8008432:	d047      	beq.n	80084c4 <_strtod_l+0xa14>
 8008434:	2600      	movs	r6, #0
 8008436:	4f65      	ldr	r7, [pc, #404]	; (80085cc <_strtod_l+0xb1c>)
 8008438:	4d64      	ldr	r5, [pc, #400]	; (80085cc <_strtod_l+0xb1c>)
 800843a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008440:	0d1b      	lsrs	r3, r3, #20
 8008442:	051b      	lsls	r3, r3, #20
 8008444:	930f      	str	r3, [sp, #60]	; 0x3c
 8008446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008448:	4b61      	ldr	r3, [pc, #388]	; (80085d0 <_strtod_l+0xb20>)
 800844a:	429a      	cmp	r2, r3
 800844c:	f040 80c8 	bne.w	80085e0 <_strtod_l+0xb30>
 8008450:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008454:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845a:	4640      	mov	r0, r8
 800845c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008460:	4649      	mov	r1, r9
 8008462:	f001 ff6f 	bl	800a344 <__ulp>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	4630      	mov	r0, r6
 800846c:	4639      	mov	r1, r7
 800846e:	f7f8 f833 	bl	80004d8 <__aeabi_dmul>
 8008472:	4642      	mov	r2, r8
 8008474:	464b      	mov	r3, r9
 8008476:	f7f7 fe79 	bl	800016c <__adddf3>
 800847a:	460b      	mov	r3, r1
 800847c:	4951      	ldr	r1, [pc, #324]	; (80085c4 <_strtod_l+0xb14>)
 800847e:	4a55      	ldr	r2, [pc, #340]	; (80085d4 <_strtod_l+0xb24>)
 8008480:	4019      	ands	r1, r3
 8008482:	4291      	cmp	r1, r2
 8008484:	4680      	mov	r8, r0
 8008486:	d95e      	bls.n	8008546 <_strtod_l+0xa96>
 8008488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800848a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800848e:	4293      	cmp	r3, r2
 8008490:	d103      	bne.n	800849a <_strtod_l+0x9ea>
 8008492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008494:	3301      	adds	r3, #1
 8008496:	f43f ad4e 	beq.w	8007f36 <_strtod_l+0x486>
 800849a:	f04f 38ff 	mov.w	r8, #4294967295
 800849e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80085c8 <_strtod_l+0xb18>
 80084a2:	4650      	mov	r0, sl
 80084a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80084a6:	f001 fc1d 	bl	8009ce4 <_Bfree>
 80084aa:	4650      	mov	r0, sl
 80084ac:	9906      	ldr	r1, [sp, #24]
 80084ae:	f001 fc19 	bl	8009ce4 <_Bfree>
 80084b2:	4650      	mov	r0, sl
 80084b4:	9904      	ldr	r1, [sp, #16]
 80084b6:	f001 fc15 	bl	8009ce4 <_Bfree>
 80084ba:	4659      	mov	r1, fp
 80084bc:	4650      	mov	r0, sl
 80084be:	f001 fc11 	bl	8009ce4 <_Bfree>
 80084c2:	e61c      	b.n	80080fe <_strtod_l+0x64e>
 80084c4:	f1b8 0f00 	cmp.w	r8, #0
 80084c8:	d119      	bne.n	80084fe <_strtod_l+0xa4e>
 80084ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d0:	b9e3      	cbnz	r3, 800850c <_strtod_l+0xa5c>
 80084d2:	2200      	movs	r2, #0
 80084d4:	4630      	mov	r0, r6
 80084d6:	4639      	mov	r1, r7
 80084d8:	4b3c      	ldr	r3, [pc, #240]	; (80085cc <_strtod_l+0xb1c>)
 80084da:	f7f8 fa6f 	bl	80009bc <__aeabi_dcmplt>
 80084de:	b9c8      	cbnz	r0, 8008514 <_strtod_l+0xa64>
 80084e0:	2200      	movs	r2, #0
 80084e2:	4630      	mov	r0, r6
 80084e4:	4639      	mov	r1, r7
 80084e6:	4b3c      	ldr	r3, [pc, #240]	; (80085d8 <_strtod_l+0xb28>)
 80084e8:	f7f7 fff6 	bl	80004d8 <__aeabi_dmul>
 80084ec:	4604      	mov	r4, r0
 80084ee:	460d      	mov	r5, r1
 80084f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80084f4:	9418      	str	r4, [sp, #96]	; 0x60
 80084f6:	9319      	str	r3, [sp, #100]	; 0x64
 80084f8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80084fc:	e79d      	b.n	800843a <_strtod_l+0x98a>
 80084fe:	f1b8 0f01 	cmp.w	r8, #1
 8008502:	d103      	bne.n	800850c <_strtod_l+0xa5c>
 8008504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	f43f ad87 	beq.w	800801a <_strtod_l+0x56a>
 800850c:	2600      	movs	r6, #0
 800850e:	2400      	movs	r4, #0
 8008510:	4f32      	ldr	r7, [pc, #200]	; (80085dc <_strtod_l+0xb2c>)
 8008512:	e791      	b.n	8008438 <_strtod_l+0x988>
 8008514:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008516:	4d30      	ldr	r5, [pc, #192]	; (80085d8 <_strtod_l+0xb28>)
 8008518:	e7ea      	b.n	80084f0 <_strtod_l+0xa40>
 800851a:	4b2f      	ldr	r3, [pc, #188]	; (80085d8 <_strtod_l+0xb28>)
 800851c:	2200      	movs	r2, #0
 800851e:	4630      	mov	r0, r6
 8008520:	4639      	mov	r1, r7
 8008522:	f7f7 ffd9 	bl	80004d8 <__aeabi_dmul>
 8008526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008528:	4604      	mov	r4, r0
 800852a:	460d      	mov	r5, r1
 800852c:	b933      	cbnz	r3, 800853c <_strtod_l+0xa8c>
 800852e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008532:	9010      	str	r0, [sp, #64]	; 0x40
 8008534:	9311      	str	r3, [sp, #68]	; 0x44
 8008536:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800853a:	e77e      	b.n	800843a <_strtod_l+0x98a>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008544:	e7f7      	b.n	8008536 <_strtod_l+0xa86>
 8008546:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800854a:	9b05      	ldr	r3, [sp, #20]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1a8      	bne.n	80084a2 <_strtod_l+0x9f2>
 8008550:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008554:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008556:	0d1b      	lsrs	r3, r3, #20
 8008558:	051b      	lsls	r3, r3, #20
 800855a:	429a      	cmp	r2, r3
 800855c:	d1a1      	bne.n	80084a2 <_strtod_l+0x9f2>
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f8 fe11 	bl	8001188 <__aeabi_d2lz>
 8008566:	f7f7 ff89 	bl	800047c <__aeabi_l2d>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4620      	mov	r0, r4
 8008570:	4629      	mov	r1, r5
 8008572:	f7f7 fdf9 	bl	8000168 <__aeabi_dsub>
 8008576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800857c:	ea43 0308 	orr.w	r3, r3, r8
 8008580:	4313      	orrs	r3, r2
 8008582:	4604      	mov	r4, r0
 8008584:	460d      	mov	r5, r1
 8008586:	d066      	beq.n	8008656 <_strtod_l+0xba6>
 8008588:	a309      	add	r3, pc, #36	; (adr r3, 80085b0 <_strtod_l+0xb00>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f8 fa15 	bl	80009bc <__aeabi_dcmplt>
 8008592:	2800      	cmp	r0, #0
 8008594:	f47f acda 	bne.w	8007f4c <_strtod_l+0x49c>
 8008598:	a307      	add	r3, pc, #28	; (adr r3, 80085b8 <_strtod_l+0xb08>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	4620      	mov	r0, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	f7f8 fa29 	bl	80009f8 <__aeabi_dcmpgt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f43f af7b 	beq.w	80084a2 <_strtod_l+0x9f2>
 80085ac:	e4ce      	b.n	8007f4c <_strtod_l+0x49c>
 80085ae:	bf00      	nop
 80085b0:	94a03595 	.word	0x94a03595
 80085b4:	3fdfffff 	.word	0x3fdfffff
 80085b8:	35afe535 	.word	0x35afe535
 80085bc:	3fe00000 	.word	0x3fe00000
 80085c0:	000fffff 	.word	0x000fffff
 80085c4:	7ff00000 	.word	0x7ff00000
 80085c8:	7fefffff 	.word	0x7fefffff
 80085cc:	3ff00000 	.word	0x3ff00000
 80085d0:	7fe00000 	.word	0x7fe00000
 80085d4:	7c9fffff 	.word	0x7c9fffff
 80085d8:	3fe00000 	.word	0x3fe00000
 80085dc:	bff00000 	.word	0xbff00000
 80085e0:	9b05      	ldr	r3, [sp, #20]
 80085e2:	b313      	cbz	r3, 800862a <_strtod_l+0xb7a>
 80085e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085ea:	d81e      	bhi.n	800862a <_strtod_l+0xb7a>
 80085ec:	a326      	add	r3, pc, #152	; (adr r3, 8008688 <_strtod_l+0xbd8>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7f8 f9eb 	bl	80009d0 <__aeabi_dcmple>
 80085fa:	b190      	cbz	r0, 8008622 <_strtod_l+0xb72>
 80085fc:	4629      	mov	r1, r5
 80085fe:	4620      	mov	r0, r4
 8008600:	f7f8 fa42 	bl	8000a88 <__aeabi_d2uiz>
 8008604:	2801      	cmp	r0, #1
 8008606:	bf38      	it	cc
 8008608:	2001      	movcc	r0, #1
 800860a:	f7f7 feeb 	bl	80003e4 <__aeabi_ui2d>
 800860e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008610:	4604      	mov	r4, r0
 8008612:	460d      	mov	r5, r1
 8008614:	b9d3      	cbnz	r3, 800864c <_strtod_l+0xb9c>
 8008616:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800861a:	9012      	str	r0, [sp, #72]	; 0x48
 800861c:	9313      	str	r3, [sp, #76]	; 0x4c
 800861e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008624:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008628:	1a9f      	subs	r7, r3, r2
 800862a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800862e:	f001 fe89 	bl	800a344 <__ulp>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4630      	mov	r0, r6
 8008638:	4639      	mov	r1, r7
 800863a:	f7f7 ff4d 	bl	80004d8 <__aeabi_dmul>
 800863e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008642:	f7f7 fd93 	bl	800016c <__adddf3>
 8008646:	4680      	mov	r8, r0
 8008648:	4689      	mov	r9, r1
 800864a:	e77e      	b.n	800854a <_strtod_l+0xa9a>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008654:	e7e3      	b.n	800861e <_strtod_l+0xb6e>
 8008656:	a30e      	add	r3, pc, #56	; (adr r3, 8008690 <_strtod_l+0xbe0>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f7f8 f9ae 	bl	80009bc <__aeabi_dcmplt>
 8008660:	e7a1      	b.n	80085a6 <_strtod_l+0xaf6>
 8008662:	2300      	movs	r3, #0
 8008664:	930c      	str	r3, [sp, #48]	; 0x30
 8008666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008668:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	f7ff ba65 	b.w	8007b3a <_strtod_l+0x8a>
 8008670:	2b65      	cmp	r3, #101	; 0x65
 8008672:	f43f ab5c 	beq.w	8007d2e <_strtod_l+0x27e>
 8008676:	2b45      	cmp	r3, #69	; 0x45
 8008678:	f43f ab59 	beq.w	8007d2e <_strtod_l+0x27e>
 800867c:	2201      	movs	r2, #1
 800867e:	f7ff bb8d 	b.w	8007d9c <_strtod_l+0x2ec>
 8008682:	bf00      	nop
 8008684:	f3af 8000 	nop.w
 8008688:	ffc00000 	.word	0xffc00000
 800868c:	41dfffff 	.word	0x41dfffff
 8008690:	94a03595 	.word	0x94a03595
 8008694:	3fcfffff 	.word	0x3fcfffff

08008698 <_strtod_r>:
 8008698:	4b01      	ldr	r3, [pc, #4]	; (80086a0 <_strtod_r+0x8>)
 800869a:	f7ff ba09 	b.w	8007ab0 <_strtod_l>
 800869e:	bf00      	nop
 80086a0:	20000074 	.word	0x20000074

080086a4 <_strtol_l.isra.0>:
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086aa:	4686      	mov	lr, r0
 80086ac:	d001      	beq.n	80086b2 <_strtol_l.isra.0+0xe>
 80086ae:	2b24      	cmp	r3, #36	; 0x24
 80086b0:	d906      	bls.n	80086c0 <_strtol_l.isra.0+0x1c>
 80086b2:	f7fe fb11 	bl	8006cd8 <__errno>
 80086b6:	2316      	movs	r3, #22
 80086b8:	6003      	str	r3, [r0, #0]
 80086ba:	2000      	movs	r0, #0
 80086bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c0:	468c      	mov	ip, r1
 80086c2:	4e3a      	ldr	r6, [pc, #232]	; (80087ac <_strtol_l.isra.0+0x108>)
 80086c4:	4660      	mov	r0, ip
 80086c6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80086ca:	5da5      	ldrb	r5, [r4, r6]
 80086cc:	f015 0508 	ands.w	r5, r5, #8
 80086d0:	d1f8      	bne.n	80086c4 <_strtol_l.isra.0+0x20>
 80086d2:	2c2d      	cmp	r4, #45	; 0x2d
 80086d4:	d133      	bne.n	800873e <_strtol_l.isra.0+0x9a>
 80086d6:	f04f 0801 	mov.w	r8, #1
 80086da:	f89c 4000 	ldrb.w	r4, [ip]
 80086de:	f100 0c02 	add.w	ip, r0, #2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d05d      	beq.n	80087a2 <_strtol_l.isra.0+0xfe>
 80086e6:	2b10      	cmp	r3, #16
 80086e8:	d10c      	bne.n	8008704 <_strtol_l.isra.0+0x60>
 80086ea:	2c30      	cmp	r4, #48	; 0x30
 80086ec:	d10a      	bne.n	8008704 <_strtol_l.isra.0+0x60>
 80086ee:	f89c 0000 	ldrb.w	r0, [ip]
 80086f2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80086f6:	2858      	cmp	r0, #88	; 0x58
 80086f8:	d14e      	bne.n	8008798 <_strtol_l.isra.0+0xf4>
 80086fa:	2310      	movs	r3, #16
 80086fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008700:	f10c 0c02 	add.w	ip, ip, #2
 8008704:	2500      	movs	r5, #0
 8008706:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800870a:	3f01      	subs	r7, #1
 800870c:	fbb7 f9f3 	udiv	r9, r7, r3
 8008710:	4628      	mov	r0, r5
 8008712:	fb03 7a19 	mls	sl, r3, r9, r7
 8008716:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800871a:	2e09      	cmp	r6, #9
 800871c:	d818      	bhi.n	8008750 <_strtol_l.isra.0+0xac>
 800871e:	4634      	mov	r4, r6
 8008720:	42a3      	cmp	r3, r4
 8008722:	dd24      	ble.n	800876e <_strtol_l.isra.0+0xca>
 8008724:	2d00      	cmp	r5, #0
 8008726:	db1f      	blt.n	8008768 <_strtol_l.isra.0+0xc4>
 8008728:	4581      	cmp	r9, r0
 800872a:	d31d      	bcc.n	8008768 <_strtol_l.isra.0+0xc4>
 800872c:	d101      	bne.n	8008732 <_strtol_l.isra.0+0x8e>
 800872e:	45a2      	cmp	sl, r4
 8008730:	db1a      	blt.n	8008768 <_strtol_l.isra.0+0xc4>
 8008732:	2501      	movs	r5, #1
 8008734:	fb00 4003 	mla	r0, r0, r3, r4
 8008738:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800873c:	e7eb      	b.n	8008716 <_strtol_l.isra.0+0x72>
 800873e:	2c2b      	cmp	r4, #43	; 0x2b
 8008740:	bf08      	it	eq
 8008742:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008746:	46a8      	mov	r8, r5
 8008748:	bf08      	it	eq
 800874a:	f100 0c02 	addeq.w	ip, r0, #2
 800874e:	e7c8      	b.n	80086e2 <_strtol_l.isra.0+0x3e>
 8008750:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008754:	2e19      	cmp	r6, #25
 8008756:	d801      	bhi.n	800875c <_strtol_l.isra.0+0xb8>
 8008758:	3c37      	subs	r4, #55	; 0x37
 800875a:	e7e1      	b.n	8008720 <_strtol_l.isra.0+0x7c>
 800875c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008760:	2e19      	cmp	r6, #25
 8008762:	d804      	bhi.n	800876e <_strtol_l.isra.0+0xca>
 8008764:	3c57      	subs	r4, #87	; 0x57
 8008766:	e7db      	b.n	8008720 <_strtol_l.isra.0+0x7c>
 8008768:	f04f 35ff 	mov.w	r5, #4294967295
 800876c:	e7e4      	b.n	8008738 <_strtol_l.isra.0+0x94>
 800876e:	2d00      	cmp	r5, #0
 8008770:	da08      	bge.n	8008784 <_strtol_l.isra.0+0xe0>
 8008772:	2322      	movs	r3, #34	; 0x22
 8008774:	4638      	mov	r0, r7
 8008776:	f8ce 3000 	str.w	r3, [lr]
 800877a:	2a00      	cmp	r2, #0
 800877c:	d09e      	beq.n	80086bc <_strtol_l.isra.0+0x18>
 800877e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008782:	e007      	b.n	8008794 <_strtol_l.isra.0+0xf0>
 8008784:	f1b8 0f00 	cmp.w	r8, #0
 8008788:	d000      	beq.n	800878c <_strtol_l.isra.0+0xe8>
 800878a:	4240      	negs	r0, r0
 800878c:	2a00      	cmp	r2, #0
 800878e:	d095      	beq.n	80086bc <_strtol_l.isra.0+0x18>
 8008790:	2d00      	cmp	r5, #0
 8008792:	d1f4      	bne.n	800877e <_strtol_l.isra.0+0xda>
 8008794:	6011      	str	r1, [r2, #0]
 8008796:	e791      	b.n	80086bc <_strtol_l.isra.0+0x18>
 8008798:	2430      	movs	r4, #48	; 0x30
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1b2      	bne.n	8008704 <_strtol_l.isra.0+0x60>
 800879e:	2308      	movs	r3, #8
 80087a0:	e7b0      	b.n	8008704 <_strtol_l.isra.0+0x60>
 80087a2:	2c30      	cmp	r4, #48	; 0x30
 80087a4:	d0a3      	beq.n	80086ee <_strtol_l.isra.0+0x4a>
 80087a6:	230a      	movs	r3, #10
 80087a8:	e7ac      	b.n	8008704 <_strtol_l.isra.0+0x60>
 80087aa:	bf00      	nop
 80087ac:	0800e621 	.word	0x0800e621

080087b0 <_strtol_r>:
 80087b0:	f7ff bf78 	b.w	80086a4 <_strtol_l.isra.0>

080087b4 <_vsniprintf_r>:
 80087b4:	b530      	push	{r4, r5, lr}
 80087b6:	1e14      	subs	r4, r2, #0
 80087b8:	4605      	mov	r5, r0
 80087ba:	b09b      	sub	sp, #108	; 0x6c
 80087bc:	4618      	mov	r0, r3
 80087be:	da05      	bge.n	80087cc <_vsniprintf_r+0x18>
 80087c0:	238b      	movs	r3, #139	; 0x8b
 80087c2:	f04f 30ff 	mov.w	r0, #4294967295
 80087c6:	602b      	str	r3, [r5, #0]
 80087c8:	b01b      	add	sp, #108	; 0x6c
 80087ca:	bd30      	pop	{r4, r5, pc}
 80087cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80087d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80087d4:	bf0c      	ite	eq
 80087d6:	4623      	moveq	r3, r4
 80087d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087dc:	9302      	str	r3, [sp, #8]
 80087de:	9305      	str	r3, [sp, #20]
 80087e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087e4:	4602      	mov	r2, r0
 80087e6:	9100      	str	r1, [sp, #0]
 80087e8:	9104      	str	r1, [sp, #16]
 80087ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80087ee:	4669      	mov	r1, sp
 80087f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80087f2:	4628      	mov	r0, r5
 80087f4:	f001 fffe 	bl	800a7f4 <_svfiprintf_r>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	bfbc      	itt	lt
 80087fc:	238b      	movlt	r3, #139	; 0x8b
 80087fe:	602b      	strlt	r3, [r5, #0]
 8008800:	2c00      	cmp	r4, #0
 8008802:	d0e1      	beq.n	80087c8 <_vsniprintf_r+0x14>
 8008804:	2200      	movs	r2, #0
 8008806:	9b00      	ldr	r3, [sp, #0]
 8008808:	701a      	strb	r2, [r3, #0]
 800880a:	e7dd      	b.n	80087c8 <_vsniprintf_r+0x14>

0800880c <vsniprintf>:
 800880c:	b507      	push	{r0, r1, r2, lr}
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	4613      	mov	r3, r2
 8008812:	460a      	mov	r2, r1
 8008814:	4601      	mov	r1, r0
 8008816:	4803      	ldr	r0, [pc, #12]	; (8008824 <vsniprintf+0x18>)
 8008818:	6800      	ldr	r0, [r0, #0]
 800881a:	f7ff ffcb 	bl	80087b4 <_vsniprintf_r>
 800881e:	b003      	add	sp, #12
 8008820:	f85d fb04 	ldr.w	pc, [sp], #4
 8008824:	2000000c 	.word	0x2000000c

08008828 <quorem>:
 8008828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	6903      	ldr	r3, [r0, #16]
 800882e:	690c      	ldr	r4, [r1, #16]
 8008830:	4607      	mov	r7, r0
 8008832:	42a3      	cmp	r3, r4
 8008834:	f2c0 8083 	blt.w	800893e <quorem+0x116>
 8008838:	3c01      	subs	r4, #1
 800883a:	f100 0514 	add.w	r5, r0, #20
 800883e:	f101 0814 	add.w	r8, r1, #20
 8008842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800884c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008850:	3301      	adds	r3, #1
 8008852:	429a      	cmp	r2, r3
 8008854:	fbb2 f6f3 	udiv	r6, r2, r3
 8008858:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800885c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008860:	d332      	bcc.n	80088c8 <quorem+0xa0>
 8008862:	f04f 0e00 	mov.w	lr, #0
 8008866:	4640      	mov	r0, r8
 8008868:	46ac      	mov	ip, r5
 800886a:	46f2      	mov	sl, lr
 800886c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008870:	b293      	uxth	r3, r2
 8008872:	fb06 e303 	mla	r3, r6, r3, lr
 8008876:	0c12      	lsrs	r2, r2, #16
 8008878:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800887c:	fb06 e202 	mla	r2, r6, r2, lr
 8008880:	b29b      	uxth	r3, r3
 8008882:	ebaa 0303 	sub.w	r3, sl, r3
 8008886:	f8dc a000 	ldr.w	sl, [ip]
 800888a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800888e:	fa1f fa8a 	uxth.w	sl, sl
 8008892:	4453      	add	r3, sl
 8008894:	fa1f fa82 	uxth.w	sl, r2
 8008898:	f8dc 2000 	ldr.w	r2, [ip]
 800889c:	4581      	cmp	r9, r0
 800889e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80088a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088b0:	f84c 3b04 	str.w	r3, [ip], #4
 80088b4:	d2da      	bcs.n	800886c <quorem+0x44>
 80088b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80088ba:	b92b      	cbnz	r3, 80088c8 <quorem+0xa0>
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	3b04      	subs	r3, #4
 80088c0:	429d      	cmp	r5, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	d32f      	bcc.n	8008926 <quorem+0xfe>
 80088c6:	613c      	str	r4, [r7, #16]
 80088c8:	4638      	mov	r0, r7
 80088ca:	f001 fc8f 	bl	800a1ec <__mcmp>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	db25      	blt.n	800891e <quorem+0xf6>
 80088d2:	4628      	mov	r0, r5
 80088d4:	f04f 0c00 	mov.w	ip, #0
 80088d8:	3601      	adds	r6, #1
 80088da:	f858 1b04 	ldr.w	r1, [r8], #4
 80088de:	f8d0 e000 	ldr.w	lr, [r0]
 80088e2:	b28b      	uxth	r3, r1
 80088e4:	ebac 0303 	sub.w	r3, ip, r3
 80088e8:	fa1f f28e 	uxth.w	r2, lr
 80088ec:	4413      	add	r3, r2
 80088ee:	0c0a      	lsrs	r2, r1, #16
 80088f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088fe:	45c1      	cmp	r9, r8
 8008900:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008904:	f840 3b04 	str.w	r3, [r0], #4
 8008908:	d2e7      	bcs.n	80088da <quorem+0xb2>
 800890a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800890e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008912:	b922      	cbnz	r2, 800891e <quorem+0xf6>
 8008914:	3b04      	subs	r3, #4
 8008916:	429d      	cmp	r5, r3
 8008918:	461a      	mov	r2, r3
 800891a:	d30a      	bcc.n	8008932 <quorem+0x10a>
 800891c:	613c      	str	r4, [r7, #16]
 800891e:	4630      	mov	r0, r6
 8008920:	b003      	add	sp, #12
 8008922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	3b04      	subs	r3, #4
 800892a:	2a00      	cmp	r2, #0
 800892c:	d1cb      	bne.n	80088c6 <quorem+0x9e>
 800892e:	3c01      	subs	r4, #1
 8008930:	e7c6      	b.n	80088c0 <quorem+0x98>
 8008932:	6812      	ldr	r2, [r2, #0]
 8008934:	3b04      	subs	r3, #4
 8008936:	2a00      	cmp	r2, #0
 8008938:	d1f0      	bne.n	800891c <quorem+0xf4>
 800893a:	3c01      	subs	r4, #1
 800893c:	e7eb      	b.n	8008916 <quorem+0xee>
 800893e:	2000      	movs	r0, #0
 8008940:	e7ee      	b.n	8008920 <quorem+0xf8>
 8008942:	0000      	movs	r0, r0
 8008944:	0000      	movs	r0, r0
	...

08008948 <_dtoa_r>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	4616      	mov	r6, r2
 800894e:	461f      	mov	r7, r3
 8008950:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008952:	b099      	sub	sp, #100	; 0x64
 8008954:	4605      	mov	r5, r0
 8008956:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800895a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800895e:	b974      	cbnz	r4, 800897e <_dtoa_r+0x36>
 8008960:	2010      	movs	r0, #16
 8008962:	f001 f949 	bl	8009bf8 <malloc>
 8008966:	4602      	mov	r2, r0
 8008968:	6268      	str	r0, [r5, #36]	; 0x24
 800896a:	b920      	cbnz	r0, 8008976 <_dtoa_r+0x2e>
 800896c:	21ea      	movs	r1, #234	; 0xea
 800896e:	4bae      	ldr	r3, [pc, #696]	; (8008c28 <_dtoa_r+0x2e0>)
 8008970:	48ae      	ldr	r0, [pc, #696]	; (8008c2c <_dtoa_r+0x2e4>)
 8008972:	f002 f875 	bl	800aa60 <__assert_func>
 8008976:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800897a:	6004      	str	r4, [r0, #0]
 800897c:	60c4      	str	r4, [r0, #12]
 800897e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008980:	6819      	ldr	r1, [r3, #0]
 8008982:	b151      	cbz	r1, 800899a <_dtoa_r+0x52>
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	2301      	movs	r3, #1
 8008988:	4093      	lsls	r3, r2
 800898a:	604a      	str	r2, [r1, #4]
 800898c:	608b      	str	r3, [r1, #8]
 800898e:	4628      	mov	r0, r5
 8008990:	f001 f9a8 	bl	8009ce4 <_Bfree>
 8008994:	2200      	movs	r2, #0
 8008996:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	1e3b      	subs	r3, r7, #0
 800899c:	bfaf      	iteee	ge
 800899e:	2300      	movge	r3, #0
 80089a0:	2201      	movlt	r2, #1
 80089a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089a6:	9305      	strlt	r3, [sp, #20]
 80089a8:	bfa8      	it	ge
 80089aa:	f8c8 3000 	strge.w	r3, [r8]
 80089ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80089b2:	4b9f      	ldr	r3, [pc, #636]	; (8008c30 <_dtoa_r+0x2e8>)
 80089b4:	bfb8      	it	lt
 80089b6:	f8c8 2000 	strlt.w	r2, [r8]
 80089ba:	ea33 0309 	bics.w	r3, r3, r9
 80089be:	d119      	bne.n	80089f4 <_dtoa_r+0xac>
 80089c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80089c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089cc:	4333      	orrs	r3, r6
 80089ce:	f000 8580 	beq.w	80094d2 <_dtoa_r+0xb8a>
 80089d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089d4:	b953      	cbnz	r3, 80089ec <_dtoa_r+0xa4>
 80089d6:	4b97      	ldr	r3, [pc, #604]	; (8008c34 <_dtoa_r+0x2ec>)
 80089d8:	e022      	b.n	8008a20 <_dtoa_r+0xd8>
 80089da:	4b97      	ldr	r3, [pc, #604]	; (8008c38 <_dtoa_r+0x2f0>)
 80089dc:	9308      	str	r3, [sp, #32]
 80089de:	3308      	adds	r3, #8
 80089e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	9808      	ldr	r0, [sp, #32]
 80089e6:	b019      	add	sp, #100	; 0x64
 80089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ec:	4b91      	ldr	r3, [pc, #580]	; (8008c34 <_dtoa_r+0x2ec>)
 80089ee:	9308      	str	r3, [sp, #32]
 80089f0:	3303      	adds	r3, #3
 80089f2:	e7f5      	b.n	80089e0 <_dtoa_r+0x98>
 80089f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80089f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80089fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a00:	2200      	movs	r2, #0
 8008a02:	2300      	movs	r3, #0
 8008a04:	f7f7 ffd0 	bl	80009a8 <__aeabi_dcmpeq>
 8008a08:	4680      	mov	r8, r0
 8008a0a:	b158      	cbz	r0, 8008a24 <_dtoa_r+0xdc>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 8559 	beq.w	80094cc <_dtoa_r+0xb84>
 8008a1a:	4888      	ldr	r0, [pc, #544]	; (8008c3c <_dtoa_r+0x2f4>)
 8008a1c:	6018      	str	r0, [r3, #0]
 8008a1e:	1e43      	subs	r3, r0, #1
 8008a20:	9308      	str	r3, [sp, #32]
 8008a22:	e7df      	b.n	80089e4 <_dtoa_r+0x9c>
 8008a24:	ab16      	add	r3, sp, #88	; 0x58
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	ab17      	add	r3, sp, #92	; 0x5c
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a32:	f001 fd01 	bl	800a438 <__d2b>
 8008a36:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008a3a:	4682      	mov	sl, r0
 8008a3c:	2c00      	cmp	r4, #0
 8008a3e:	d07e      	beq.n	8008b3e <_dtoa_r+0x1f6>
 8008a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a46:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a4e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008a52:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008a56:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	4b78      	ldr	r3, [pc, #480]	; (8008c40 <_dtoa_r+0x2f8>)
 8008a5e:	f7f7 fb83 	bl	8000168 <__aeabi_dsub>
 8008a62:	a36b      	add	r3, pc, #428	; (adr r3, 8008c10 <_dtoa_r+0x2c8>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f7 fd36 	bl	80004d8 <__aeabi_dmul>
 8008a6c:	a36a      	add	r3, pc, #424	; (adr r3, 8008c18 <_dtoa_r+0x2d0>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fb7b 	bl	800016c <__adddf3>
 8008a76:	4606      	mov	r6, r0
 8008a78:	4620      	mov	r0, r4
 8008a7a:	460f      	mov	r7, r1
 8008a7c:	f7f7 fcc2 	bl	8000404 <__aeabi_i2d>
 8008a80:	a367      	add	r3, pc, #412	; (adr r3, 8008c20 <_dtoa_r+0x2d8>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 fd27 	bl	80004d8 <__aeabi_dmul>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f7 fb6b 	bl	800016c <__adddf3>
 8008a96:	4606      	mov	r6, r0
 8008a98:	460f      	mov	r7, r1
 8008a9a:	f7f7 ffcd 	bl	8000a38 <__aeabi_d2iz>
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4681      	mov	r9, r0
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	f7f7 ff88 	bl	80009bc <__aeabi_dcmplt>
 8008aac:	b148      	cbz	r0, 8008ac2 <_dtoa_r+0x17a>
 8008aae:	4648      	mov	r0, r9
 8008ab0:	f7f7 fca8 	bl	8000404 <__aeabi_i2d>
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	f7f7 ff76 	bl	80009a8 <__aeabi_dcmpeq>
 8008abc:	b908      	cbnz	r0, 8008ac2 <_dtoa_r+0x17a>
 8008abe:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ac2:	f1b9 0f16 	cmp.w	r9, #22
 8008ac6:	d857      	bhi.n	8008b78 <_dtoa_r+0x230>
 8008ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008acc:	4b5d      	ldr	r3, [pc, #372]	; (8008c44 <_dtoa_r+0x2fc>)
 8008ace:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f7f7 ff71 	bl	80009bc <__aeabi_dcmplt>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d04e      	beq.n	8008b7c <_dtoa_r+0x234>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ae4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ae6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ae8:	1b1c      	subs	r4, r3, r4
 8008aea:	1e63      	subs	r3, r4, #1
 8008aec:	9309      	str	r3, [sp, #36]	; 0x24
 8008aee:	bf49      	itett	mi
 8008af0:	f1c4 0301 	rsbmi	r3, r4, #1
 8008af4:	2300      	movpl	r3, #0
 8008af6:	9306      	strmi	r3, [sp, #24]
 8008af8:	2300      	movmi	r3, #0
 8008afa:	bf54      	ite	pl
 8008afc:	9306      	strpl	r3, [sp, #24]
 8008afe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008b00:	f1b9 0f00 	cmp.w	r9, #0
 8008b04:	db3c      	blt.n	8008b80 <_dtoa_r+0x238>
 8008b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b08:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008b0c:	444b      	add	r3, r9
 8008b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b10:	2300      	movs	r3, #0
 8008b12:	930a      	str	r3, [sp, #40]	; 0x28
 8008b14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b16:	2b09      	cmp	r3, #9
 8008b18:	d86c      	bhi.n	8008bf4 <_dtoa_r+0x2ac>
 8008b1a:	2b05      	cmp	r3, #5
 8008b1c:	bfc4      	itt	gt
 8008b1e:	3b04      	subgt	r3, #4
 8008b20:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008b22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b24:	bfc8      	it	gt
 8008b26:	2400      	movgt	r4, #0
 8008b28:	f1a3 0302 	sub.w	r3, r3, #2
 8008b2c:	bfd8      	it	le
 8008b2e:	2401      	movle	r4, #1
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	f200 808b 	bhi.w	8008c4c <_dtoa_r+0x304>
 8008b36:	e8df f003 	tbb	[pc, r3]
 8008b3a:	4f2d      	.short	0x4f2d
 8008b3c:	5b4d      	.short	0x5b4d
 8008b3e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008b42:	441c      	add	r4, r3
 8008b44:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008b48:	2b20      	cmp	r3, #32
 8008b4a:	bfc3      	ittte	gt
 8008b4c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b50:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008b54:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b58:	f1c3 0320 	rsble	r3, r3, #32
 8008b5c:	bfc6      	itte	gt
 8008b5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b62:	4318      	orrgt	r0, r3
 8008b64:	fa06 f003 	lslle.w	r0, r6, r3
 8008b68:	f7f7 fc3c 	bl	80003e4 <__aeabi_ui2d>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008b72:	3c01      	subs	r4, #1
 8008b74:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b76:	e770      	b.n	8008a5a <_dtoa_r+0x112>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e7b3      	b.n	8008ae4 <_dtoa_r+0x19c>
 8008b7c:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b7e:	e7b2      	b.n	8008ae6 <_dtoa_r+0x19e>
 8008b80:	9b06      	ldr	r3, [sp, #24]
 8008b82:	eba3 0309 	sub.w	r3, r3, r9
 8008b86:	9306      	str	r3, [sp, #24]
 8008b88:	f1c9 0300 	rsb	r3, r9, #0
 8008b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b8e:	2300      	movs	r3, #0
 8008b90:	930e      	str	r3, [sp, #56]	; 0x38
 8008b92:	e7bf      	b.n	8008b14 <_dtoa_r+0x1cc>
 8008b94:	2300      	movs	r3, #0
 8008b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dc59      	bgt.n	8008c52 <_dtoa_r+0x30a>
 8008b9e:	f04f 0b01 	mov.w	fp, #1
 8008ba2:	465b      	mov	r3, fp
 8008ba4:	f8cd b008 	str.w	fp, [sp, #8]
 8008ba8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008bac:	2200      	movs	r2, #0
 8008bae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008bb0:	6042      	str	r2, [r0, #4]
 8008bb2:	2204      	movs	r2, #4
 8008bb4:	f102 0614 	add.w	r6, r2, #20
 8008bb8:	429e      	cmp	r6, r3
 8008bba:	6841      	ldr	r1, [r0, #4]
 8008bbc:	d94f      	bls.n	8008c5e <_dtoa_r+0x316>
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f001 f850 	bl	8009c64 <_Balloc>
 8008bc4:	9008      	str	r0, [sp, #32]
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d14d      	bne.n	8008c66 <_dtoa_r+0x31e>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008bd0:	4b1d      	ldr	r3, [pc, #116]	; (8008c48 <_dtoa_r+0x300>)
 8008bd2:	e6cd      	b.n	8008970 <_dtoa_r+0x28>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e7de      	b.n	8008b96 <_dtoa_r+0x24e>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bde:	eb09 0b03 	add.w	fp, r9, r3
 8008be2:	f10b 0301 	add.w	r3, fp, #1
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	9302      	str	r3, [sp, #8]
 8008bea:	bfb8      	it	lt
 8008bec:	2301      	movlt	r3, #1
 8008bee:	e7dd      	b.n	8008bac <_dtoa_r+0x264>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e7f2      	b.n	8008bda <_dtoa_r+0x292>
 8008bf4:	2401      	movs	r4, #1
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008bfa:	9322      	str	r3, [sp, #136]	; 0x88
 8008bfc:	f04f 3bff 	mov.w	fp, #4294967295
 8008c00:	2200      	movs	r2, #0
 8008c02:	2312      	movs	r3, #18
 8008c04:	f8cd b008 	str.w	fp, [sp, #8]
 8008c08:	9223      	str	r2, [sp, #140]	; 0x8c
 8008c0a:	e7cf      	b.n	8008bac <_dtoa_r+0x264>
 8008c0c:	f3af 8000 	nop.w
 8008c10:	636f4361 	.word	0x636f4361
 8008c14:	3fd287a7 	.word	0x3fd287a7
 8008c18:	8b60c8b3 	.word	0x8b60c8b3
 8008c1c:	3fc68a28 	.word	0x3fc68a28
 8008c20:	509f79fb 	.word	0x509f79fb
 8008c24:	3fd34413 	.word	0x3fd34413
 8008c28:	0800e72e 	.word	0x0800e72e
 8008c2c:	0800e745 	.word	0x0800e745
 8008c30:	7ff00000 	.word	0x7ff00000
 8008c34:	0800e72a 	.word	0x0800e72a
 8008c38:	0800e721 	.word	0x0800e721
 8008c3c:	0800e5a1 	.word	0x0800e5a1
 8008c40:	3ff80000 	.word	0x3ff80000
 8008c44:	0800e8c0 	.word	0x0800e8c0
 8008c48:	0800e7a4 	.word	0x0800e7a4
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c50:	e7d4      	b.n	8008bfc <_dtoa_r+0x2b4>
 8008c52:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008c56:	465b      	mov	r3, fp
 8008c58:	f8cd b008 	str.w	fp, [sp, #8]
 8008c5c:	e7a6      	b.n	8008bac <_dtoa_r+0x264>
 8008c5e:	3101      	adds	r1, #1
 8008c60:	6041      	str	r1, [r0, #4]
 8008c62:	0052      	lsls	r2, r2, #1
 8008c64:	e7a6      	b.n	8008bb4 <_dtoa_r+0x26c>
 8008c66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c68:	9a08      	ldr	r2, [sp, #32]
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	9b02      	ldr	r3, [sp, #8]
 8008c6e:	2b0e      	cmp	r3, #14
 8008c70:	f200 80a8 	bhi.w	8008dc4 <_dtoa_r+0x47c>
 8008c74:	2c00      	cmp	r4, #0
 8008c76:	f000 80a5 	beq.w	8008dc4 <_dtoa_r+0x47c>
 8008c7a:	f1b9 0f00 	cmp.w	r9, #0
 8008c7e:	dd34      	ble.n	8008cea <_dtoa_r+0x3a2>
 8008c80:	4a9a      	ldr	r2, [pc, #616]	; (8008eec <_dtoa_r+0x5a4>)
 8008c82:	f009 030f 	and.w	r3, r9, #15
 8008c86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c8a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008c8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008c96:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008c9a:	d016      	beq.n	8008cca <_dtoa_r+0x382>
 8008c9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ca0:	4b93      	ldr	r3, [pc, #588]	; (8008ef0 <_dtoa_r+0x5a8>)
 8008ca2:	2703      	movs	r7, #3
 8008ca4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ca8:	f7f7 fd40 	bl	800072c <__aeabi_ddiv>
 8008cac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cb0:	f004 040f 	and.w	r4, r4, #15
 8008cb4:	4e8e      	ldr	r6, [pc, #568]	; (8008ef0 <_dtoa_r+0x5a8>)
 8008cb6:	b954      	cbnz	r4, 8008cce <_dtoa_r+0x386>
 8008cb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cc0:	f7f7 fd34 	bl	800072c <__aeabi_ddiv>
 8008cc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cc8:	e029      	b.n	8008d1e <_dtoa_r+0x3d6>
 8008cca:	2702      	movs	r7, #2
 8008ccc:	e7f2      	b.n	8008cb4 <_dtoa_r+0x36c>
 8008cce:	07e1      	lsls	r1, r4, #31
 8008cd0:	d508      	bpl.n	8008ce4 <_dtoa_r+0x39c>
 8008cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cda:	f7f7 fbfd 	bl	80004d8 <__aeabi_dmul>
 8008cde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ce2:	3701      	adds	r7, #1
 8008ce4:	1064      	asrs	r4, r4, #1
 8008ce6:	3608      	adds	r6, #8
 8008ce8:	e7e5      	b.n	8008cb6 <_dtoa_r+0x36e>
 8008cea:	f000 80a5 	beq.w	8008e38 <_dtoa_r+0x4f0>
 8008cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cf2:	f1c9 0400 	rsb	r4, r9, #0
 8008cf6:	4b7d      	ldr	r3, [pc, #500]	; (8008eec <_dtoa_r+0x5a4>)
 8008cf8:	f004 020f 	and.w	r2, r4, #15
 8008cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f7f7 fbe8 	bl	80004d8 <__aeabi_dmul>
 8008d08:	2702      	movs	r7, #2
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d10:	4e77      	ldr	r6, [pc, #476]	; (8008ef0 <_dtoa_r+0x5a8>)
 8008d12:	1124      	asrs	r4, r4, #4
 8008d14:	2c00      	cmp	r4, #0
 8008d16:	f040 8084 	bne.w	8008e22 <_dtoa_r+0x4da>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1d2      	bne.n	8008cc4 <_dtoa_r+0x37c>
 8008d1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 808b 	beq.w	8008e3c <_dtoa_r+0x4f4>
 8008d26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008d2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d32:	2200      	movs	r2, #0
 8008d34:	4b6f      	ldr	r3, [pc, #444]	; (8008ef4 <_dtoa_r+0x5ac>)
 8008d36:	f7f7 fe41 	bl	80009bc <__aeabi_dcmplt>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d07e      	beq.n	8008e3c <_dtoa_r+0x4f4>
 8008d3e:	9b02      	ldr	r3, [sp, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d07b      	beq.n	8008e3c <_dtoa_r+0x4f4>
 8008d44:	f1bb 0f00 	cmp.w	fp, #0
 8008d48:	dd38      	ble.n	8008dbc <_dtoa_r+0x474>
 8008d4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d4e:	2200      	movs	r2, #0
 8008d50:	4b69      	ldr	r3, [pc, #420]	; (8008ef8 <_dtoa_r+0x5b0>)
 8008d52:	f7f7 fbc1 	bl	80004d8 <__aeabi_dmul>
 8008d56:	465c      	mov	r4, fp
 8008d58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d5c:	f109 38ff 	add.w	r8, r9, #4294967295
 8008d60:	3701      	adds	r7, #1
 8008d62:	4638      	mov	r0, r7
 8008d64:	f7f7 fb4e 	bl	8000404 <__aeabi_i2d>
 8008d68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d6c:	f7f7 fbb4 	bl	80004d8 <__aeabi_dmul>
 8008d70:	2200      	movs	r2, #0
 8008d72:	4b62      	ldr	r3, [pc, #392]	; (8008efc <_dtoa_r+0x5b4>)
 8008d74:	f7f7 f9fa 	bl	800016c <__adddf3>
 8008d78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008d7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d80:	9611      	str	r6, [sp, #68]	; 0x44
 8008d82:	2c00      	cmp	r4, #0
 8008d84:	d15d      	bne.n	8008e42 <_dtoa_r+0x4fa>
 8008d86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	4b5c      	ldr	r3, [pc, #368]	; (8008f00 <_dtoa_r+0x5b8>)
 8008d8e:	f7f7 f9eb 	bl	8000168 <__aeabi_dsub>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d9a:	4633      	mov	r3, r6
 8008d9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d9e:	f7f7 fe2b 	bl	80009f8 <__aeabi_dcmpgt>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	f040 829e 	bne.w	80092e4 <_dtoa_r+0x99c>
 8008da8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008db2:	f7f7 fe03 	bl	80009bc <__aeabi_dcmplt>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f040 8292 	bne.w	80092e0 <_dtoa_r+0x998>
 8008dbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008dc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008dc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f2c0 8153 	blt.w	8009072 <_dtoa_r+0x72a>
 8008dcc:	f1b9 0f0e 	cmp.w	r9, #14
 8008dd0:	f300 814f 	bgt.w	8009072 <_dtoa_r+0x72a>
 8008dd4:	4b45      	ldr	r3, [pc, #276]	; (8008eec <_dtoa_r+0x5a4>)
 8008dd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008dda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008dde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008de2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f280 80db 	bge.w	8008fa0 <_dtoa_r+0x658>
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f300 80d7 	bgt.w	8008fa0 <_dtoa_r+0x658>
 8008df2:	f040 8274 	bne.w	80092de <_dtoa_r+0x996>
 8008df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4b40      	ldr	r3, [pc, #256]	; (8008f00 <_dtoa_r+0x5b8>)
 8008dfe:	f7f7 fb6b 	bl	80004d8 <__aeabi_dmul>
 8008e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e06:	f7f7 fded 	bl	80009e4 <__aeabi_dcmpge>
 8008e0a:	9c02      	ldr	r4, [sp, #8]
 8008e0c:	4626      	mov	r6, r4
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	f040 824a 	bne.w	80092a8 <_dtoa_r+0x960>
 8008e14:	2331      	movs	r3, #49	; 0x31
 8008e16:	9f08      	ldr	r7, [sp, #32]
 8008e18:	f109 0901 	add.w	r9, r9, #1
 8008e1c:	f807 3b01 	strb.w	r3, [r7], #1
 8008e20:	e246      	b.n	80092b0 <_dtoa_r+0x968>
 8008e22:	07e2      	lsls	r2, r4, #31
 8008e24:	d505      	bpl.n	8008e32 <_dtoa_r+0x4ea>
 8008e26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e2a:	f7f7 fb55 	bl	80004d8 <__aeabi_dmul>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	3701      	adds	r7, #1
 8008e32:	1064      	asrs	r4, r4, #1
 8008e34:	3608      	adds	r6, #8
 8008e36:	e76d      	b.n	8008d14 <_dtoa_r+0x3cc>
 8008e38:	2702      	movs	r7, #2
 8008e3a:	e770      	b.n	8008d1e <_dtoa_r+0x3d6>
 8008e3c:	46c8      	mov	r8, r9
 8008e3e:	9c02      	ldr	r4, [sp, #8]
 8008e40:	e78f      	b.n	8008d62 <_dtoa_r+0x41a>
 8008e42:	9908      	ldr	r1, [sp, #32]
 8008e44:	4b29      	ldr	r3, [pc, #164]	; (8008eec <_dtoa_r+0x5a4>)
 8008e46:	4421      	add	r1, r4
 8008e48:	9112      	str	r1, [sp, #72]	; 0x48
 8008e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008e54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e58:	2900      	cmp	r1, #0
 8008e5a:	d055      	beq.n	8008f08 <_dtoa_r+0x5c0>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	4929      	ldr	r1, [pc, #164]	; (8008f04 <_dtoa_r+0x5bc>)
 8008e60:	f7f7 fc64 	bl	800072c <__aeabi_ddiv>
 8008e64:	463b      	mov	r3, r7
 8008e66:	4632      	mov	r2, r6
 8008e68:	f7f7 f97e 	bl	8000168 <__aeabi_dsub>
 8008e6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e70:	9f08      	ldr	r7, [sp, #32]
 8008e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e76:	f7f7 fddf 	bl	8000a38 <__aeabi_d2iz>
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	f7f7 fac2 	bl	8000404 <__aeabi_i2d>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e88:	f7f7 f96e 	bl	8000168 <__aeabi_dsub>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	3430      	adds	r4, #48	; 0x30
 8008e92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e9a:	f807 4b01 	strb.w	r4, [r7], #1
 8008e9e:	f7f7 fd8d 	bl	80009bc <__aeabi_dcmplt>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d174      	bne.n	8008f90 <_dtoa_r+0x648>
 8008ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eaa:	2000      	movs	r0, #0
 8008eac:	4911      	ldr	r1, [pc, #68]	; (8008ef4 <_dtoa_r+0x5ac>)
 8008eae:	f7f7 f95b 	bl	8000168 <__aeabi_dsub>
 8008eb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008eb6:	f7f7 fd81 	bl	80009bc <__aeabi_dcmplt>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	f040 80b6 	bne.w	800902c <_dtoa_r+0x6e4>
 8008ec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ec2:	429f      	cmp	r7, r3
 8008ec4:	f43f af7a 	beq.w	8008dbc <_dtoa_r+0x474>
 8008ec8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ecc:	2200      	movs	r2, #0
 8008ece:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <_dtoa_r+0x5b0>)
 8008ed0:	f7f7 fb02 	bl	80004d8 <__aeabi_dmul>
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ede:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <_dtoa_r+0x5b0>)
 8008ee0:	f7f7 fafa 	bl	80004d8 <__aeabi_dmul>
 8008ee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ee8:	e7c3      	b.n	8008e72 <_dtoa_r+0x52a>
 8008eea:	bf00      	nop
 8008eec:	0800e8c0 	.word	0x0800e8c0
 8008ef0:	0800e898 	.word	0x0800e898
 8008ef4:	3ff00000 	.word	0x3ff00000
 8008ef8:	40240000 	.word	0x40240000
 8008efc:	401c0000 	.word	0x401c0000
 8008f00:	40140000 	.word	0x40140000
 8008f04:	3fe00000 	.word	0x3fe00000
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 fae4 	bl	80004d8 <__aeabi_dmul>
 8008f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f16:	9c08      	ldr	r4, [sp, #32]
 8008f18:	9314      	str	r3, [sp, #80]	; 0x50
 8008f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f1e:	f7f7 fd8b 	bl	8000a38 <__aeabi_d2iz>
 8008f22:	9015      	str	r0, [sp, #84]	; 0x54
 8008f24:	f7f7 fa6e 	bl	8000404 <__aeabi_i2d>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f30:	f7f7 f91a 	bl	8000168 <__aeabi_dsub>
 8008f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f36:	4606      	mov	r6, r0
 8008f38:	3330      	adds	r3, #48	; 0x30
 8008f3a:	f804 3b01 	strb.w	r3, [r4], #1
 8008f3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f40:	460f      	mov	r7, r1
 8008f42:	429c      	cmp	r4, r3
 8008f44:	f04f 0200 	mov.w	r2, #0
 8008f48:	d124      	bne.n	8008f94 <_dtoa_r+0x64c>
 8008f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f4e:	4bb3      	ldr	r3, [pc, #716]	; (800921c <_dtoa_r+0x8d4>)
 8008f50:	f7f7 f90c 	bl	800016c <__adddf3>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4630      	mov	r0, r6
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	f7f7 fd4c 	bl	80009f8 <__aeabi_dcmpgt>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d162      	bne.n	800902a <_dtoa_r+0x6e2>
 8008f64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f68:	2000      	movs	r0, #0
 8008f6a:	49ac      	ldr	r1, [pc, #688]	; (800921c <_dtoa_r+0x8d4>)
 8008f6c:	f7f7 f8fc 	bl	8000168 <__aeabi_dsub>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4630      	mov	r0, r6
 8008f76:	4639      	mov	r1, r7
 8008f78:	f7f7 fd20 	bl	80009bc <__aeabi_dcmplt>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f43f af1d 	beq.w	8008dbc <_dtoa_r+0x474>
 8008f82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008f84:	1e7b      	subs	r3, r7, #1
 8008f86:	9314      	str	r3, [sp, #80]	; 0x50
 8008f88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008f8c:	2b30      	cmp	r3, #48	; 0x30
 8008f8e:	d0f8      	beq.n	8008f82 <_dtoa_r+0x63a>
 8008f90:	46c1      	mov	r9, r8
 8008f92:	e03a      	b.n	800900a <_dtoa_r+0x6c2>
 8008f94:	4ba2      	ldr	r3, [pc, #648]	; (8009220 <_dtoa_r+0x8d8>)
 8008f96:	f7f7 fa9f 	bl	80004d8 <__aeabi_dmul>
 8008f9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f9e:	e7bc      	b.n	8008f1a <_dtoa_r+0x5d2>
 8008fa0:	9f08      	ldr	r7, [sp, #32]
 8008fa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008faa:	f7f7 fbbf 	bl	800072c <__aeabi_ddiv>
 8008fae:	f7f7 fd43 	bl	8000a38 <__aeabi_d2iz>
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	f7f7 fa26 	bl	8000404 <__aeabi_i2d>
 8008fb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fbc:	f7f7 fa8c 	bl	80004d8 <__aeabi_dmul>
 8008fc0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fcc:	f7f7 f8cc 	bl	8000168 <__aeabi_dsub>
 8008fd0:	f807 6b01 	strb.w	r6, [r7], #1
 8008fd4:	9e08      	ldr	r6, [sp, #32]
 8008fd6:	9b02      	ldr	r3, [sp, #8]
 8008fd8:	1bbe      	subs	r6, r7, r6
 8008fda:	42b3      	cmp	r3, r6
 8008fdc:	d13a      	bne.n	8009054 <_dtoa_r+0x70c>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	f7f7 f8c3 	bl	800016c <__adddf3>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ff2:	f7f7 fd01 	bl	80009f8 <__aeabi_dcmpgt>
 8008ff6:	bb58      	cbnz	r0, 8009050 <_dtoa_r+0x708>
 8008ff8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009000:	f7f7 fcd2 	bl	80009a8 <__aeabi_dcmpeq>
 8009004:	b108      	cbz	r0, 800900a <_dtoa_r+0x6c2>
 8009006:	07e1      	lsls	r1, r4, #31
 8009008:	d422      	bmi.n	8009050 <_dtoa_r+0x708>
 800900a:	4628      	mov	r0, r5
 800900c:	4651      	mov	r1, sl
 800900e:	f000 fe69 	bl	8009ce4 <_Bfree>
 8009012:	2300      	movs	r3, #0
 8009014:	703b      	strb	r3, [r7, #0]
 8009016:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009018:	f109 0001 	add.w	r0, r9, #1
 800901c:	6018      	str	r0, [r3, #0]
 800901e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009020:	2b00      	cmp	r3, #0
 8009022:	f43f acdf 	beq.w	80089e4 <_dtoa_r+0x9c>
 8009026:	601f      	str	r7, [r3, #0]
 8009028:	e4dc      	b.n	80089e4 <_dtoa_r+0x9c>
 800902a:	4627      	mov	r7, r4
 800902c:	463b      	mov	r3, r7
 800902e:	461f      	mov	r7, r3
 8009030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009034:	2a39      	cmp	r2, #57	; 0x39
 8009036:	d107      	bne.n	8009048 <_dtoa_r+0x700>
 8009038:	9a08      	ldr	r2, [sp, #32]
 800903a:	429a      	cmp	r2, r3
 800903c:	d1f7      	bne.n	800902e <_dtoa_r+0x6e6>
 800903e:	2230      	movs	r2, #48	; 0x30
 8009040:	9908      	ldr	r1, [sp, #32]
 8009042:	f108 0801 	add.w	r8, r8, #1
 8009046:	700a      	strb	r2, [r1, #0]
 8009048:	781a      	ldrb	r2, [r3, #0]
 800904a:	3201      	adds	r2, #1
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	e79f      	b.n	8008f90 <_dtoa_r+0x648>
 8009050:	46c8      	mov	r8, r9
 8009052:	e7eb      	b.n	800902c <_dtoa_r+0x6e4>
 8009054:	2200      	movs	r2, #0
 8009056:	4b72      	ldr	r3, [pc, #456]	; (8009220 <_dtoa_r+0x8d8>)
 8009058:	f7f7 fa3e 	bl	80004d8 <__aeabi_dmul>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009064:	2200      	movs	r2, #0
 8009066:	2300      	movs	r3, #0
 8009068:	f7f7 fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800906c:	2800      	cmp	r0, #0
 800906e:	d098      	beq.n	8008fa2 <_dtoa_r+0x65a>
 8009070:	e7cb      	b.n	800900a <_dtoa_r+0x6c2>
 8009072:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009074:	2a00      	cmp	r2, #0
 8009076:	f000 80cd 	beq.w	8009214 <_dtoa_r+0x8cc>
 800907a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800907c:	2a01      	cmp	r2, #1
 800907e:	f300 80af 	bgt.w	80091e0 <_dtoa_r+0x898>
 8009082:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009084:	2a00      	cmp	r2, #0
 8009086:	f000 80a7 	beq.w	80091d8 <_dtoa_r+0x890>
 800908a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800908e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009090:	9f06      	ldr	r7, [sp, #24]
 8009092:	9a06      	ldr	r2, [sp, #24]
 8009094:	2101      	movs	r1, #1
 8009096:	441a      	add	r2, r3
 8009098:	9206      	str	r2, [sp, #24]
 800909a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800909c:	4628      	mov	r0, r5
 800909e:	441a      	add	r2, r3
 80090a0:	9209      	str	r2, [sp, #36]	; 0x24
 80090a2:	f000 ff23 	bl	8009eec <__i2b>
 80090a6:	4606      	mov	r6, r0
 80090a8:	2f00      	cmp	r7, #0
 80090aa:	dd0c      	ble.n	80090c6 <_dtoa_r+0x77e>
 80090ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dd09      	ble.n	80090c6 <_dtoa_r+0x77e>
 80090b2:	42bb      	cmp	r3, r7
 80090b4:	bfa8      	it	ge
 80090b6:	463b      	movge	r3, r7
 80090b8:	9a06      	ldr	r2, [sp, #24]
 80090ba:	1aff      	subs	r7, r7, r3
 80090bc:	1ad2      	subs	r2, r2, r3
 80090be:	9206      	str	r2, [sp, #24]
 80090c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	9309      	str	r3, [sp, #36]	; 0x24
 80090c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c8:	b1f3      	cbz	r3, 8009108 <_dtoa_r+0x7c0>
 80090ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 80a9 	beq.w	8009224 <_dtoa_r+0x8dc>
 80090d2:	2c00      	cmp	r4, #0
 80090d4:	dd10      	ble.n	80090f8 <_dtoa_r+0x7b0>
 80090d6:	4631      	mov	r1, r6
 80090d8:	4622      	mov	r2, r4
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 ffc0 	bl	800a060 <__pow5mult>
 80090e0:	4652      	mov	r2, sl
 80090e2:	4601      	mov	r1, r0
 80090e4:	4606      	mov	r6, r0
 80090e6:	4628      	mov	r0, r5
 80090e8:	f000 ff16 	bl	8009f18 <__multiply>
 80090ec:	4680      	mov	r8, r0
 80090ee:	4651      	mov	r1, sl
 80090f0:	4628      	mov	r0, r5
 80090f2:	f000 fdf7 	bl	8009ce4 <_Bfree>
 80090f6:	46c2      	mov	sl, r8
 80090f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fa:	1b1a      	subs	r2, r3, r4
 80090fc:	d004      	beq.n	8009108 <_dtoa_r+0x7c0>
 80090fe:	4651      	mov	r1, sl
 8009100:	4628      	mov	r0, r5
 8009102:	f000 ffad 	bl	800a060 <__pow5mult>
 8009106:	4682      	mov	sl, r0
 8009108:	2101      	movs	r1, #1
 800910a:	4628      	mov	r0, r5
 800910c:	f000 feee 	bl	8009eec <__i2b>
 8009110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009112:	4604      	mov	r4, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	f340 8087 	ble.w	8009228 <_dtoa_r+0x8e0>
 800911a:	461a      	mov	r2, r3
 800911c:	4601      	mov	r1, r0
 800911e:	4628      	mov	r0, r5
 8009120:	f000 ff9e 	bl	800a060 <__pow5mult>
 8009124:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009126:	4604      	mov	r4, r0
 8009128:	2b01      	cmp	r3, #1
 800912a:	f340 8080 	ble.w	800922e <_dtoa_r+0x8e6>
 800912e:	f04f 0800 	mov.w	r8, #0
 8009132:	6923      	ldr	r3, [r4, #16]
 8009134:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009138:	6918      	ldr	r0, [r3, #16]
 800913a:	f000 fe89 	bl	8009e50 <__hi0bits>
 800913e:	f1c0 0020 	rsb	r0, r0, #32
 8009142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009144:	4418      	add	r0, r3
 8009146:	f010 001f 	ands.w	r0, r0, #31
 800914a:	f000 8092 	beq.w	8009272 <_dtoa_r+0x92a>
 800914e:	f1c0 0320 	rsb	r3, r0, #32
 8009152:	2b04      	cmp	r3, #4
 8009154:	f340 808a 	ble.w	800926c <_dtoa_r+0x924>
 8009158:	f1c0 001c 	rsb	r0, r0, #28
 800915c:	9b06      	ldr	r3, [sp, #24]
 800915e:	4407      	add	r7, r0
 8009160:	4403      	add	r3, r0
 8009162:	9306      	str	r3, [sp, #24]
 8009164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009166:	4403      	add	r3, r0
 8009168:	9309      	str	r3, [sp, #36]	; 0x24
 800916a:	9b06      	ldr	r3, [sp, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	dd05      	ble.n	800917c <_dtoa_r+0x834>
 8009170:	4651      	mov	r1, sl
 8009172:	461a      	mov	r2, r3
 8009174:	4628      	mov	r0, r5
 8009176:	f000 ffcd 	bl	800a114 <__lshift>
 800917a:	4682      	mov	sl, r0
 800917c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800917e:	2b00      	cmp	r3, #0
 8009180:	dd05      	ble.n	800918e <_dtoa_r+0x846>
 8009182:	4621      	mov	r1, r4
 8009184:	461a      	mov	r2, r3
 8009186:	4628      	mov	r0, r5
 8009188:	f000 ffc4 	bl	800a114 <__lshift>
 800918c:	4604      	mov	r4, r0
 800918e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d070      	beq.n	8009276 <_dtoa_r+0x92e>
 8009194:	4621      	mov	r1, r4
 8009196:	4650      	mov	r0, sl
 8009198:	f001 f828 	bl	800a1ec <__mcmp>
 800919c:	2800      	cmp	r0, #0
 800919e:	da6a      	bge.n	8009276 <_dtoa_r+0x92e>
 80091a0:	2300      	movs	r3, #0
 80091a2:	4651      	mov	r1, sl
 80091a4:	220a      	movs	r2, #10
 80091a6:	4628      	mov	r0, r5
 80091a8:	f000 fdbe 	bl	8009d28 <__multadd>
 80091ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ae:	4682      	mov	sl, r0
 80091b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8193 	beq.w	80094e0 <_dtoa_r+0xb98>
 80091ba:	4631      	mov	r1, r6
 80091bc:	2300      	movs	r3, #0
 80091be:	220a      	movs	r2, #10
 80091c0:	4628      	mov	r0, r5
 80091c2:	f000 fdb1 	bl	8009d28 <__multadd>
 80091c6:	f1bb 0f00 	cmp.w	fp, #0
 80091ca:	4606      	mov	r6, r0
 80091cc:	f300 8093 	bgt.w	80092f6 <_dtoa_r+0x9ae>
 80091d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	dc57      	bgt.n	8009286 <_dtoa_r+0x93e>
 80091d6:	e08e      	b.n	80092f6 <_dtoa_r+0x9ae>
 80091d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80091da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091de:	e756      	b.n	800908e <_dtoa_r+0x746>
 80091e0:	9b02      	ldr	r3, [sp, #8]
 80091e2:	1e5c      	subs	r4, r3, #1
 80091e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	bfb7      	itett	lt
 80091ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80091ec:	1b1c      	subge	r4, r3, r4
 80091ee:	1ae2      	sublt	r2, r4, r3
 80091f0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80091f2:	bfbe      	ittt	lt
 80091f4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80091f6:	189b      	addlt	r3, r3, r2
 80091f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80091fa:	9b02      	ldr	r3, [sp, #8]
 80091fc:	bfb8      	it	lt
 80091fe:	2400      	movlt	r4, #0
 8009200:	2b00      	cmp	r3, #0
 8009202:	bfbb      	ittet	lt
 8009204:	9b06      	ldrlt	r3, [sp, #24]
 8009206:	9a02      	ldrlt	r2, [sp, #8]
 8009208:	9f06      	ldrge	r7, [sp, #24]
 800920a:	1a9f      	sublt	r7, r3, r2
 800920c:	bfac      	ite	ge
 800920e:	9b02      	ldrge	r3, [sp, #8]
 8009210:	2300      	movlt	r3, #0
 8009212:	e73e      	b.n	8009092 <_dtoa_r+0x74a>
 8009214:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009216:	9f06      	ldr	r7, [sp, #24]
 8009218:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800921a:	e745      	b.n	80090a8 <_dtoa_r+0x760>
 800921c:	3fe00000 	.word	0x3fe00000
 8009220:	40240000 	.word	0x40240000
 8009224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009226:	e76a      	b.n	80090fe <_dtoa_r+0x7b6>
 8009228:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800922a:	2b01      	cmp	r3, #1
 800922c:	dc19      	bgt.n	8009262 <_dtoa_r+0x91a>
 800922e:	9b04      	ldr	r3, [sp, #16]
 8009230:	b9bb      	cbnz	r3, 8009262 <_dtoa_r+0x91a>
 8009232:	9b05      	ldr	r3, [sp, #20]
 8009234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009238:	b99b      	cbnz	r3, 8009262 <_dtoa_r+0x91a>
 800923a:	9b05      	ldr	r3, [sp, #20]
 800923c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009240:	0d1b      	lsrs	r3, r3, #20
 8009242:	051b      	lsls	r3, r3, #20
 8009244:	b183      	cbz	r3, 8009268 <_dtoa_r+0x920>
 8009246:	f04f 0801 	mov.w	r8, #1
 800924a:	9b06      	ldr	r3, [sp, #24]
 800924c:	3301      	adds	r3, #1
 800924e:	9306      	str	r3, [sp, #24]
 8009250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009252:	3301      	adds	r3, #1
 8009254:	9309      	str	r3, [sp, #36]	; 0x24
 8009256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009258:	2b00      	cmp	r3, #0
 800925a:	f47f af6a 	bne.w	8009132 <_dtoa_r+0x7ea>
 800925e:	2001      	movs	r0, #1
 8009260:	e76f      	b.n	8009142 <_dtoa_r+0x7fa>
 8009262:	f04f 0800 	mov.w	r8, #0
 8009266:	e7f6      	b.n	8009256 <_dtoa_r+0x90e>
 8009268:	4698      	mov	r8, r3
 800926a:	e7f4      	b.n	8009256 <_dtoa_r+0x90e>
 800926c:	f43f af7d 	beq.w	800916a <_dtoa_r+0x822>
 8009270:	4618      	mov	r0, r3
 8009272:	301c      	adds	r0, #28
 8009274:	e772      	b.n	800915c <_dtoa_r+0x814>
 8009276:	9b02      	ldr	r3, [sp, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	dc36      	bgt.n	80092ea <_dtoa_r+0x9a2>
 800927c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800927e:	2b02      	cmp	r3, #2
 8009280:	dd33      	ble.n	80092ea <_dtoa_r+0x9a2>
 8009282:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009286:	f1bb 0f00 	cmp.w	fp, #0
 800928a:	d10d      	bne.n	80092a8 <_dtoa_r+0x960>
 800928c:	4621      	mov	r1, r4
 800928e:	465b      	mov	r3, fp
 8009290:	2205      	movs	r2, #5
 8009292:	4628      	mov	r0, r5
 8009294:	f000 fd48 	bl	8009d28 <__multadd>
 8009298:	4601      	mov	r1, r0
 800929a:	4604      	mov	r4, r0
 800929c:	4650      	mov	r0, sl
 800929e:	f000 ffa5 	bl	800a1ec <__mcmp>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	f73f adb6 	bgt.w	8008e14 <_dtoa_r+0x4cc>
 80092a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092aa:	9f08      	ldr	r7, [sp, #32]
 80092ac:	ea6f 0903 	mvn.w	r9, r3
 80092b0:	f04f 0800 	mov.w	r8, #0
 80092b4:	4621      	mov	r1, r4
 80092b6:	4628      	mov	r0, r5
 80092b8:	f000 fd14 	bl	8009ce4 <_Bfree>
 80092bc:	2e00      	cmp	r6, #0
 80092be:	f43f aea4 	beq.w	800900a <_dtoa_r+0x6c2>
 80092c2:	f1b8 0f00 	cmp.w	r8, #0
 80092c6:	d005      	beq.n	80092d4 <_dtoa_r+0x98c>
 80092c8:	45b0      	cmp	r8, r6
 80092ca:	d003      	beq.n	80092d4 <_dtoa_r+0x98c>
 80092cc:	4641      	mov	r1, r8
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 fd08 	bl	8009ce4 <_Bfree>
 80092d4:	4631      	mov	r1, r6
 80092d6:	4628      	mov	r0, r5
 80092d8:	f000 fd04 	bl	8009ce4 <_Bfree>
 80092dc:	e695      	b.n	800900a <_dtoa_r+0x6c2>
 80092de:	2400      	movs	r4, #0
 80092e0:	4626      	mov	r6, r4
 80092e2:	e7e1      	b.n	80092a8 <_dtoa_r+0x960>
 80092e4:	46c1      	mov	r9, r8
 80092e6:	4626      	mov	r6, r4
 80092e8:	e594      	b.n	8008e14 <_dtoa_r+0x4cc>
 80092ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ec:	f8dd b008 	ldr.w	fp, [sp, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 80fc 	beq.w	80094ee <_dtoa_r+0xba6>
 80092f6:	2f00      	cmp	r7, #0
 80092f8:	dd05      	ble.n	8009306 <_dtoa_r+0x9be>
 80092fa:	4631      	mov	r1, r6
 80092fc:	463a      	mov	r2, r7
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 ff08 	bl	800a114 <__lshift>
 8009304:	4606      	mov	r6, r0
 8009306:	f1b8 0f00 	cmp.w	r8, #0
 800930a:	d05c      	beq.n	80093c6 <_dtoa_r+0xa7e>
 800930c:	4628      	mov	r0, r5
 800930e:	6871      	ldr	r1, [r6, #4]
 8009310:	f000 fca8 	bl	8009c64 <_Balloc>
 8009314:	4607      	mov	r7, r0
 8009316:	b928      	cbnz	r0, 8009324 <_dtoa_r+0x9dc>
 8009318:	4602      	mov	r2, r0
 800931a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800931e:	4b7e      	ldr	r3, [pc, #504]	; (8009518 <_dtoa_r+0xbd0>)
 8009320:	f7ff bb26 	b.w	8008970 <_dtoa_r+0x28>
 8009324:	6932      	ldr	r2, [r6, #16]
 8009326:	f106 010c 	add.w	r1, r6, #12
 800932a:	3202      	adds	r2, #2
 800932c:	0092      	lsls	r2, r2, #2
 800932e:	300c      	adds	r0, #12
 8009330:	f000 fc8a 	bl	8009c48 <memcpy>
 8009334:	2201      	movs	r2, #1
 8009336:	4639      	mov	r1, r7
 8009338:	4628      	mov	r0, r5
 800933a:	f000 feeb 	bl	800a114 <__lshift>
 800933e:	46b0      	mov	r8, r6
 8009340:	4606      	mov	r6, r0
 8009342:	9b08      	ldr	r3, [sp, #32]
 8009344:	3301      	adds	r3, #1
 8009346:	9302      	str	r3, [sp, #8]
 8009348:	9b08      	ldr	r3, [sp, #32]
 800934a:	445b      	add	r3, fp
 800934c:	930a      	str	r3, [sp, #40]	; 0x28
 800934e:	9b04      	ldr	r3, [sp, #16]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	9309      	str	r3, [sp, #36]	; 0x24
 8009356:	9b02      	ldr	r3, [sp, #8]
 8009358:	4621      	mov	r1, r4
 800935a:	4650      	mov	r0, sl
 800935c:	f103 3bff 	add.w	fp, r3, #4294967295
 8009360:	f7ff fa62 	bl	8008828 <quorem>
 8009364:	4603      	mov	r3, r0
 8009366:	4641      	mov	r1, r8
 8009368:	3330      	adds	r3, #48	; 0x30
 800936a:	9004      	str	r0, [sp, #16]
 800936c:	4650      	mov	r0, sl
 800936e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009370:	f000 ff3c 	bl	800a1ec <__mcmp>
 8009374:	4632      	mov	r2, r6
 8009376:	9006      	str	r0, [sp, #24]
 8009378:	4621      	mov	r1, r4
 800937a:	4628      	mov	r0, r5
 800937c:	f000 ff52 	bl	800a224 <__mdiff>
 8009380:	68c2      	ldr	r2, [r0, #12]
 8009382:	4607      	mov	r7, r0
 8009384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009386:	bb02      	cbnz	r2, 80093ca <_dtoa_r+0xa82>
 8009388:	4601      	mov	r1, r0
 800938a:	4650      	mov	r0, sl
 800938c:	f000 ff2e 	bl	800a1ec <__mcmp>
 8009390:	4602      	mov	r2, r0
 8009392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009394:	4639      	mov	r1, r7
 8009396:	4628      	mov	r0, r5
 8009398:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800939c:	f000 fca2 	bl	8009ce4 <_Bfree>
 80093a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093a4:	9f02      	ldr	r7, [sp, #8]
 80093a6:	ea43 0102 	orr.w	r1, r3, r2
 80093aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ac:	430b      	orrs	r3, r1
 80093ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b0:	d10d      	bne.n	80093ce <_dtoa_r+0xa86>
 80093b2:	2b39      	cmp	r3, #57	; 0x39
 80093b4:	d027      	beq.n	8009406 <_dtoa_r+0xabe>
 80093b6:	9a06      	ldr	r2, [sp, #24]
 80093b8:	2a00      	cmp	r2, #0
 80093ba:	dd01      	ble.n	80093c0 <_dtoa_r+0xa78>
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	3331      	adds	r3, #49	; 0x31
 80093c0:	f88b 3000 	strb.w	r3, [fp]
 80093c4:	e776      	b.n	80092b4 <_dtoa_r+0x96c>
 80093c6:	4630      	mov	r0, r6
 80093c8:	e7b9      	b.n	800933e <_dtoa_r+0x9f6>
 80093ca:	2201      	movs	r2, #1
 80093cc:	e7e2      	b.n	8009394 <_dtoa_r+0xa4c>
 80093ce:	9906      	ldr	r1, [sp, #24]
 80093d0:	2900      	cmp	r1, #0
 80093d2:	db04      	blt.n	80093de <_dtoa_r+0xa96>
 80093d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80093d6:	4301      	orrs	r1, r0
 80093d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093da:	4301      	orrs	r1, r0
 80093dc:	d120      	bne.n	8009420 <_dtoa_r+0xad8>
 80093de:	2a00      	cmp	r2, #0
 80093e0:	ddee      	ble.n	80093c0 <_dtoa_r+0xa78>
 80093e2:	4651      	mov	r1, sl
 80093e4:	2201      	movs	r2, #1
 80093e6:	4628      	mov	r0, r5
 80093e8:	9302      	str	r3, [sp, #8]
 80093ea:	f000 fe93 	bl	800a114 <__lshift>
 80093ee:	4621      	mov	r1, r4
 80093f0:	4682      	mov	sl, r0
 80093f2:	f000 fefb 	bl	800a1ec <__mcmp>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	9b02      	ldr	r3, [sp, #8]
 80093fa:	dc02      	bgt.n	8009402 <_dtoa_r+0xaba>
 80093fc:	d1e0      	bne.n	80093c0 <_dtoa_r+0xa78>
 80093fe:	07da      	lsls	r2, r3, #31
 8009400:	d5de      	bpl.n	80093c0 <_dtoa_r+0xa78>
 8009402:	2b39      	cmp	r3, #57	; 0x39
 8009404:	d1da      	bne.n	80093bc <_dtoa_r+0xa74>
 8009406:	2339      	movs	r3, #57	; 0x39
 8009408:	f88b 3000 	strb.w	r3, [fp]
 800940c:	463b      	mov	r3, r7
 800940e:	461f      	mov	r7, r3
 8009410:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009414:	3b01      	subs	r3, #1
 8009416:	2a39      	cmp	r2, #57	; 0x39
 8009418:	d050      	beq.n	80094bc <_dtoa_r+0xb74>
 800941a:	3201      	adds	r2, #1
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	e749      	b.n	80092b4 <_dtoa_r+0x96c>
 8009420:	2a00      	cmp	r2, #0
 8009422:	dd03      	ble.n	800942c <_dtoa_r+0xae4>
 8009424:	2b39      	cmp	r3, #57	; 0x39
 8009426:	d0ee      	beq.n	8009406 <_dtoa_r+0xabe>
 8009428:	3301      	adds	r3, #1
 800942a:	e7c9      	b.n	80093c0 <_dtoa_r+0xa78>
 800942c:	9a02      	ldr	r2, [sp, #8]
 800942e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009430:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009434:	428a      	cmp	r2, r1
 8009436:	d02a      	beq.n	800948e <_dtoa_r+0xb46>
 8009438:	4651      	mov	r1, sl
 800943a:	2300      	movs	r3, #0
 800943c:	220a      	movs	r2, #10
 800943e:	4628      	mov	r0, r5
 8009440:	f000 fc72 	bl	8009d28 <__multadd>
 8009444:	45b0      	cmp	r8, r6
 8009446:	4682      	mov	sl, r0
 8009448:	f04f 0300 	mov.w	r3, #0
 800944c:	f04f 020a 	mov.w	r2, #10
 8009450:	4641      	mov	r1, r8
 8009452:	4628      	mov	r0, r5
 8009454:	d107      	bne.n	8009466 <_dtoa_r+0xb1e>
 8009456:	f000 fc67 	bl	8009d28 <__multadd>
 800945a:	4680      	mov	r8, r0
 800945c:	4606      	mov	r6, r0
 800945e:	9b02      	ldr	r3, [sp, #8]
 8009460:	3301      	adds	r3, #1
 8009462:	9302      	str	r3, [sp, #8]
 8009464:	e777      	b.n	8009356 <_dtoa_r+0xa0e>
 8009466:	f000 fc5f 	bl	8009d28 <__multadd>
 800946a:	4631      	mov	r1, r6
 800946c:	4680      	mov	r8, r0
 800946e:	2300      	movs	r3, #0
 8009470:	220a      	movs	r2, #10
 8009472:	4628      	mov	r0, r5
 8009474:	f000 fc58 	bl	8009d28 <__multadd>
 8009478:	4606      	mov	r6, r0
 800947a:	e7f0      	b.n	800945e <_dtoa_r+0xb16>
 800947c:	f1bb 0f00 	cmp.w	fp, #0
 8009480:	bfcc      	ite	gt
 8009482:	465f      	movgt	r7, fp
 8009484:	2701      	movle	r7, #1
 8009486:	f04f 0800 	mov.w	r8, #0
 800948a:	9a08      	ldr	r2, [sp, #32]
 800948c:	4417      	add	r7, r2
 800948e:	4651      	mov	r1, sl
 8009490:	2201      	movs	r2, #1
 8009492:	4628      	mov	r0, r5
 8009494:	9302      	str	r3, [sp, #8]
 8009496:	f000 fe3d 	bl	800a114 <__lshift>
 800949a:	4621      	mov	r1, r4
 800949c:	4682      	mov	sl, r0
 800949e:	f000 fea5 	bl	800a1ec <__mcmp>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	dcb2      	bgt.n	800940c <_dtoa_r+0xac4>
 80094a6:	d102      	bne.n	80094ae <_dtoa_r+0xb66>
 80094a8:	9b02      	ldr	r3, [sp, #8]
 80094aa:	07db      	lsls	r3, r3, #31
 80094ac:	d4ae      	bmi.n	800940c <_dtoa_r+0xac4>
 80094ae:	463b      	mov	r3, r7
 80094b0:	461f      	mov	r7, r3
 80094b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094b6:	2a30      	cmp	r2, #48	; 0x30
 80094b8:	d0fa      	beq.n	80094b0 <_dtoa_r+0xb68>
 80094ba:	e6fb      	b.n	80092b4 <_dtoa_r+0x96c>
 80094bc:	9a08      	ldr	r2, [sp, #32]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d1a5      	bne.n	800940e <_dtoa_r+0xac6>
 80094c2:	2331      	movs	r3, #49	; 0x31
 80094c4:	f109 0901 	add.w	r9, r9, #1
 80094c8:	7013      	strb	r3, [r2, #0]
 80094ca:	e6f3      	b.n	80092b4 <_dtoa_r+0x96c>
 80094cc:	4b13      	ldr	r3, [pc, #76]	; (800951c <_dtoa_r+0xbd4>)
 80094ce:	f7ff baa7 	b.w	8008a20 <_dtoa_r+0xd8>
 80094d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f47f aa80 	bne.w	80089da <_dtoa_r+0x92>
 80094da:	4b11      	ldr	r3, [pc, #68]	; (8009520 <_dtoa_r+0xbd8>)
 80094dc:	f7ff baa0 	b.w	8008a20 <_dtoa_r+0xd8>
 80094e0:	f1bb 0f00 	cmp.w	fp, #0
 80094e4:	dc03      	bgt.n	80094ee <_dtoa_r+0xba6>
 80094e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	f73f aecc 	bgt.w	8009286 <_dtoa_r+0x93e>
 80094ee:	9f08      	ldr	r7, [sp, #32]
 80094f0:	4621      	mov	r1, r4
 80094f2:	4650      	mov	r0, sl
 80094f4:	f7ff f998 	bl	8008828 <quorem>
 80094f8:	9a08      	ldr	r2, [sp, #32]
 80094fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80094fe:	f807 3b01 	strb.w	r3, [r7], #1
 8009502:	1aba      	subs	r2, r7, r2
 8009504:	4593      	cmp	fp, r2
 8009506:	ddb9      	ble.n	800947c <_dtoa_r+0xb34>
 8009508:	4651      	mov	r1, sl
 800950a:	2300      	movs	r3, #0
 800950c:	220a      	movs	r2, #10
 800950e:	4628      	mov	r0, r5
 8009510:	f000 fc0a 	bl	8009d28 <__multadd>
 8009514:	4682      	mov	sl, r0
 8009516:	e7eb      	b.n	80094f0 <_dtoa_r+0xba8>
 8009518:	0800e7a4 	.word	0x0800e7a4
 800951c:	0800e5a0 	.word	0x0800e5a0
 8009520:	0800e721 	.word	0x0800e721

08009524 <rshift>:
 8009524:	6903      	ldr	r3, [r0, #16]
 8009526:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800952a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800952e:	f100 0414 	add.w	r4, r0, #20
 8009532:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009536:	dd46      	ble.n	80095c6 <rshift+0xa2>
 8009538:	f011 011f 	ands.w	r1, r1, #31
 800953c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009540:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009544:	d10c      	bne.n	8009560 <rshift+0x3c>
 8009546:	4629      	mov	r1, r5
 8009548:	f100 0710 	add.w	r7, r0, #16
 800954c:	42b1      	cmp	r1, r6
 800954e:	d335      	bcc.n	80095bc <rshift+0x98>
 8009550:	1a9b      	subs	r3, r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	1eea      	subs	r2, r5, #3
 8009556:	4296      	cmp	r6, r2
 8009558:	bf38      	it	cc
 800955a:	2300      	movcc	r3, #0
 800955c:	4423      	add	r3, r4
 800955e:	e015      	b.n	800958c <rshift+0x68>
 8009560:	46a1      	mov	r9, r4
 8009562:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009566:	f1c1 0820 	rsb	r8, r1, #32
 800956a:	40cf      	lsrs	r7, r1
 800956c:	f105 0e04 	add.w	lr, r5, #4
 8009570:	4576      	cmp	r6, lr
 8009572:	46f4      	mov	ip, lr
 8009574:	d816      	bhi.n	80095a4 <rshift+0x80>
 8009576:	1a9b      	subs	r3, r3, r2
 8009578:	009a      	lsls	r2, r3, #2
 800957a:	3a04      	subs	r2, #4
 800957c:	3501      	adds	r5, #1
 800957e:	42ae      	cmp	r6, r5
 8009580:	bf38      	it	cc
 8009582:	2200      	movcc	r2, #0
 8009584:	18a3      	adds	r3, r4, r2
 8009586:	50a7      	str	r7, [r4, r2]
 8009588:	b107      	cbz	r7, 800958c <rshift+0x68>
 800958a:	3304      	adds	r3, #4
 800958c:	42a3      	cmp	r3, r4
 800958e:	eba3 0204 	sub.w	r2, r3, r4
 8009592:	bf08      	it	eq
 8009594:	2300      	moveq	r3, #0
 8009596:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800959a:	6102      	str	r2, [r0, #16]
 800959c:	bf08      	it	eq
 800959e:	6143      	streq	r3, [r0, #20]
 80095a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095a4:	f8dc c000 	ldr.w	ip, [ip]
 80095a8:	fa0c fc08 	lsl.w	ip, ip, r8
 80095ac:	ea4c 0707 	orr.w	r7, ip, r7
 80095b0:	f849 7b04 	str.w	r7, [r9], #4
 80095b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095b8:	40cf      	lsrs	r7, r1
 80095ba:	e7d9      	b.n	8009570 <rshift+0x4c>
 80095bc:	f851 cb04 	ldr.w	ip, [r1], #4
 80095c0:	f847 cf04 	str.w	ip, [r7, #4]!
 80095c4:	e7c2      	b.n	800954c <rshift+0x28>
 80095c6:	4623      	mov	r3, r4
 80095c8:	e7e0      	b.n	800958c <rshift+0x68>

080095ca <__hexdig_fun>:
 80095ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80095ce:	2b09      	cmp	r3, #9
 80095d0:	d802      	bhi.n	80095d8 <__hexdig_fun+0xe>
 80095d2:	3820      	subs	r0, #32
 80095d4:	b2c0      	uxtb	r0, r0
 80095d6:	4770      	bx	lr
 80095d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80095dc:	2b05      	cmp	r3, #5
 80095de:	d801      	bhi.n	80095e4 <__hexdig_fun+0x1a>
 80095e0:	3847      	subs	r0, #71	; 0x47
 80095e2:	e7f7      	b.n	80095d4 <__hexdig_fun+0xa>
 80095e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80095e8:	2b05      	cmp	r3, #5
 80095ea:	d801      	bhi.n	80095f0 <__hexdig_fun+0x26>
 80095ec:	3827      	subs	r0, #39	; 0x27
 80095ee:	e7f1      	b.n	80095d4 <__hexdig_fun+0xa>
 80095f0:	2000      	movs	r0, #0
 80095f2:	4770      	bx	lr

080095f4 <__gethex>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	b08b      	sub	sp, #44	; 0x2c
 80095fa:	9306      	str	r3, [sp, #24]
 80095fc:	4bb9      	ldr	r3, [pc, #740]	; (80098e4 <__gethex+0x2f0>)
 80095fe:	9002      	str	r0, [sp, #8]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	468b      	mov	fp, r1
 8009604:	4618      	mov	r0, r3
 8009606:	4690      	mov	r8, r2
 8009608:	9303      	str	r3, [sp, #12]
 800960a:	f7f6 fda1 	bl	8000150 <strlen>
 800960e:	4682      	mov	sl, r0
 8009610:	9b03      	ldr	r3, [sp, #12]
 8009612:	f8db 2000 	ldr.w	r2, [fp]
 8009616:	4403      	add	r3, r0
 8009618:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800961c:	9307      	str	r3, [sp, #28]
 800961e:	1c93      	adds	r3, r2, #2
 8009620:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009624:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009628:	32fe      	adds	r2, #254	; 0xfe
 800962a:	18d1      	adds	r1, r2, r3
 800962c:	461f      	mov	r7, r3
 800962e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009632:	9101      	str	r1, [sp, #4]
 8009634:	2830      	cmp	r0, #48	; 0x30
 8009636:	d0f8      	beq.n	800962a <__gethex+0x36>
 8009638:	f7ff ffc7 	bl	80095ca <__hexdig_fun>
 800963c:	4604      	mov	r4, r0
 800963e:	2800      	cmp	r0, #0
 8009640:	d13a      	bne.n	80096b8 <__gethex+0xc4>
 8009642:	4652      	mov	r2, sl
 8009644:	4638      	mov	r0, r7
 8009646:	9903      	ldr	r1, [sp, #12]
 8009648:	f001 f9ea 	bl	800aa20 <strncmp>
 800964c:	4605      	mov	r5, r0
 800964e:	2800      	cmp	r0, #0
 8009650:	d166      	bne.n	8009720 <__gethex+0x12c>
 8009652:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009656:	eb07 060a 	add.w	r6, r7, sl
 800965a:	f7ff ffb6 	bl	80095ca <__hexdig_fun>
 800965e:	2800      	cmp	r0, #0
 8009660:	d060      	beq.n	8009724 <__gethex+0x130>
 8009662:	4633      	mov	r3, r6
 8009664:	7818      	ldrb	r0, [r3, #0]
 8009666:	461f      	mov	r7, r3
 8009668:	2830      	cmp	r0, #48	; 0x30
 800966a:	f103 0301 	add.w	r3, r3, #1
 800966e:	d0f9      	beq.n	8009664 <__gethex+0x70>
 8009670:	f7ff ffab 	bl	80095ca <__hexdig_fun>
 8009674:	2301      	movs	r3, #1
 8009676:	fab0 f480 	clz	r4, r0
 800967a:	4635      	mov	r5, r6
 800967c:	0964      	lsrs	r4, r4, #5
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	463a      	mov	r2, r7
 8009682:	4616      	mov	r6, r2
 8009684:	7830      	ldrb	r0, [r6, #0]
 8009686:	3201      	adds	r2, #1
 8009688:	f7ff ff9f 	bl	80095ca <__hexdig_fun>
 800968c:	2800      	cmp	r0, #0
 800968e:	d1f8      	bne.n	8009682 <__gethex+0x8e>
 8009690:	4652      	mov	r2, sl
 8009692:	4630      	mov	r0, r6
 8009694:	9903      	ldr	r1, [sp, #12]
 8009696:	f001 f9c3 	bl	800aa20 <strncmp>
 800969a:	b980      	cbnz	r0, 80096be <__gethex+0xca>
 800969c:	b94d      	cbnz	r5, 80096b2 <__gethex+0xbe>
 800969e:	eb06 050a 	add.w	r5, r6, sl
 80096a2:	462a      	mov	r2, r5
 80096a4:	4616      	mov	r6, r2
 80096a6:	7830      	ldrb	r0, [r6, #0]
 80096a8:	3201      	adds	r2, #1
 80096aa:	f7ff ff8e 	bl	80095ca <__hexdig_fun>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d1f8      	bne.n	80096a4 <__gethex+0xb0>
 80096b2:	1bad      	subs	r5, r5, r6
 80096b4:	00ad      	lsls	r5, r5, #2
 80096b6:	e004      	b.n	80096c2 <__gethex+0xce>
 80096b8:	2400      	movs	r4, #0
 80096ba:	4625      	mov	r5, r4
 80096bc:	e7e0      	b.n	8009680 <__gethex+0x8c>
 80096be:	2d00      	cmp	r5, #0
 80096c0:	d1f7      	bne.n	80096b2 <__gethex+0xbe>
 80096c2:	7833      	ldrb	r3, [r6, #0]
 80096c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096c8:	2b50      	cmp	r3, #80	; 0x50
 80096ca:	d139      	bne.n	8009740 <__gethex+0x14c>
 80096cc:	7873      	ldrb	r3, [r6, #1]
 80096ce:	2b2b      	cmp	r3, #43	; 0x2b
 80096d0:	d02a      	beq.n	8009728 <__gethex+0x134>
 80096d2:	2b2d      	cmp	r3, #45	; 0x2d
 80096d4:	d02c      	beq.n	8009730 <__gethex+0x13c>
 80096d6:	f04f 0900 	mov.w	r9, #0
 80096da:	1c71      	adds	r1, r6, #1
 80096dc:	7808      	ldrb	r0, [r1, #0]
 80096de:	f7ff ff74 	bl	80095ca <__hexdig_fun>
 80096e2:	1e43      	subs	r3, r0, #1
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b18      	cmp	r3, #24
 80096e8:	d82a      	bhi.n	8009740 <__gethex+0x14c>
 80096ea:	f1a0 0210 	sub.w	r2, r0, #16
 80096ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80096f2:	f7ff ff6a 	bl	80095ca <__hexdig_fun>
 80096f6:	1e43      	subs	r3, r0, #1
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b18      	cmp	r3, #24
 80096fc:	d91b      	bls.n	8009736 <__gethex+0x142>
 80096fe:	f1b9 0f00 	cmp.w	r9, #0
 8009702:	d000      	beq.n	8009706 <__gethex+0x112>
 8009704:	4252      	negs	r2, r2
 8009706:	4415      	add	r5, r2
 8009708:	f8cb 1000 	str.w	r1, [fp]
 800970c:	b1d4      	cbz	r4, 8009744 <__gethex+0x150>
 800970e:	9b01      	ldr	r3, [sp, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	bf14      	ite	ne
 8009714:	2700      	movne	r7, #0
 8009716:	2706      	moveq	r7, #6
 8009718:	4638      	mov	r0, r7
 800971a:	b00b      	add	sp, #44	; 0x2c
 800971c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009720:	463e      	mov	r6, r7
 8009722:	4625      	mov	r5, r4
 8009724:	2401      	movs	r4, #1
 8009726:	e7cc      	b.n	80096c2 <__gethex+0xce>
 8009728:	f04f 0900 	mov.w	r9, #0
 800972c:	1cb1      	adds	r1, r6, #2
 800972e:	e7d5      	b.n	80096dc <__gethex+0xe8>
 8009730:	f04f 0901 	mov.w	r9, #1
 8009734:	e7fa      	b.n	800972c <__gethex+0x138>
 8009736:	230a      	movs	r3, #10
 8009738:	fb03 0202 	mla	r2, r3, r2, r0
 800973c:	3a10      	subs	r2, #16
 800973e:	e7d6      	b.n	80096ee <__gethex+0xfa>
 8009740:	4631      	mov	r1, r6
 8009742:	e7e1      	b.n	8009708 <__gethex+0x114>
 8009744:	4621      	mov	r1, r4
 8009746:	1bf3      	subs	r3, r6, r7
 8009748:	3b01      	subs	r3, #1
 800974a:	2b07      	cmp	r3, #7
 800974c:	dc0a      	bgt.n	8009764 <__gethex+0x170>
 800974e:	9802      	ldr	r0, [sp, #8]
 8009750:	f000 fa88 	bl	8009c64 <_Balloc>
 8009754:	4604      	mov	r4, r0
 8009756:	b940      	cbnz	r0, 800976a <__gethex+0x176>
 8009758:	4602      	mov	r2, r0
 800975a:	21de      	movs	r1, #222	; 0xde
 800975c:	4b62      	ldr	r3, [pc, #392]	; (80098e8 <__gethex+0x2f4>)
 800975e:	4863      	ldr	r0, [pc, #396]	; (80098ec <__gethex+0x2f8>)
 8009760:	f001 f97e 	bl	800aa60 <__assert_func>
 8009764:	3101      	adds	r1, #1
 8009766:	105b      	asrs	r3, r3, #1
 8009768:	e7ef      	b.n	800974a <__gethex+0x156>
 800976a:	f04f 0b00 	mov.w	fp, #0
 800976e:	f100 0914 	add.w	r9, r0, #20
 8009772:	f1ca 0301 	rsb	r3, sl, #1
 8009776:	f8cd 9010 	str.w	r9, [sp, #16]
 800977a:	f8cd b004 	str.w	fp, [sp, #4]
 800977e:	9308      	str	r3, [sp, #32]
 8009780:	42b7      	cmp	r7, r6
 8009782:	d33f      	bcc.n	8009804 <__gethex+0x210>
 8009784:	9f04      	ldr	r7, [sp, #16]
 8009786:	9b01      	ldr	r3, [sp, #4]
 8009788:	f847 3b04 	str.w	r3, [r7], #4
 800978c:	eba7 0709 	sub.w	r7, r7, r9
 8009790:	10bf      	asrs	r7, r7, #2
 8009792:	6127      	str	r7, [r4, #16]
 8009794:	4618      	mov	r0, r3
 8009796:	f000 fb5b 	bl	8009e50 <__hi0bits>
 800979a:	017f      	lsls	r7, r7, #5
 800979c:	f8d8 6000 	ldr.w	r6, [r8]
 80097a0:	1a3f      	subs	r7, r7, r0
 80097a2:	42b7      	cmp	r7, r6
 80097a4:	dd62      	ble.n	800986c <__gethex+0x278>
 80097a6:	1bbf      	subs	r7, r7, r6
 80097a8:	4639      	mov	r1, r7
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 fef1 	bl	800a592 <__any_on>
 80097b0:	4682      	mov	sl, r0
 80097b2:	b1a8      	cbz	r0, 80097e0 <__gethex+0x1ec>
 80097b4:	f04f 0a01 	mov.w	sl, #1
 80097b8:	1e7b      	subs	r3, r7, #1
 80097ba:	1159      	asrs	r1, r3, #5
 80097bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80097c0:	f003 021f 	and.w	r2, r3, #31
 80097c4:	fa0a f202 	lsl.w	r2, sl, r2
 80097c8:	420a      	tst	r2, r1
 80097ca:	d009      	beq.n	80097e0 <__gethex+0x1ec>
 80097cc:	4553      	cmp	r3, sl
 80097ce:	dd05      	ble.n	80097dc <__gethex+0x1e8>
 80097d0:	4620      	mov	r0, r4
 80097d2:	1eb9      	subs	r1, r7, #2
 80097d4:	f000 fedd 	bl	800a592 <__any_on>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d144      	bne.n	8009866 <__gethex+0x272>
 80097dc:	f04f 0a02 	mov.w	sl, #2
 80097e0:	4639      	mov	r1, r7
 80097e2:	4620      	mov	r0, r4
 80097e4:	f7ff fe9e 	bl	8009524 <rshift>
 80097e8:	443d      	add	r5, r7
 80097ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097ee:	42ab      	cmp	r3, r5
 80097f0:	da4a      	bge.n	8009888 <__gethex+0x294>
 80097f2:	4621      	mov	r1, r4
 80097f4:	9802      	ldr	r0, [sp, #8]
 80097f6:	f000 fa75 	bl	8009ce4 <_Bfree>
 80097fa:	2300      	movs	r3, #0
 80097fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097fe:	27a3      	movs	r7, #163	; 0xa3
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	e789      	b.n	8009718 <__gethex+0x124>
 8009804:	1e73      	subs	r3, r6, #1
 8009806:	9a07      	ldr	r2, [sp, #28]
 8009808:	9305      	str	r3, [sp, #20]
 800980a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800980e:	4293      	cmp	r3, r2
 8009810:	d019      	beq.n	8009846 <__gethex+0x252>
 8009812:	f1bb 0f20 	cmp.w	fp, #32
 8009816:	d107      	bne.n	8009828 <__gethex+0x234>
 8009818:	9b04      	ldr	r3, [sp, #16]
 800981a:	9a01      	ldr	r2, [sp, #4]
 800981c:	f843 2b04 	str.w	r2, [r3], #4
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	2300      	movs	r3, #0
 8009824:	469b      	mov	fp, r3
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800982c:	f7ff fecd 	bl	80095ca <__hexdig_fun>
 8009830:	9b01      	ldr	r3, [sp, #4]
 8009832:	f000 000f 	and.w	r0, r0, #15
 8009836:	fa00 f00b 	lsl.w	r0, r0, fp
 800983a:	4303      	orrs	r3, r0
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	f10b 0b04 	add.w	fp, fp, #4
 8009842:	9b05      	ldr	r3, [sp, #20]
 8009844:	e00d      	b.n	8009862 <__gethex+0x26e>
 8009846:	9b05      	ldr	r3, [sp, #20]
 8009848:	9a08      	ldr	r2, [sp, #32]
 800984a:	4413      	add	r3, r2
 800984c:	42bb      	cmp	r3, r7
 800984e:	d3e0      	bcc.n	8009812 <__gethex+0x21e>
 8009850:	4618      	mov	r0, r3
 8009852:	4652      	mov	r2, sl
 8009854:	9903      	ldr	r1, [sp, #12]
 8009856:	9309      	str	r3, [sp, #36]	; 0x24
 8009858:	f001 f8e2 	bl	800aa20 <strncmp>
 800985c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985e:	2800      	cmp	r0, #0
 8009860:	d1d7      	bne.n	8009812 <__gethex+0x21e>
 8009862:	461e      	mov	r6, r3
 8009864:	e78c      	b.n	8009780 <__gethex+0x18c>
 8009866:	f04f 0a03 	mov.w	sl, #3
 800986a:	e7b9      	b.n	80097e0 <__gethex+0x1ec>
 800986c:	da09      	bge.n	8009882 <__gethex+0x28e>
 800986e:	1bf7      	subs	r7, r6, r7
 8009870:	4621      	mov	r1, r4
 8009872:	463a      	mov	r2, r7
 8009874:	9802      	ldr	r0, [sp, #8]
 8009876:	f000 fc4d 	bl	800a114 <__lshift>
 800987a:	4604      	mov	r4, r0
 800987c:	1bed      	subs	r5, r5, r7
 800987e:	f100 0914 	add.w	r9, r0, #20
 8009882:	f04f 0a00 	mov.w	sl, #0
 8009886:	e7b0      	b.n	80097ea <__gethex+0x1f6>
 8009888:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800988c:	42a8      	cmp	r0, r5
 800988e:	dd71      	ble.n	8009974 <__gethex+0x380>
 8009890:	1b45      	subs	r5, r0, r5
 8009892:	42ae      	cmp	r6, r5
 8009894:	dc34      	bgt.n	8009900 <__gethex+0x30c>
 8009896:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800989a:	2b02      	cmp	r3, #2
 800989c:	d028      	beq.n	80098f0 <__gethex+0x2fc>
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d02a      	beq.n	80098f8 <__gethex+0x304>
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d115      	bne.n	80098d2 <__gethex+0x2de>
 80098a6:	42ae      	cmp	r6, r5
 80098a8:	d113      	bne.n	80098d2 <__gethex+0x2de>
 80098aa:	2e01      	cmp	r6, #1
 80098ac:	d10b      	bne.n	80098c6 <__gethex+0x2d2>
 80098ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80098b2:	9a06      	ldr	r2, [sp, #24]
 80098b4:	2762      	movs	r7, #98	; 0x62
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	2301      	movs	r3, #1
 80098ba:	6123      	str	r3, [r4, #16]
 80098bc:	f8c9 3000 	str.w	r3, [r9]
 80098c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098c2:	601c      	str	r4, [r3, #0]
 80098c4:	e728      	b.n	8009718 <__gethex+0x124>
 80098c6:	4620      	mov	r0, r4
 80098c8:	1e71      	subs	r1, r6, #1
 80098ca:	f000 fe62 	bl	800a592 <__any_on>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d1ed      	bne.n	80098ae <__gethex+0x2ba>
 80098d2:	4621      	mov	r1, r4
 80098d4:	9802      	ldr	r0, [sp, #8]
 80098d6:	f000 fa05 	bl	8009ce4 <_Bfree>
 80098da:	2300      	movs	r3, #0
 80098dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80098de:	2750      	movs	r7, #80	; 0x50
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	e719      	b.n	8009718 <__gethex+0x124>
 80098e4:	0800e820 	.word	0x0800e820
 80098e8:	0800e7a4 	.word	0x0800e7a4
 80098ec:	0800e7b5 	.word	0x0800e7b5
 80098f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1ed      	bne.n	80098d2 <__gethex+0x2de>
 80098f6:	e7da      	b.n	80098ae <__gethex+0x2ba>
 80098f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1d7      	bne.n	80098ae <__gethex+0x2ba>
 80098fe:	e7e8      	b.n	80098d2 <__gethex+0x2de>
 8009900:	1e6f      	subs	r7, r5, #1
 8009902:	f1ba 0f00 	cmp.w	sl, #0
 8009906:	d132      	bne.n	800996e <__gethex+0x37a>
 8009908:	b127      	cbz	r7, 8009914 <__gethex+0x320>
 800990a:	4639      	mov	r1, r7
 800990c:	4620      	mov	r0, r4
 800990e:	f000 fe40 	bl	800a592 <__any_on>
 8009912:	4682      	mov	sl, r0
 8009914:	2101      	movs	r1, #1
 8009916:	117b      	asrs	r3, r7, #5
 8009918:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800991c:	f007 071f 	and.w	r7, r7, #31
 8009920:	fa01 f707 	lsl.w	r7, r1, r7
 8009924:	421f      	tst	r7, r3
 8009926:	f04f 0702 	mov.w	r7, #2
 800992a:	4629      	mov	r1, r5
 800992c:	4620      	mov	r0, r4
 800992e:	bf18      	it	ne
 8009930:	f04a 0a02 	orrne.w	sl, sl, #2
 8009934:	1b76      	subs	r6, r6, r5
 8009936:	f7ff fdf5 	bl	8009524 <rshift>
 800993a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800993e:	f1ba 0f00 	cmp.w	sl, #0
 8009942:	d048      	beq.n	80099d6 <__gethex+0x3e2>
 8009944:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009948:	2b02      	cmp	r3, #2
 800994a:	d015      	beq.n	8009978 <__gethex+0x384>
 800994c:	2b03      	cmp	r3, #3
 800994e:	d017      	beq.n	8009980 <__gethex+0x38c>
 8009950:	2b01      	cmp	r3, #1
 8009952:	d109      	bne.n	8009968 <__gethex+0x374>
 8009954:	f01a 0f02 	tst.w	sl, #2
 8009958:	d006      	beq.n	8009968 <__gethex+0x374>
 800995a:	f8d9 0000 	ldr.w	r0, [r9]
 800995e:	ea4a 0a00 	orr.w	sl, sl, r0
 8009962:	f01a 0f01 	tst.w	sl, #1
 8009966:	d10e      	bne.n	8009986 <__gethex+0x392>
 8009968:	f047 0710 	orr.w	r7, r7, #16
 800996c:	e033      	b.n	80099d6 <__gethex+0x3e2>
 800996e:	f04f 0a01 	mov.w	sl, #1
 8009972:	e7cf      	b.n	8009914 <__gethex+0x320>
 8009974:	2701      	movs	r7, #1
 8009976:	e7e2      	b.n	800993e <__gethex+0x34a>
 8009978:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800997a:	f1c3 0301 	rsb	r3, r3, #1
 800997e:	9315      	str	r3, [sp, #84]	; 0x54
 8009980:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009982:	2b00      	cmp	r3, #0
 8009984:	d0f0      	beq.n	8009968 <__gethex+0x374>
 8009986:	f04f 0c00 	mov.w	ip, #0
 800998a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800998e:	f104 0314 	add.w	r3, r4, #20
 8009992:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009996:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800999a:	4618      	mov	r0, r3
 800999c:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80099a4:	d01c      	beq.n	80099e0 <__gethex+0x3ec>
 80099a6:	3201      	adds	r2, #1
 80099a8:	6002      	str	r2, [r0, #0]
 80099aa:	2f02      	cmp	r7, #2
 80099ac:	f104 0314 	add.w	r3, r4, #20
 80099b0:	d13d      	bne.n	8009a2e <__gethex+0x43a>
 80099b2:	f8d8 2000 	ldr.w	r2, [r8]
 80099b6:	3a01      	subs	r2, #1
 80099b8:	42b2      	cmp	r2, r6
 80099ba:	d10a      	bne.n	80099d2 <__gethex+0x3de>
 80099bc:	2201      	movs	r2, #1
 80099be:	1171      	asrs	r1, r6, #5
 80099c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099c4:	f006 061f 	and.w	r6, r6, #31
 80099c8:	fa02 f606 	lsl.w	r6, r2, r6
 80099cc:	421e      	tst	r6, r3
 80099ce:	bf18      	it	ne
 80099d0:	4617      	movne	r7, r2
 80099d2:	f047 0720 	orr.w	r7, r7, #32
 80099d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099d8:	601c      	str	r4, [r3, #0]
 80099da:	9b06      	ldr	r3, [sp, #24]
 80099dc:	601d      	str	r5, [r3, #0]
 80099de:	e69b      	b.n	8009718 <__gethex+0x124>
 80099e0:	4299      	cmp	r1, r3
 80099e2:	f843 cc04 	str.w	ip, [r3, #-4]
 80099e6:	d8d8      	bhi.n	800999a <__gethex+0x3a6>
 80099e8:	68a3      	ldr	r3, [r4, #8]
 80099ea:	459b      	cmp	fp, r3
 80099ec:	db17      	blt.n	8009a1e <__gethex+0x42a>
 80099ee:	6861      	ldr	r1, [r4, #4]
 80099f0:	9802      	ldr	r0, [sp, #8]
 80099f2:	3101      	adds	r1, #1
 80099f4:	f000 f936 	bl	8009c64 <_Balloc>
 80099f8:	4681      	mov	r9, r0
 80099fa:	b918      	cbnz	r0, 8009a04 <__gethex+0x410>
 80099fc:	4602      	mov	r2, r0
 80099fe:	2184      	movs	r1, #132	; 0x84
 8009a00:	4b19      	ldr	r3, [pc, #100]	; (8009a68 <__gethex+0x474>)
 8009a02:	e6ac      	b.n	800975e <__gethex+0x16a>
 8009a04:	6922      	ldr	r2, [r4, #16]
 8009a06:	f104 010c 	add.w	r1, r4, #12
 8009a0a:	3202      	adds	r2, #2
 8009a0c:	0092      	lsls	r2, r2, #2
 8009a0e:	300c      	adds	r0, #12
 8009a10:	f000 f91a 	bl	8009c48 <memcpy>
 8009a14:	4621      	mov	r1, r4
 8009a16:	9802      	ldr	r0, [sp, #8]
 8009a18:	f000 f964 	bl	8009ce4 <_Bfree>
 8009a1c:	464c      	mov	r4, r9
 8009a1e:	6923      	ldr	r3, [r4, #16]
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	6122      	str	r2, [r4, #16]
 8009a24:	2201      	movs	r2, #1
 8009a26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a2a:	615a      	str	r2, [r3, #20]
 8009a2c:	e7bd      	b.n	80099aa <__gethex+0x3b6>
 8009a2e:	6922      	ldr	r2, [r4, #16]
 8009a30:	455a      	cmp	r2, fp
 8009a32:	dd0b      	ble.n	8009a4c <__gethex+0x458>
 8009a34:	2101      	movs	r1, #1
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7ff fd74 	bl	8009524 <rshift>
 8009a3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a40:	3501      	adds	r5, #1
 8009a42:	42ab      	cmp	r3, r5
 8009a44:	f6ff aed5 	blt.w	80097f2 <__gethex+0x1fe>
 8009a48:	2701      	movs	r7, #1
 8009a4a:	e7c2      	b.n	80099d2 <__gethex+0x3de>
 8009a4c:	f016 061f 	ands.w	r6, r6, #31
 8009a50:	d0fa      	beq.n	8009a48 <__gethex+0x454>
 8009a52:	449a      	add	sl, r3
 8009a54:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009a58:	f000 f9fa 	bl	8009e50 <__hi0bits>
 8009a5c:	f1c6 0620 	rsb	r6, r6, #32
 8009a60:	42b0      	cmp	r0, r6
 8009a62:	dbe7      	blt.n	8009a34 <__gethex+0x440>
 8009a64:	e7f0      	b.n	8009a48 <__gethex+0x454>
 8009a66:	bf00      	nop
 8009a68:	0800e7a4 	.word	0x0800e7a4

08009a6c <L_shift>:
 8009a6c:	f1c2 0208 	rsb	r2, r2, #8
 8009a70:	0092      	lsls	r2, r2, #2
 8009a72:	b570      	push	{r4, r5, r6, lr}
 8009a74:	f1c2 0620 	rsb	r6, r2, #32
 8009a78:	6843      	ldr	r3, [r0, #4]
 8009a7a:	6804      	ldr	r4, [r0, #0]
 8009a7c:	fa03 f506 	lsl.w	r5, r3, r6
 8009a80:	432c      	orrs	r4, r5
 8009a82:	40d3      	lsrs	r3, r2
 8009a84:	6004      	str	r4, [r0, #0]
 8009a86:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a8a:	4288      	cmp	r0, r1
 8009a8c:	d3f4      	bcc.n	8009a78 <L_shift+0xc>
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}

08009a90 <__match>:
 8009a90:	b530      	push	{r4, r5, lr}
 8009a92:	6803      	ldr	r3, [r0, #0]
 8009a94:	3301      	adds	r3, #1
 8009a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a9a:	b914      	cbnz	r4, 8009aa2 <__match+0x12>
 8009a9c:	6003      	str	r3, [r0, #0]
 8009a9e:	2001      	movs	r0, #1
 8009aa0:	bd30      	pop	{r4, r5, pc}
 8009aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009aaa:	2d19      	cmp	r5, #25
 8009aac:	bf98      	it	ls
 8009aae:	3220      	addls	r2, #32
 8009ab0:	42a2      	cmp	r2, r4
 8009ab2:	d0f0      	beq.n	8009a96 <__match+0x6>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	e7f3      	b.n	8009aa0 <__match+0x10>

08009ab8 <__hexnan>:
 8009ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009abc:	2500      	movs	r5, #0
 8009abe:	680b      	ldr	r3, [r1, #0]
 8009ac0:	4682      	mov	sl, r0
 8009ac2:	115e      	asrs	r6, r3, #5
 8009ac4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ac8:	f013 031f 	ands.w	r3, r3, #31
 8009acc:	bf18      	it	ne
 8009ace:	3604      	addne	r6, #4
 8009ad0:	1f37      	subs	r7, r6, #4
 8009ad2:	4690      	mov	r8, r2
 8009ad4:	46b9      	mov	r9, r7
 8009ad6:	463c      	mov	r4, r7
 8009ad8:	46ab      	mov	fp, r5
 8009ada:	b087      	sub	sp, #28
 8009adc:	6801      	ldr	r1, [r0, #0]
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ae4:	9502      	str	r5, [sp, #8]
 8009ae6:	784a      	ldrb	r2, [r1, #1]
 8009ae8:	1c4b      	adds	r3, r1, #1
 8009aea:	9303      	str	r3, [sp, #12]
 8009aec:	b342      	cbz	r2, 8009b40 <__hexnan+0x88>
 8009aee:	4610      	mov	r0, r2
 8009af0:	9105      	str	r1, [sp, #20]
 8009af2:	9204      	str	r2, [sp, #16]
 8009af4:	f7ff fd69 	bl	80095ca <__hexdig_fun>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d14f      	bne.n	8009b9c <__hexnan+0xe4>
 8009afc:	9a04      	ldr	r2, [sp, #16]
 8009afe:	9905      	ldr	r1, [sp, #20]
 8009b00:	2a20      	cmp	r2, #32
 8009b02:	d818      	bhi.n	8009b36 <__hexnan+0x7e>
 8009b04:	9b02      	ldr	r3, [sp, #8]
 8009b06:	459b      	cmp	fp, r3
 8009b08:	dd13      	ble.n	8009b32 <__hexnan+0x7a>
 8009b0a:	454c      	cmp	r4, r9
 8009b0c:	d206      	bcs.n	8009b1c <__hexnan+0x64>
 8009b0e:	2d07      	cmp	r5, #7
 8009b10:	dc04      	bgt.n	8009b1c <__hexnan+0x64>
 8009b12:	462a      	mov	r2, r5
 8009b14:	4649      	mov	r1, r9
 8009b16:	4620      	mov	r0, r4
 8009b18:	f7ff ffa8 	bl	8009a6c <L_shift>
 8009b1c:	4544      	cmp	r4, r8
 8009b1e:	d950      	bls.n	8009bc2 <__hexnan+0x10a>
 8009b20:	2300      	movs	r3, #0
 8009b22:	f1a4 0904 	sub.w	r9, r4, #4
 8009b26:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b2a:	461d      	mov	r5, r3
 8009b2c:	464c      	mov	r4, r9
 8009b2e:	f8cd b008 	str.w	fp, [sp, #8]
 8009b32:	9903      	ldr	r1, [sp, #12]
 8009b34:	e7d7      	b.n	8009ae6 <__hexnan+0x2e>
 8009b36:	2a29      	cmp	r2, #41	; 0x29
 8009b38:	d156      	bne.n	8009be8 <__hexnan+0x130>
 8009b3a:	3102      	adds	r1, #2
 8009b3c:	f8ca 1000 	str.w	r1, [sl]
 8009b40:	f1bb 0f00 	cmp.w	fp, #0
 8009b44:	d050      	beq.n	8009be8 <__hexnan+0x130>
 8009b46:	454c      	cmp	r4, r9
 8009b48:	d206      	bcs.n	8009b58 <__hexnan+0xa0>
 8009b4a:	2d07      	cmp	r5, #7
 8009b4c:	dc04      	bgt.n	8009b58 <__hexnan+0xa0>
 8009b4e:	462a      	mov	r2, r5
 8009b50:	4649      	mov	r1, r9
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7ff ff8a 	bl	8009a6c <L_shift>
 8009b58:	4544      	cmp	r4, r8
 8009b5a:	d934      	bls.n	8009bc6 <__hexnan+0x10e>
 8009b5c:	4623      	mov	r3, r4
 8009b5e:	f1a8 0204 	sub.w	r2, r8, #4
 8009b62:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b66:	429f      	cmp	r7, r3
 8009b68:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b6c:	d2f9      	bcs.n	8009b62 <__hexnan+0xaa>
 8009b6e:	1b3b      	subs	r3, r7, r4
 8009b70:	f023 0303 	bic.w	r3, r3, #3
 8009b74:	3304      	adds	r3, #4
 8009b76:	3401      	adds	r4, #1
 8009b78:	3e03      	subs	r6, #3
 8009b7a:	42b4      	cmp	r4, r6
 8009b7c:	bf88      	it	hi
 8009b7e:	2304      	movhi	r3, #4
 8009b80:	2200      	movs	r2, #0
 8009b82:	4443      	add	r3, r8
 8009b84:	f843 2b04 	str.w	r2, [r3], #4
 8009b88:	429f      	cmp	r7, r3
 8009b8a:	d2fb      	bcs.n	8009b84 <__hexnan+0xcc>
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	b91b      	cbnz	r3, 8009b98 <__hexnan+0xe0>
 8009b90:	4547      	cmp	r7, r8
 8009b92:	d127      	bne.n	8009be4 <__hexnan+0x12c>
 8009b94:	2301      	movs	r3, #1
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	2005      	movs	r0, #5
 8009b9a:	e026      	b.n	8009bea <__hexnan+0x132>
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	2d08      	cmp	r5, #8
 8009ba0:	f10b 0b01 	add.w	fp, fp, #1
 8009ba4:	dd06      	ble.n	8009bb4 <__hexnan+0xfc>
 8009ba6:	4544      	cmp	r4, r8
 8009ba8:	d9c3      	bls.n	8009b32 <__hexnan+0x7a>
 8009baa:	2300      	movs	r3, #0
 8009bac:	2501      	movs	r5, #1
 8009bae:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bb2:	3c04      	subs	r4, #4
 8009bb4:	6822      	ldr	r2, [r4, #0]
 8009bb6:	f000 000f 	and.w	r0, r0, #15
 8009bba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009bbe:	6022      	str	r2, [r4, #0]
 8009bc0:	e7b7      	b.n	8009b32 <__hexnan+0x7a>
 8009bc2:	2508      	movs	r5, #8
 8009bc4:	e7b5      	b.n	8009b32 <__hexnan+0x7a>
 8009bc6:	9b01      	ldr	r3, [sp, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0df      	beq.n	8009b8c <__hexnan+0xd4>
 8009bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd0:	f1c3 0320 	rsb	r3, r3, #32
 8009bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009bdc:	401a      	ands	r2, r3
 8009bde:	f846 2c04 	str.w	r2, [r6, #-4]
 8009be2:	e7d3      	b.n	8009b8c <__hexnan+0xd4>
 8009be4:	3f04      	subs	r7, #4
 8009be6:	e7d1      	b.n	8009b8c <__hexnan+0xd4>
 8009be8:	2004      	movs	r0, #4
 8009bea:	b007      	add	sp, #28
 8009bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bf0 <_localeconv_r>:
 8009bf0:	4800      	ldr	r0, [pc, #0]	; (8009bf4 <_localeconv_r+0x4>)
 8009bf2:	4770      	bx	lr
 8009bf4:	20000164 	.word	0x20000164

08009bf8 <malloc>:
 8009bf8:	4b02      	ldr	r3, [pc, #8]	; (8009c04 <malloc+0xc>)
 8009bfa:	4601      	mov	r1, r0
 8009bfc:	6818      	ldr	r0, [r3, #0]
 8009bfe:	f000 bd43 	b.w	800a688 <_malloc_r>
 8009c02:	bf00      	nop
 8009c04:	2000000c 	.word	0x2000000c

08009c08 <__ascii_mbtowc>:
 8009c08:	b082      	sub	sp, #8
 8009c0a:	b901      	cbnz	r1, 8009c0e <__ascii_mbtowc+0x6>
 8009c0c:	a901      	add	r1, sp, #4
 8009c0e:	b142      	cbz	r2, 8009c22 <__ascii_mbtowc+0x1a>
 8009c10:	b14b      	cbz	r3, 8009c26 <__ascii_mbtowc+0x1e>
 8009c12:	7813      	ldrb	r3, [r2, #0]
 8009c14:	600b      	str	r3, [r1, #0]
 8009c16:	7812      	ldrb	r2, [r2, #0]
 8009c18:	1e10      	subs	r0, r2, #0
 8009c1a:	bf18      	it	ne
 8009c1c:	2001      	movne	r0, #1
 8009c1e:	b002      	add	sp, #8
 8009c20:	4770      	bx	lr
 8009c22:	4610      	mov	r0, r2
 8009c24:	e7fb      	b.n	8009c1e <__ascii_mbtowc+0x16>
 8009c26:	f06f 0001 	mvn.w	r0, #1
 8009c2a:	e7f8      	b.n	8009c1e <__ascii_mbtowc+0x16>

08009c2c <memchr>:
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	b510      	push	{r4, lr}
 8009c30:	b2c9      	uxtb	r1, r1
 8009c32:	4402      	add	r2, r0
 8009c34:	4293      	cmp	r3, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	d101      	bne.n	8009c3e <memchr+0x12>
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	e003      	b.n	8009c46 <memchr+0x1a>
 8009c3e:	7804      	ldrb	r4, [r0, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	428c      	cmp	r4, r1
 8009c44:	d1f6      	bne.n	8009c34 <memchr+0x8>
 8009c46:	bd10      	pop	{r4, pc}

08009c48 <memcpy>:
 8009c48:	440a      	add	r2, r1
 8009c4a:	4291      	cmp	r1, r2
 8009c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c50:	d100      	bne.n	8009c54 <memcpy+0xc>
 8009c52:	4770      	bx	lr
 8009c54:	b510      	push	{r4, lr}
 8009c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c5a:	4291      	cmp	r1, r2
 8009c5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c60:	d1f9      	bne.n	8009c56 <memcpy+0xe>
 8009c62:	bd10      	pop	{r4, pc}

08009c64 <_Balloc>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c68:	4604      	mov	r4, r0
 8009c6a:	460d      	mov	r5, r1
 8009c6c:	b976      	cbnz	r6, 8009c8c <_Balloc+0x28>
 8009c6e:	2010      	movs	r0, #16
 8009c70:	f7ff ffc2 	bl	8009bf8 <malloc>
 8009c74:	4602      	mov	r2, r0
 8009c76:	6260      	str	r0, [r4, #36]	; 0x24
 8009c78:	b920      	cbnz	r0, 8009c84 <_Balloc+0x20>
 8009c7a:	2166      	movs	r1, #102	; 0x66
 8009c7c:	4b17      	ldr	r3, [pc, #92]	; (8009cdc <_Balloc+0x78>)
 8009c7e:	4818      	ldr	r0, [pc, #96]	; (8009ce0 <_Balloc+0x7c>)
 8009c80:	f000 feee 	bl	800aa60 <__assert_func>
 8009c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c88:	6006      	str	r6, [r0, #0]
 8009c8a:	60c6      	str	r6, [r0, #12]
 8009c8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c8e:	68f3      	ldr	r3, [r6, #12]
 8009c90:	b183      	cbz	r3, 8009cb4 <_Balloc+0x50>
 8009c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c9a:	b9b8      	cbnz	r0, 8009ccc <_Balloc+0x68>
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	fa01 f605 	lsl.w	r6, r1, r5
 8009ca2:	1d72      	adds	r2, r6, #5
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	0092      	lsls	r2, r2, #2
 8009ca8:	f000 fc94 	bl	800a5d4 <_calloc_r>
 8009cac:	b160      	cbz	r0, 8009cc8 <_Balloc+0x64>
 8009cae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cb2:	e00e      	b.n	8009cd2 <_Balloc+0x6e>
 8009cb4:	2221      	movs	r2, #33	; 0x21
 8009cb6:	2104      	movs	r1, #4
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fc8b 	bl	800a5d4 <_calloc_r>
 8009cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cc0:	60f0      	str	r0, [r6, #12]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1e4      	bne.n	8009c92 <_Balloc+0x2e>
 8009cc8:	2000      	movs	r0, #0
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
 8009ccc:	6802      	ldr	r2, [r0, #0]
 8009cce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cd8:	e7f7      	b.n	8009cca <_Balloc+0x66>
 8009cda:	bf00      	nop
 8009cdc:	0800e72e 	.word	0x0800e72e
 8009ce0:	0800e834 	.word	0x0800e834

08009ce4 <_Bfree>:
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ce8:	4605      	mov	r5, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	b976      	cbnz	r6, 8009d0c <_Bfree+0x28>
 8009cee:	2010      	movs	r0, #16
 8009cf0:	f7ff ff82 	bl	8009bf8 <malloc>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	6268      	str	r0, [r5, #36]	; 0x24
 8009cf8:	b920      	cbnz	r0, 8009d04 <_Bfree+0x20>
 8009cfa:	218a      	movs	r1, #138	; 0x8a
 8009cfc:	4b08      	ldr	r3, [pc, #32]	; (8009d20 <_Bfree+0x3c>)
 8009cfe:	4809      	ldr	r0, [pc, #36]	; (8009d24 <_Bfree+0x40>)
 8009d00:	f000 feae 	bl	800aa60 <__assert_func>
 8009d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d08:	6006      	str	r6, [r0, #0]
 8009d0a:	60c6      	str	r6, [r0, #12]
 8009d0c:	b13c      	cbz	r4, 8009d1e <_Bfree+0x3a>
 8009d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d10:	6862      	ldr	r2, [r4, #4]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d18:	6021      	str	r1, [r4, #0]
 8009d1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d1e:	bd70      	pop	{r4, r5, r6, pc}
 8009d20:	0800e72e 	.word	0x0800e72e
 8009d24:	0800e834 	.word	0x0800e834

08009d28 <__multadd>:
 8009d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2c:	4698      	mov	r8, r3
 8009d2e:	460c      	mov	r4, r1
 8009d30:	2300      	movs	r3, #0
 8009d32:	690e      	ldr	r6, [r1, #16]
 8009d34:	4607      	mov	r7, r0
 8009d36:	f101 0014 	add.w	r0, r1, #20
 8009d3a:	6805      	ldr	r5, [r0, #0]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	b2a9      	uxth	r1, r5
 8009d40:	fb02 8101 	mla	r1, r2, r1, r8
 8009d44:	0c2d      	lsrs	r5, r5, #16
 8009d46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009d4a:	fb02 c505 	mla	r5, r2, r5, ip
 8009d4e:	b289      	uxth	r1, r1
 8009d50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009d54:	429e      	cmp	r6, r3
 8009d56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009d5a:	f840 1b04 	str.w	r1, [r0], #4
 8009d5e:	dcec      	bgt.n	8009d3a <__multadd+0x12>
 8009d60:	f1b8 0f00 	cmp.w	r8, #0
 8009d64:	d022      	beq.n	8009dac <__multadd+0x84>
 8009d66:	68a3      	ldr	r3, [r4, #8]
 8009d68:	42b3      	cmp	r3, r6
 8009d6a:	dc19      	bgt.n	8009da0 <__multadd+0x78>
 8009d6c:	6861      	ldr	r1, [r4, #4]
 8009d6e:	4638      	mov	r0, r7
 8009d70:	3101      	adds	r1, #1
 8009d72:	f7ff ff77 	bl	8009c64 <_Balloc>
 8009d76:	4605      	mov	r5, r0
 8009d78:	b928      	cbnz	r0, 8009d86 <__multadd+0x5e>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	21b5      	movs	r1, #181	; 0xb5
 8009d7e:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <__multadd+0x8c>)
 8009d80:	480d      	ldr	r0, [pc, #52]	; (8009db8 <__multadd+0x90>)
 8009d82:	f000 fe6d 	bl	800aa60 <__assert_func>
 8009d86:	6922      	ldr	r2, [r4, #16]
 8009d88:	f104 010c 	add.w	r1, r4, #12
 8009d8c:	3202      	adds	r2, #2
 8009d8e:	0092      	lsls	r2, r2, #2
 8009d90:	300c      	adds	r0, #12
 8009d92:	f7ff ff59 	bl	8009c48 <memcpy>
 8009d96:	4621      	mov	r1, r4
 8009d98:	4638      	mov	r0, r7
 8009d9a:	f7ff ffa3 	bl	8009ce4 <_Bfree>
 8009d9e:	462c      	mov	r4, r5
 8009da0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009da4:	3601      	adds	r6, #1
 8009da6:	f8c3 8014 	str.w	r8, [r3, #20]
 8009daa:	6126      	str	r6, [r4, #16]
 8009dac:	4620      	mov	r0, r4
 8009dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db2:	bf00      	nop
 8009db4:	0800e7a4 	.word	0x0800e7a4
 8009db8:	0800e834 	.word	0x0800e834

08009dbc <__s2b>:
 8009dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc0:	4615      	mov	r5, r2
 8009dc2:	2209      	movs	r2, #9
 8009dc4:	461f      	mov	r7, r3
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	460c      	mov	r4, r1
 8009dca:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dce:	4606      	mov	r6, r0
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	db09      	blt.n	8009dec <__s2b+0x30>
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff ff43 	bl	8009c64 <_Balloc>
 8009dde:	b940      	cbnz	r0, 8009df2 <__s2b+0x36>
 8009de0:	4602      	mov	r2, r0
 8009de2:	21ce      	movs	r1, #206	; 0xce
 8009de4:	4b18      	ldr	r3, [pc, #96]	; (8009e48 <__s2b+0x8c>)
 8009de6:	4819      	ldr	r0, [pc, #100]	; (8009e4c <__s2b+0x90>)
 8009de8:	f000 fe3a 	bl	800aa60 <__assert_func>
 8009dec:	0052      	lsls	r2, r2, #1
 8009dee:	3101      	adds	r1, #1
 8009df0:	e7f0      	b.n	8009dd4 <__s2b+0x18>
 8009df2:	9b08      	ldr	r3, [sp, #32]
 8009df4:	2d09      	cmp	r5, #9
 8009df6:	6143      	str	r3, [r0, #20]
 8009df8:	f04f 0301 	mov.w	r3, #1
 8009dfc:	6103      	str	r3, [r0, #16]
 8009dfe:	dd16      	ble.n	8009e2e <__s2b+0x72>
 8009e00:	f104 0909 	add.w	r9, r4, #9
 8009e04:	46c8      	mov	r8, r9
 8009e06:	442c      	add	r4, r5
 8009e08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e0c:	4601      	mov	r1, r0
 8009e0e:	220a      	movs	r2, #10
 8009e10:	4630      	mov	r0, r6
 8009e12:	3b30      	subs	r3, #48	; 0x30
 8009e14:	f7ff ff88 	bl	8009d28 <__multadd>
 8009e18:	45a0      	cmp	r8, r4
 8009e1a:	d1f5      	bne.n	8009e08 <__s2b+0x4c>
 8009e1c:	f1a5 0408 	sub.w	r4, r5, #8
 8009e20:	444c      	add	r4, r9
 8009e22:	1b2d      	subs	r5, r5, r4
 8009e24:	1963      	adds	r3, r4, r5
 8009e26:	42bb      	cmp	r3, r7
 8009e28:	db04      	blt.n	8009e34 <__s2b+0x78>
 8009e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e2e:	2509      	movs	r5, #9
 8009e30:	340a      	adds	r4, #10
 8009e32:	e7f6      	b.n	8009e22 <__s2b+0x66>
 8009e34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e38:	4601      	mov	r1, r0
 8009e3a:	220a      	movs	r2, #10
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	3b30      	subs	r3, #48	; 0x30
 8009e40:	f7ff ff72 	bl	8009d28 <__multadd>
 8009e44:	e7ee      	b.n	8009e24 <__s2b+0x68>
 8009e46:	bf00      	nop
 8009e48:	0800e7a4 	.word	0x0800e7a4
 8009e4c:	0800e834 	.word	0x0800e834

08009e50 <__hi0bits>:
 8009e50:	0c02      	lsrs	r2, r0, #16
 8009e52:	0412      	lsls	r2, r2, #16
 8009e54:	4603      	mov	r3, r0
 8009e56:	b9ca      	cbnz	r2, 8009e8c <__hi0bits+0x3c>
 8009e58:	0403      	lsls	r3, r0, #16
 8009e5a:	2010      	movs	r0, #16
 8009e5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009e60:	bf04      	itt	eq
 8009e62:	021b      	lsleq	r3, r3, #8
 8009e64:	3008      	addeq	r0, #8
 8009e66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009e6a:	bf04      	itt	eq
 8009e6c:	011b      	lsleq	r3, r3, #4
 8009e6e:	3004      	addeq	r0, #4
 8009e70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009e74:	bf04      	itt	eq
 8009e76:	009b      	lsleq	r3, r3, #2
 8009e78:	3002      	addeq	r0, #2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	db05      	blt.n	8009e8a <__hi0bits+0x3a>
 8009e7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009e82:	f100 0001 	add.w	r0, r0, #1
 8009e86:	bf08      	it	eq
 8009e88:	2020      	moveq	r0, #32
 8009e8a:	4770      	bx	lr
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e7e5      	b.n	8009e5c <__hi0bits+0xc>

08009e90 <__lo0bits>:
 8009e90:	6803      	ldr	r3, [r0, #0]
 8009e92:	4602      	mov	r2, r0
 8009e94:	f013 0007 	ands.w	r0, r3, #7
 8009e98:	d00b      	beq.n	8009eb2 <__lo0bits+0x22>
 8009e9a:	07d9      	lsls	r1, r3, #31
 8009e9c:	d422      	bmi.n	8009ee4 <__lo0bits+0x54>
 8009e9e:	0798      	lsls	r0, r3, #30
 8009ea0:	bf49      	itett	mi
 8009ea2:	085b      	lsrmi	r3, r3, #1
 8009ea4:	089b      	lsrpl	r3, r3, #2
 8009ea6:	2001      	movmi	r0, #1
 8009ea8:	6013      	strmi	r3, [r2, #0]
 8009eaa:	bf5c      	itt	pl
 8009eac:	2002      	movpl	r0, #2
 8009eae:	6013      	strpl	r3, [r2, #0]
 8009eb0:	4770      	bx	lr
 8009eb2:	b299      	uxth	r1, r3
 8009eb4:	b909      	cbnz	r1, 8009eba <__lo0bits+0x2a>
 8009eb6:	2010      	movs	r0, #16
 8009eb8:	0c1b      	lsrs	r3, r3, #16
 8009eba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009ebe:	bf04      	itt	eq
 8009ec0:	0a1b      	lsreq	r3, r3, #8
 8009ec2:	3008      	addeq	r0, #8
 8009ec4:	0719      	lsls	r1, r3, #28
 8009ec6:	bf04      	itt	eq
 8009ec8:	091b      	lsreq	r3, r3, #4
 8009eca:	3004      	addeq	r0, #4
 8009ecc:	0799      	lsls	r1, r3, #30
 8009ece:	bf04      	itt	eq
 8009ed0:	089b      	lsreq	r3, r3, #2
 8009ed2:	3002      	addeq	r0, #2
 8009ed4:	07d9      	lsls	r1, r3, #31
 8009ed6:	d403      	bmi.n	8009ee0 <__lo0bits+0x50>
 8009ed8:	085b      	lsrs	r3, r3, #1
 8009eda:	f100 0001 	add.w	r0, r0, #1
 8009ede:	d003      	beq.n	8009ee8 <__lo0bits+0x58>
 8009ee0:	6013      	str	r3, [r2, #0]
 8009ee2:	4770      	bx	lr
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	4770      	bx	lr
 8009ee8:	2020      	movs	r0, #32
 8009eea:	4770      	bx	lr

08009eec <__i2b>:
 8009eec:	b510      	push	{r4, lr}
 8009eee:	460c      	mov	r4, r1
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	f7ff feb7 	bl	8009c64 <_Balloc>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	b928      	cbnz	r0, 8009f06 <__i2b+0x1a>
 8009efa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009efe:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <__i2b+0x24>)
 8009f00:	4804      	ldr	r0, [pc, #16]	; (8009f14 <__i2b+0x28>)
 8009f02:	f000 fdad 	bl	800aa60 <__assert_func>
 8009f06:	2301      	movs	r3, #1
 8009f08:	6144      	str	r4, [r0, #20]
 8009f0a:	6103      	str	r3, [r0, #16]
 8009f0c:	bd10      	pop	{r4, pc}
 8009f0e:	bf00      	nop
 8009f10:	0800e7a4 	.word	0x0800e7a4
 8009f14:	0800e834 	.word	0x0800e834

08009f18 <__multiply>:
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	690a      	ldr	r2, [r1, #16]
 8009f20:	6923      	ldr	r3, [r4, #16]
 8009f22:	460d      	mov	r5, r1
 8009f24:	429a      	cmp	r2, r3
 8009f26:	bfbe      	ittt	lt
 8009f28:	460b      	movlt	r3, r1
 8009f2a:	4625      	movlt	r5, r4
 8009f2c:	461c      	movlt	r4, r3
 8009f2e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009f32:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009f36:	68ab      	ldr	r3, [r5, #8]
 8009f38:	6869      	ldr	r1, [r5, #4]
 8009f3a:	eb0a 0709 	add.w	r7, sl, r9
 8009f3e:	42bb      	cmp	r3, r7
 8009f40:	b085      	sub	sp, #20
 8009f42:	bfb8      	it	lt
 8009f44:	3101      	addlt	r1, #1
 8009f46:	f7ff fe8d 	bl	8009c64 <_Balloc>
 8009f4a:	b930      	cbnz	r0, 8009f5a <__multiply+0x42>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	f240 115d 	movw	r1, #349	; 0x15d
 8009f52:	4b41      	ldr	r3, [pc, #260]	; (800a058 <__multiply+0x140>)
 8009f54:	4841      	ldr	r0, [pc, #260]	; (800a05c <__multiply+0x144>)
 8009f56:	f000 fd83 	bl	800aa60 <__assert_func>
 8009f5a:	f100 0614 	add.w	r6, r0, #20
 8009f5e:	4633      	mov	r3, r6
 8009f60:	2200      	movs	r2, #0
 8009f62:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009f66:	4543      	cmp	r3, r8
 8009f68:	d31e      	bcc.n	8009fa8 <__multiply+0x90>
 8009f6a:	f105 0c14 	add.w	ip, r5, #20
 8009f6e:	f104 0314 	add.w	r3, r4, #20
 8009f72:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009f76:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009f7a:	9202      	str	r2, [sp, #8]
 8009f7c:	ebac 0205 	sub.w	r2, ip, r5
 8009f80:	3a15      	subs	r2, #21
 8009f82:	f022 0203 	bic.w	r2, r2, #3
 8009f86:	3204      	adds	r2, #4
 8009f88:	f105 0115 	add.w	r1, r5, #21
 8009f8c:	458c      	cmp	ip, r1
 8009f8e:	bf38      	it	cc
 8009f90:	2204      	movcc	r2, #4
 8009f92:	9201      	str	r2, [sp, #4]
 8009f94:	9a02      	ldr	r2, [sp, #8]
 8009f96:	9303      	str	r3, [sp, #12]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d808      	bhi.n	8009fae <__multiply+0x96>
 8009f9c:	2f00      	cmp	r7, #0
 8009f9e:	dc55      	bgt.n	800a04c <__multiply+0x134>
 8009fa0:	6107      	str	r7, [r0, #16]
 8009fa2:	b005      	add	sp, #20
 8009fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa8:	f843 2b04 	str.w	r2, [r3], #4
 8009fac:	e7db      	b.n	8009f66 <__multiply+0x4e>
 8009fae:	f8b3 a000 	ldrh.w	sl, [r3]
 8009fb2:	f1ba 0f00 	cmp.w	sl, #0
 8009fb6:	d020      	beq.n	8009ffa <__multiply+0xe2>
 8009fb8:	46b1      	mov	r9, r6
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f105 0e14 	add.w	lr, r5, #20
 8009fc0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009fc4:	f8d9 b000 	ldr.w	fp, [r9]
 8009fc8:	b2a1      	uxth	r1, r4
 8009fca:	fa1f fb8b 	uxth.w	fp, fp
 8009fce:	fb0a b101 	mla	r1, sl, r1, fp
 8009fd2:	4411      	add	r1, r2
 8009fd4:	f8d9 2000 	ldr.w	r2, [r9]
 8009fd8:	0c24      	lsrs	r4, r4, #16
 8009fda:	0c12      	lsrs	r2, r2, #16
 8009fdc:	fb0a 2404 	mla	r4, sl, r4, r2
 8009fe0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009fe4:	b289      	uxth	r1, r1
 8009fe6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009fea:	45f4      	cmp	ip, lr
 8009fec:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009ff0:	f849 1b04 	str.w	r1, [r9], #4
 8009ff4:	d8e4      	bhi.n	8009fc0 <__multiply+0xa8>
 8009ff6:	9901      	ldr	r1, [sp, #4]
 8009ff8:	5072      	str	r2, [r6, r1]
 8009ffa:	9a03      	ldr	r2, [sp, #12]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a002:	f1b9 0f00 	cmp.w	r9, #0
 800a006:	d01f      	beq.n	800a048 <__multiply+0x130>
 800a008:	46b6      	mov	lr, r6
 800a00a:	f04f 0a00 	mov.w	sl, #0
 800a00e:	6834      	ldr	r4, [r6, #0]
 800a010:	f105 0114 	add.w	r1, r5, #20
 800a014:	880a      	ldrh	r2, [r1, #0]
 800a016:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a01a:	b2a4      	uxth	r4, r4
 800a01c:	fb09 b202 	mla	r2, r9, r2, fp
 800a020:	4492      	add	sl, r2
 800a022:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a026:	f84e 4b04 	str.w	r4, [lr], #4
 800a02a:	f851 4b04 	ldr.w	r4, [r1], #4
 800a02e:	f8be 2000 	ldrh.w	r2, [lr]
 800a032:	0c24      	lsrs	r4, r4, #16
 800a034:	fb09 2404 	mla	r4, r9, r4, r2
 800a038:	458c      	cmp	ip, r1
 800a03a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a03e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a042:	d8e7      	bhi.n	800a014 <__multiply+0xfc>
 800a044:	9a01      	ldr	r2, [sp, #4]
 800a046:	50b4      	str	r4, [r6, r2]
 800a048:	3604      	adds	r6, #4
 800a04a:	e7a3      	b.n	8009f94 <__multiply+0x7c>
 800a04c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1a5      	bne.n	8009fa0 <__multiply+0x88>
 800a054:	3f01      	subs	r7, #1
 800a056:	e7a1      	b.n	8009f9c <__multiply+0x84>
 800a058:	0800e7a4 	.word	0x0800e7a4
 800a05c:	0800e834 	.word	0x0800e834

0800a060 <__pow5mult>:
 800a060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a064:	4615      	mov	r5, r2
 800a066:	f012 0203 	ands.w	r2, r2, #3
 800a06a:	4606      	mov	r6, r0
 800a06c:	460f      	mov	r7, r1
 800a06e:	d007      	beq.n	800a080 <__pow5mult+0x20>
 800a070:	4c25      	ldr	r4, [pc, #148]	; (800a108 <__pow5mult+0xa8>)
 800a072:	3a01      	subs	r2, #1
 800a074:	2300      	movs	r3, #0
 800a076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a07a:	f7ff fe55 	bl	8009d28 <__multadd>
 800a07e:	4607      	mov	r7, r0
 800a080:	10ad      	asrs	r5, r5, #2
 800a082:	d03d      	beq.n	800a100 <__pow5mult+0xa0>
 800a084:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a086:	b97c      	cbnz	r4, 800a0a8 <__pow5mult+0x48>
 800a088:	2010      	movs	r0, #16
 800a08a:	f7ff fdb5 	bl	8009bf8 <malloc>
 800a08e:	4602      	mov	r2, r0
 800a090:	6270      	str	r0, [r6, #36]	; 0x24
 800a092:	b928      	cbnz	r0, 800a0a0 <__pow5mult+0x40>
 800a094:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a098:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <__pow5mult+0xac>)
 800a09a:	481d      	ldr	r0, [pc, #116]	; (800a110 <__pow5mult+0xb0>)
 800a09c:	f000 fce0 	bl	800aa60 <__assert_func>
 800a0a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0a4:	6004      	str	r4, [r0, #0]
 800a0a6:	60c4      	str	r4, [r0, #12]
 800a0a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a0ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0b0:	b94c      	cbnz	r4, 800a0c6 <__pow5mult+0x66>
 800a0b2:	f240 2171 	movw	r1, #625	; 0x271
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f7ff ff18 	bl	8009eec <__i2b>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0c4:	6003      	str	r3, [r0, #0]
 800a0c6:	f04f 0900 	mov.w	r9, #0
 800a0ca:	07eb      	lsls	r3, r5, #31
 800a0cc:	d50a      	bpl.n	800a0e4 <__pow5mult+0x84>
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7ff ff20 	bl	8009f18 <__multiply>
 800a0d8:	4680      	mov	r8, r0
 800a0da:	4639      	mov	r1, r7
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f7ff fe01 	bl	8009ce4 <_Bfree>
 800a0e2:	4647      	mov	r7, r8
 800a0e4:	106d      	asrs	r5, r5, #1
 800a0e6:	d00b      	beq.n	800a100 <__pow5mult+0xa0>
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	b938      	cbnz	r0, 800a0fc <__pow5mult+0x9c>
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7ff ff11 	bl	8009f18 <__multiply>
 800a0f6:	6020      	str	r0, [r4, #0]
 800a0f8:	f8c0 9000 	str.w	r9, [r0]
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	e7e4      	b.n	800a0ca <__pow5mult+0x6a>
 800a100:	4638      	mov	r0, r7
 800a102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a106:	bf00      	nop
 800a108:	0800e988 	.word	0x0800e988
 800a10c:	0800e72e 	.word	0x0800e72e
 800a110:	0800e834 	.word	0x0800e834

0800a114 <__lshift>:
 800a114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a118:	460c      	mov	r4, r1
 800a11a:	4607      	mov	r7, r0
 800a11c:	4691      	mov	r9, r2
 800a11e:	6923      	ldr	r3, [r4, #16]
 800a120:	6849      	ldr	r1, [r1, #4]
 800a122:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a126:	68a3      	ldr	r3, [r4, #8]
 800a128:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a12c:	f108 0601 	add.w	r6, r8, #1
 800a130:	42b3      	cmp	r3, r6
 800a132:	db0b      	blt.n	800a14c <__lshift+0x38>
 800a134:	4638      	mov	r0, r7
 800a136:	f7ff fd95 	bl	8009c64 <_Balloc>
 800a13a:	4605      	mov	r5, r0
 800a13c:	b948      	cbnz	r0, 800a152 <__lshift+0x3e>
 800a13e:	4602      	mov	r2, r0
 800a140:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a144:	4b27      	ldr	r3, [pc, #156]	; (800a1e4 <__lshift+0xd0>)
 800a146:	4828      	ldr	r0, [pc, #160]	; (800a1e8 <__lshift+0xd4>)
 800a148:	f000 fc8a 	bl	800aa60 <__assert_func>
 800a14c:	3101      	adds	r1, #1
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	e7ee      	b.n	800a130 <__lshift+0x1c>
 800a152:	2300      	movs	r3, #0
 800a154:	f100 0114 	add.w	r1, r0, #20
 800a158:	f100 0210 	add.w	r2, r0, #16
 800a15c:	4618      	mov	r0, r3
 800a15e:	4553      	cmp	r3, sl
 800a160:	db33      	blt.n	800a1ca <__lshift+0xb6>
 800a162:	6920      	ldr	r0, [r4, #16]
 800a164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a168:	f104 0314 	add.w	r3, r4, #20
 800a16c:	f019 091f 	ands.w	r9, r9, #31
 800a170:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a174:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a178:	d02b      	beq.n	800a1d2 <__lshift+0xbe>
 800a17a:	468a      	mov	sl, r1
 800a17c:	2200      	movs	r2, #0
 800a17e:	f1c9 0e20 	rsb	lr, r9, #32
 800a182:	6818      	ldr	r0, [r3, #0]
 800a184:	fa00 f009 	lsl.w	r0, r0, r9
 800a188:	4302      	orrs	r2, r0
 800a18a:	f84a 2b04 	str.w	r2, [sl], #4
 800a18e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a192:	459c      	cmp	ip, r3
 800a194:	fa22 f20e 	lsr.w	r2, r2, lr
 800a198:	d8f3      	bhi.n	800a182 <__lshift+0x6e>
 800a19a:	ebac 0304 	sub.w	r3, ip, r4
 800a19e:	3b15      	subs	r3, #21
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	f104 0015 	add.w	r0, r4, #21
 800a1aa:	4584      	cmp	ip, r0
 800a1ac:	bf38      	it	cc
 800a1ae:	2304      	movcc	r3, #4
 800a1b0:	50ca      	str	r2, [r1, r3]
 800a1b2:	b10a      	cbz	r2, 800a1b8 <__lshift+0xa4>
 800a1b4:	f108 0602 	add.w	r6, r8, #2
 800a1b8:	3e01      	subs	r6, #1
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	4621      	mov	r1, r4
 800a1be:	612e      	str	r6, [r5, #16]
 800a1c0:	f7ff fd90 	bl	8009ce4 <_Bfree>
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	e7c5      	b.n	800a15e <__lshift+0x4a>
 800a1d2:	3904      	subs	r1, #4
 800a1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1d8:	459c      	cmp	ip, r3
 800a1da:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1de:	d8f9      	bhi.n	800a1d4 <__lshift+0xc0>
 800a1e0:	e7ea      	b.n	800a1b8 <__lshift+0xa4>
 800a1e2:	bf00      	nop
 800a1e4:	0800e7a4 	.word	0x0800e7a4
 800a1e8:	0800e834 	.word	0x0800e834

0800a1ec <__mcmp>:
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	690a      	ldr	r2, [r1, #16]
 800a1f0:	6900      	ldr	r0, [r0, #16]
 800a1f2:	b530      	push	{r4, r5, lr}
 800a1f4:	1a80      	subs	r0, r0, r2
 800a1f6:	d10d      	bne.n	800a214 <__mcmp+0x28>
 800a1f8:	3314      	adds	r3, #20
 800a1fa:	3114      	adds	r1, #20
 800a1fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a200:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a204:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a208:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a20c:	4295      	cmp	r5, r2
 800a20e:	d002      	beq.n	800a216 <__mcmp+0x2a>
 800a210:	d304      	bcc.n	800a21c <__mcmp+0x30>
 800a212:	2001      	movs	r0, #1
 800a214:	bd30      	pop	{r4, r5, pc}
 800a216:	42a3      	cmp	r3, r4
 800a218:	d3f4      	bcc.n	800a204 <__mcmp+0x18>
 800a21a:	e7fb      	b.n	800a214 <__mcmp+0x28>
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	e7f8      	b.n	800a214 <__mcmp+0x28>
	...

0800a224 <__mdiff>:
 800a224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	460c      	mov	r4, r1
 800a22a:	4606      	mov	r6, r0
 800a22c:	4611      	mov	r1, r2
 800a22e:	4620      	mov	r0, r4
 800a230:	4692      	mov	sl, r2
 800a232:	f7ff ffdb 	bl	800a1ec <__mcmp>
 800a236:	1e05      	subs	r5, r0, #0
 800a238:	d111      	bne.n	800a25e <__mdiff+0x3a>
 800a23a:	4629      	mov	r1, r5
 800a23c:	4630      	mov	r0, r6
 800a23e:	f7ff fd11 	bl	8009c64 <_Balloc>
 800a242:	4602      	mov	r2, r0
 800a244:	b928      	cbnz	r0, 800a252 <__mdiff+0x2e>
 800a246:	f240 2132 	movw	r1, #562	; 0x232
 800a24a:	4b3c      	ldr	r3, [pc, #240]	; (800a33c <__mdiff+0x118>)
 800a24c:	483c      	ldr	r0, [pc, #240]	; (800a340 <__mdiff+0x11c>)
 800a24e:	f000 fc07 	bl	800aa60 <__assert_func>
 800a252:	2301      	movs	r3, #1
 800a254:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a258:	4610      	mov	r0, r2
 800a25a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25e:	bfa4      	itt	ge
 800a260:	4653      	movge	r3, sl
 800a262:	46a2      	movge	sl, r4
 800a264:	4630      	mov	r0, r6
 800a266:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a26a:	bfa6      	itte	ge
 800a26c:	461c      	movge	r4, r3
 800a26e:	2500      	movge	r5, #0
 800a270:	2501      	movlt	r5, #1
 800a272:	f7ff fcf7 	bl	8009c64 <_Balloc>
 800a276:	4602      	mov	r2, r0
 800a278:	b918      	cbnz	r0, 800a282 <__mdiff+0x5e>
 800a27a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a27e:	4b2f      	ldr	r3, [pc, #188]	; (800a33c <__mdiff+0x118>)
 800a280:	e7e4      	b.n	800a24c <__mdiff+0x28>
 800a282:	f100 0814 	add.w	r8, r0, #20
 800a286:	f8da 7010 	ldr.w	r7, [sl, #16]
 800a28a:	60c5      	str	r5, [r0, #12]
 800a28c:	f04f 0c00 	mov.w	ip, #0
 800a290:	f10a 0514 	add.w	r5, sl, #20
 800a294:	f10a 0010 	add.w	r0, sl, #16
 800a298:	46c2      	mov	sl, r8
 800a29a:	6926      	ldr	r6, [r4, #16]
 800a29c:	f104 0914 	add.w	r9, r4, #20
 800a2a0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800a2a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2a8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800a2ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2b0:	fa1f f18b 	uxth.w	r1, fp
 800a2b4:	4461      	add	r1, ip
 800a2b6:	fa1f fc83 	uxth.w	ip, r3
 800a2ba:	0c1b      	lsrs	r3, r3, #16
 800a2bc:	eba1 010c 	sub.w	r1, r1, ip
 800a2c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a2c8:	b289      	uxth	r1, r1
 800a2ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a2ce:	454e      	cmp	r6, r9
 800a2d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a2d4:	f84a 3b04 	str.w	r3, [sl], #4
 800a2d8:	d8e6      	bhi.n	800a2a8 <__mdiff+0x84>
 800a2da:	1b33      	subs	r3, r6, r4
 800a2dc:	3b15      	subs	r3, #21
 800a2de:	f023 0303 	bic.w	r3, r3, #3
 800a2e2:	3415      	adds	r4, #21
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	42a6      	cmp	r6, r4
 800a2e8:	bf38      	it	cc
 800a2ea:	2304      	movcc	r3, #4
 800a2ec:	441d      	add	r5, r3
 800a2ee:	4443      	add	r3, r8
 800a2f0:	461e      	mov	r6, r3
 800a2f2:	462c      	mov	r4, r5
 800a2f4:	4574      	cmp	r4, lr
 800a2f6:	d30e      	bcc.n	800a316 <__mdiff+0xf2>
 800a2f8:	f10e 0103 	add.w	r1, lr, #3
 800a2fc:	1b49      	subs	r1, r1, r5
 800a2fe:	f021 0103 	bic.w	r1, r1, #3
 800a302:	3d03      	subs	r5, #3
 800a304:	45ae      	cmp	lr, r5
 800a306:	bf38      	it	cc
 800a308:	2100      	movcc	r1, #0
 800a30a:	4419      	add	r1, r3
 800a30c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a310:	b18b      	cbz	r3, 800a336 <__mdiff+0x112>
 800a312:	6117      	str	r7, [r2, #16]
 800a314:	e7a0      	b.n	800a258 <__mdiff+0x34>
 800a316:	f854 8b04 	ldr.w	r8, [r4], #4
 800a31a:	fa1f f188 	uxth.w	r1, r8
 800a31e:	4461      	add	r1, ip
 800a320:	1408      	asrs	r0, r1, #16
 800a322:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800a326:	b289      	uxth	r1, r1
 800a328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a32c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a330:	f846 1b04 	str.w	r1, [r6], #4
 800a334:	e7de      	b.n	800a2f4 <__mdiff+0xd0>
 800a336:	3f01      	subs	r7, #1
 800a338:	e7e8      	b.n	800a30c <__mdiff+0xe8>
 800a33a:	bf00      	nop
 800a33c:	0800e7a4 	.word	0x0800e7a4
 800a340:	0800e834 	.word	0x0800e834

0800a344 <__ulp>:
 800a344:	4b11      	ldr	r3, [pc, #68]	; (800a38c <__ulp+0x48>)
 800a346:	400b      	ands	r3, r1
 800a348:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	dd02      	ble.n	800a356 <__ulp+0x12>
 800a350:	2000      	movs	r0, #0
 800a352:	4619      	mov	r1, r3
 800a354:	4770      	bx	lr
 800a356:	425b      	negs	r3, r3
 800a358:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a35c:	f04f 0000 	mov.w	r0, #0
 800a360:	f04f 0100 	mov.w	r1, #0
 800a364:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a368:	da04      	bge.n	800a374 <__ulp+0x30>
 800a36a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a36e:	fa43 f102 	asr.w	r1, r3, r2
 800a372:	4770      	bx	lr
 800a374:	f1a2 0314 	sub.w	r3, r2, #20
 800a378:	2b1e      	cmp	r3, #30
 800a37a:	bfd6      	itet	le
 800a37c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a380:	2301      	movgt	r3, #1
 800a382:	fa22 f303 	lsrle.w	r3, r2, r3
 800a386:	4618      	mov	r0, r3
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	7ff00000 	.word	0x7ff00000

0800a390 <__b2d>:
 800a390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a394:	6907      	ldr	r7, [r0, #16]
 800a396:	f100 0914 	add.w	r9, r0, #20
 800a39a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a39e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a3a2:	f1a7 0804 	sub.w	r8, r7, #4
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f7ff fd52 	bl	8009e50 <__hi0bits>
 800a3ac:	f1c0 0320 	rsb	r3, r0, #32
 800a3b0:	280a      	cmp	r0, #10
 800a3b2:	600b      	str	r3, [r1, #0]
 800a3b4:	491f      	ldr	r1, [pc, #124]	; (800a434 <__b2d+0xa4>)
 800a3b6:	dc17      	bgt.n	800a3e8 <__b2d+0x58>
 800a3b8:	45c1      	cmp	r9, r8
 800a3ba:	bf28      	it	cs
 800a3bc:	2200      	movcs	r2, #0
 800a3be:	f1c0 0c0b 	rsb	ip, r0, #11
 800a3c2:	fa26 f30c 	lsr.w	r3, r6, ip
 800a3c6:	bf38      	it	cc
 800a3c8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a3cc:	ea43 0501 	orr.w	r5, r3, r1
 800a3d0:	f100 0315 	add.w	r3, r0, #21
 800a3d4:	fa06 f303 	lsl.w	r3, r6, r3
 800a3d8:	fa22 f20c 	lsr.w	r2, r2, ip
 800a3dc:	ea43 0402 	orr.w	r4, r3, r2
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e8:	45c1      	cmp	r9, r8
 800a3ea:	bf2e      	itee	cs
 800a3ec:	2200      	movcs	r2, #0
 800a3ee:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a3f2:	f1a7 0808 	subcc.w	r8, r7, #8
 800a3f6:	f1b0 030b 	subs.w	r3, r0, #11
 800a3fa:	d016      	beq.n	800a42a <__b2d+0x9a>
 800a3fc:	f1c3 0720 	rsb	r7, r3, #32
 800a400:	fa22 f107 	lsr.w	r1, r2, r7
 800a404:	45c8      	cmp	r8, r9
 800a406:	fa06 f603 	lsl.w	r6, r6, r3
 800a40a:	ea46 0601 	orr.w	r6, r6, r1
 800a40e:	bf94      	ite	ls
 800a410:	2100      	movls	r1, #0
 800a412:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a416:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a41a:	fa02 f003 	lsl.w	r0, r2, r3
 800a41e:	40f9      	lsrs	r1, r7
 800a420:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a424:	ea40 0401 	orr.w	r4, r0, r1
 800a428:	e7da      	b.n	800a3e0 <__b2d+0x50>
 800a42a:	4614      	mov	r4, r2
 800a42c:	ea46 0501 	orr.w	r5, r6, r1
 800a430:	e7d6      	b.n	800a3e0 <__b2d+0x50>
 800a432:	bf00      	nop
 800a434:	3ff00000 	.word	0x3ff00000

0800a438 <__d2b>:
 800a438:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a43c:	2101      	movs	r1, #1
 800a43e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a442:	4690      	mov	r8, r2
 800a444:	461d      	mov	r5, r3
 800a446:	f7ff fc0d 	bl	8009c64 <_Balloc>
 800a44a:	4604      	mov	r4, r0
 800a44c:	b930      	cbnz	r0, 800a45c <__d2b+0x24>
 800a44e:	4602      	mov	r2, r0
 800a450:	f240 310a 	movw	r1, #778	; 0x30a
 800a454:	4b24      	ldr	r3, [pc, #144]	; (800a4e8 <__d2b+0xb0>)
 800a456:	4825      	ldr	r0, [pc, #148]	; (800a4ec <__d2b+0xb4>)
 800a458:	f000 fb02 	bl	800aa60 <__assert_func>
 800a45c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a460:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a464:	bb2d      	cbnz	r5, 800a4b2 <__d2b+0x7a>
 800a466:	9301      	str	r3, [sp, #4]
 800a468:	f1b8 0300 	subs.w	r3, r8, #0
 800a46c:	d026      	beq.n	800a4bc <__d2b+0x84>
 800a46e:	4668      	mov	r0, sp
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	f7ff fd0d 	bl	8009e90 <__lo0bits>
 800a476:	9900      	ldr	r1, [sp, #0]
 800a478:	b1f0      	cbz	r0, 800a4b8 <__d2b+0x80>
 800a47a:	9a01      	ldr	r2, [sp, #4]
 800a47c:	f1c0 0320 	rsb	r3, r0, #32
 800a480:	fa02 f303 	lsl.w	r3, r2, r3
 800a484:	430b      	orrs	r3, r1
 800a486:	40c2      	lsrs	r2, r0
 800a488:	6163      	str	r3, [r4, #20]
 800a48a:	9201      	str	r2, [sp, #4]
 800a48c:	9b01      	ldr	r3, [sp, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	bf14      	ite	ne
 800a492:	2102      	movne	r1, #2
 800a494:	2101      	moveq	r1, #1
 800a496:	61a3      	str	r3, [r4, #24]
 800a498:	6121      	str	r1, [r4, #16]
 800a49a:	b1c5      	cbz	r5, 800a4ce <__d2b+0x96>
 800a49c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4a0:	4405      	add	r5, r0
 800a4a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4a6:	603d      	str	r5, [r7, #0]
 800a4a8:	6030      	str	r0, [r6, #0]
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	b002      	add	sp, #8
 800a4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4b6:	e7d6      	b.n	800a466 <__d2b+0x2e>
 800a4b8:	6161      	str	r1, [r4, #20]
 800a4ba:	e7e7      	b.n	800a48c <__d2b+0x54>
 800a4bc:	a801      	add	r0, sp, #4
 800a4be:	f7ff fce7 	bl	8009e90 <__lo0bits>
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	6121      	str	r1, [r4, #16]
 800a4c8:	6163      	str	r3, [r4, #20]
 800a4ca:	3020      	adds	r0, #32
 800a4cc:	e7e5      	b.n	800a49a <__d2b+0x62>
 800a4ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a4d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a4d6:	6038      	str	r0, [r7, #0]
 800a4d8:	6918      	ldr	r0, [r3, #16]
 800a4da:	f7ff fcb9 	bl	8009e50 <__hi0bits>
 800a4de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a4e2:	6031      	str	r1, [r6, #0]
 800a4e4:	e7e1      	b.n	800a4aa <__d2b+0x72>
 800a4e6:	bf00      	nop
 800a4e8:	0800e7a4 	.word	0x0800e7a4
 800a4ec:	0800e834 	.word	0x0800e834

0800a4f0 <__ratio>:
 800a4f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	4688      	mov	r8, r1
 800a4f6:	4669      	mov	r1, sp
 800a4f8:	4681      	mov	r9, r0
 800a4fa:	f7ff ff49 	bl	800a390 <__b2d>
 800a4fe:	460f      	mov	r7, r1
 800a500:	4604      	mov	r4, r0
 800a502:	460d      	mov	r5, r1
 800a504:	4640      	mov	r0, r8
 800a506:	a901      	add	r1, sp, #4
 800a508:	f7ff ff42 	bl	800a390 <__b2d>
 800a50c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a510:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a514:	468b      	mov	fp, r1
 800a516:	eba3 0c02 	sub.w	ip, r3, r2
 800a51a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a51e:	1a9b      	subs	r3, r3, r2
 800a520:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a524:	2b00      	cmp	r3, #0
 800a526:	bfd5      	itete	le
 800a528:	460a      	movle	r2, r1
 800a52a:	462a      	movgt	r2, r5
 800a52c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a530:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a534:	bfd8      	it	le
 800a536:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a53a:	465b      	mov	r3, fp
 800a53c:	4602      	mov	r2, r0
 800a53e:	4639      	mov	r1, r7
 800a540:	4620      	mov	r0, r4
 800a542:	f7f6 f8f3 	bl	800072c <__aeabi_ddiv>
 800a546:	b003      	add	sp, #12
 800a548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a54c <__copybits>:
 800a54c:	3901      	subs	r1, #1
 800a54e:	b570      	push	{r4, r5, r6, lr}
 800a550:	1149      	asrs	r1, r1, #5
 800a552:	6914      	ldr	r4, [r2, #16]
 800a554:	3101      	adds	r1, #1
 800a556:	f102 0314 	add.w	r3, r2, #20
 800a55a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a55e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a562:	1f05      	subs	r5, r0, #4
 800a564:	42a3      	cmp	r3, r4
 800a566:	d30c      	bcc.n	800a582 <__copybits+0x36>
 800a568:	1aa3      	subs	r3, r4, r2
 800a56a:	3b11      	subs	r3, #17
 800a56c:	f023 0303 	bic.w	r3, r3, #3
 800a570:	3211      	adds	r2, #17
 800a572:	42a2      	cmp	r2, r4
 800a574:	bf88      	it	hi
 800a576:	2300      	movhi	r3, #0
 800a578:	4418      	add	r0, r3
 800a57a:	2300      	movs	r3, #0
 800a57c:	4288      	cmp	r0, r1
 800a57e:	d305      	bcc.n	800a58c <__copybits+0x40>
 800a580:	bd70      	pop	{r4, r5, r6, pc}
 800a582:	f853 6b04 	ldr.w	r6, [r3], #4
 800a586:	f845 6f04 	str.w	r6, [r5, #4]!
 800a58a:	e7eb      	b.n	800a564 <__copybits+0x18>
 800a58c:	f840 3b04 	str.w	r3, [r0], #4
 800a590:	e7f4      	b.n	800a57c <__copybits+0x30>

0800a592 <__any_on>:
 800a592:	f100 0214 	add.w	r2, r0, #20
 800a596:	6900      	ldr	r0, [r0, #16]
 800a598:	114b      	asrs	r3, r1, #5
 800a59a:	4298      	cmp	r0, r3
 800a59c:	b510      	push	{r4, lr}
 800a59e:	db11      	blt.n	800a5c4 <__any_on+0x32>
 800a5a0:	dd0a      	ble.n	800a5b8 <__any_on+0x26>
 800a5a2:	f011 011f 	ands.w	r1, r1, #31
 800a5a6:	d007      	beq.n	800a5b8 <__any_on+0x26>
 800a5a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a5ac:	fa24 f001 	lsr.w	r0, r4, r1
 800a5b0:	fa00 f101 	lsl.w	r1, r0, r1
 800a5b4:	428c      	cmp	r4, r1
 800a5b6:	d10b      	bne.n	800a5d0 <__any_on+0x3e>
 800a5b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d803      	bhi.n	800a5c8 <__any_on+0x36>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	bd10      	pop	{r4, pc}
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	e7f7      	b.n	800a5b8 <__any_on+0x26>
 800a5c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5cc:	2900      	cmp	r1, #0
 800a5ce:	d0f5      	beq.n	800a5bc <__any_on+0x2a>
 800a5d0:	2001      	movs	r0, #1
 800a5d2:	e7f6      	b.n	800a5c2 <__any_on+0x30>

0800a5d4 <_calloc_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	fb02 f501 	mul.w	r5, r2, r1
 800a5da:	4629      	mov	r1, r5
 800a5dc:	f000 f854 	bl	800a688 <_malloc_r>
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	b118      	cbz	r0, 800a5ec <_calloc_r+0x18>
 800a5e4:	462a      	mov	r2, r5
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	f7fc fba0 	bl	8006d2c <memset>
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}

0800a5f0 <_free_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	d043      	beq.n	800a680 <_free_r+0x90>
 800a5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5fc:	1f0c      	subs	r4, r1, #4
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	bfb8      	it	lt
 800a602:	18e4      	addlt	r4, r4, r3
 800a604:	f000 fa76 	bl	800aaf4 <__malloc_lock>
 800a608:	4a1e      	ldr	r2, [pc, #120]	; (800a684 <_free_r+0x94>)
 800a60a:	6813      	ldr	r3, [r2, #0]
 800a60c:	4610      	mov	r0, r2
 800a60e:	b933      	cbnz	r3, 800a61e <_free_r+0x2e>
 800a610:	6063      	str	r3, [r4, #4]
 800a612:	6014      	str	r4, [r2, #0]
 800a614:	4628      	mov	r0, r5
 800a616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a61a:	f000 ba71 	b.w	800ab00 <__malloc_unlock>
 800a61e:	42a3      	cmp	r3, r4
 800a620:	d90a      	bls.n	800a638 <_free_r+0x48>
 800a622:	6821      	ldr	r1, [r4, #0]
 800a624:	1862      	adds	r2, r4, r1
 800a626:	4293      	cmp	r3, r2
 800a628:	bf01      	itttt	eq
 800a62a:	681a      	ldreq	r2, [r3, #0]
 800a62c:	685b      	ldreq	r3, [r3, #4]
 800a62e:	1852      	addeq	r2, r2, r1
 800a630:	6022      	streq	r2, [r4, #0]
 800a632:	6063      	str	r3, [r4, #4]
 800a634:	6004      	str	r4, [r0, #0]
 800a636:	e7ed      	b.n	800a614 <_free_r+0x24>
 800a638:	461a      	mov	r2, r3
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	b10b      	cbz	r3, 800a642 <_free_r+0x52>
 800a63e:	42a3      	cmp	r3, r4
 800a640:	d9fa      	bls.n	800a638 <_free_r+0x48>
 800a642:	6811      	ldr	r1, [r2, #0]
 800a644:	1850      	adds	r0, r2, r1
 800a646:	42a0      	cmp	r0, r4
 800a648:	d10b      	bne.n	800a662 <_free_r+0x72>
 800a64a:	6820      	ldr	r0, [r4, #0]
 800a64c:	4401      	add	r1, r0
 800a64e:	1850      	adds	r0, r2, r1
 800a650:	4283      	cmp	r3, r0
 800a652:	6011      	str	r1, [r2, #0]
 800a654:	d1de      	bne.n	800a614 <_free_r+0x24>
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	4401      	add	r1, r0
 800a65c:	6011      	str	r1, [r2, #0]
 800a65e:	6053      	str	r3, [r2, #4]
 800a660:	e7d8      	b.n	800a614 <_free_r+0x24>
 800a662:	d902      	bls.n	800a66a <_free_r+0x7a>
 800a664:	230c      	movs	r3, #12
 800a666:	602b      	str	r3, [r5, #0]
 800a668:	e7d4      	b.n	800a614 <_free_r+0x24>
 800a66a:	6820      	ldr	r0, [r4, #0]
 800a66c:	1821      	adds	r1, r4, r0
 800a66e:	428b      	cmp	r3, r1
 800a670:	bf01      	itttt	eq
 800a672:	6819      	ldreq	r1, [r3, #0]
 800a674:	685b      	ldreq	r3, [r3, #4]
 800a676:	1809      	addeq	r1, r1, r0
 800a678:	6021      	streq	r1, [r4, #0]
 800a67a:	6063      	str	r3, [r4, #4]
 800a67c:	6054      	str	r4, [r2, #4]
 800a67e:	e7c9      	b.n	800a614 <_free_r+0x24>
 800a680:	bd38      	pop	{r3, r4, r5, pc}
 800a682:	bf00      	nop
 800a684:	20000284 	.word	0x20000284

0800a688 <_malloc_r>:
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68a:	1ccd      	adds	r5, r1, #3
 800a68c:	f025 0503 	bic.w	r5, r5, #3
 800a690:	3508      	adds	r5, #8
 800a692:	2d0c      	cmp	r5, #12
 800a694:	bf38      	it	cc
 800a696:	250c      	movcc	r5, #12
 800a698:	2d00      	cmp	r5, #0
 800a69a:	4606      	mov	r6, r0
 800a69c:	db01      	blt.n	800a6a2 <_malloc_r+0x1a>
 800a69e:	42a9      	cmp	r1, r5
 800a6a0:	d903      	bls.n	800a6aa <_malloc_r+0x22>
 800a6a2:	230c      	movs	r3, #12
 800a6a4:	6033      	str	r3, [r6, #0]
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6aa:	f000 fa23 	bl	800aaf4 <__malloc_lock>
 800a6ae:	4921      	ldr	r1, [pc, #132]	; (800a734 <_malloc_r+0xac>)
 800a6b0:	680a      	ldr	r2, [r1, #0]
 800a6b2:	4614      	mov	r4, r2
 800a6b4:	b99c      	cbnz	r4, 800a6de <_malloc_r+0x56>
 800a6b6:	4f20      	ldr	r7, [pc, #128]	; (800a738 <_malloc_r+0xb0>)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	b923      	cbnz	r3, 800a6c6 <_malloc_r+0x3e>
 800a6bc:	4621      	mov	r1, r4
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f000 f99e 	bl	800aa00 <_sbrk_r>
 800a6c4:	6038      	str	r0, [r7, #0]
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f999 	bl	800aa00 <_sbrk_r>
 800a6ce:	1c43      	adds	r3, r0, #1
 800a6d0:	d123      	bne.n	800a71a <_malloc_r+0x92>
 800a6d2:	230c      	movs	r3, #12
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	6033      	str	r3, [r6, #0]
 800a6d8:	f000 fa12 	bl	800ab00 <__malloc_unlock>
 800a6dc:	e7e3      	b.n	800a6a6 <_malloc_r+0x1e>
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	1b5b      	subs	r3, r3, r5
 800a6e2:	d417      	bmi.n	800a714 <_malloc_r+0x8c>
 800a6e4:	2b0b      	cmp	r3, #11
 800a6e6:	d903      	bls.n	800a6f0 <_malloc_r+0x68>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	441c      	add	r4, r3
 800a6ec:	6025      	str	r5, [r4, #0]
 800a6ee:	e004      	b.n	800a6fa <_malloc_r+0x72>
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	42a2      	cmp	r2, r4
 800a6f4:	bf0c      	ite	eq
 800a6f6:	600b      	streq	r3, [r1, #0]
 800a6f8:	6053      	strne	r3, [r2, #4]
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f000 fa00 	bl	800ab00 <__malloc_unlock>
 800a700:	f104 000b 	add.w	r0, r4, #11
 800a704:	1d23      	adds	r3, r4, #4
 800a706:	f020 0007 	bic.w	r0, r0, #7
 800a70a:	1ac2      	subs	r2, r0, r3
 800a70c:	d0cc      	beq.n	800a6a8 <_malloc_r+0x20>
 800a70e:	1a1b      	subs	r3, r3, r0
 800a710:	50a3      	str	r3, [r4, r2]
 800a712:	e7c9      	b.n	800a6a8 <_malloc_r+0x20>
 800a714:	4622      	mov	r2, r4
 800a716:	6864      	ldr	r4, [r4, #4]
 800a718:	e7cc      	b.n	800a6b4 <_malloc_r+0x2c>
 800a71a:	1cc4      	adds	r4, r0, #3
 800a71c:	f024 0403 	bic.w	r4, r4, #3
 800a720:	42a0      	cmp	r0, r4
 800a722:	d0e3      	beq.n	800a6ec <_malloc_r+0x64>
 800a724:	1a21      	subs	r1, r4, r0
 800a726:	4630      	mov	r0, r6
 800a728:	f000 f96a 	bl	800aa00 <_sbrk_r>
 800a72c:	3001      	adds	r0, #1
 800a72e:	d1dd      	bne.n	800a6ec <_malloc_r+0x64>
 800a730:	e7cf      	b.n	800a6d2 <_malloc_r+0x4a>
 800a732:	bf00      	nop
 800a734:	20000284 	.word	0x20000284
 800a738:	20000288 	.word	0x20000288

0800a73c <__ssputs_r>:
 800a73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a740:	688e      	ldr	r6, [r1, #8]
 800a742:	4682      	mov	sl, r0
 800a744:	429e      	cmp	r6, r3
 800a746:	460c      	mov	r4, r1
 800a748:	4690      	mov	r8, r2
 800a74a:	461f      	mov	r7, r3
 800a74c:	d838      	bhi.n	800a7c0 <__ssputs_r+0x84>
 800a74e:	898a      	ldrh	r2, [r1, #12]
 800a750:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a754:	d032      	beq.n	800a7bc <__ssputs_r+0x80>
 800a756:	6825      	ldr	r5, [r4, #0]
 800a758:	6909      	ldr	r1, [r1, #16]
 800a75a:	3301      	adds	r3, #1
 800a75c:	eba5 0901 	sub.w	r9, r5, r1
 800a760:	6965      	ldr	r5, [r4, #20]
 800a762:	444b      	add	r3, r9
 800a764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a768:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a76c:	106d      	asrs	r5, r5, #1
 800a76e:	429d      	cmp	r5, r3
 800a770:	bf38      	it	cc
 800a772:	461d      	movcc	r5, r3
 800a774:	0553      	lsls	r3, r2, #21
 800a776:	d531      	bpl.n	800a7dc <__ssputs_r+0xa0>
 800a778:	4629      	mov	r1, r5
 800a77a:	f7ff ff85 	bl	800a688 <_malloc_r>
 800a77e:	4606      	mov	r6, r0
 800a780:	b950      	cbnz	r0, 800a798 <__ssputs_r+0x5c>
 800a782:	230c      	movs	r3, #12
 800a784:	f04f 30ff 	mov.w	r0, #4294967295
 800a788:	f8ca 3000 	str.w	r3, [sl]
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a792:	81a3      	strh	r3, [r4, #12]
 800a794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a798:	464a      	mov	r2, r9
 800a79a:	6921      	ldr	r1, [r4, #16]
 800a79c:	f7ff fa54 	bl	8009c48 <memcpy>
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7aa:	81a3      	strh	r3, [r4, #12]
 800a7ac:	6126      	str	r6, [r4, #16]
 800a7ae:	444e      	add	r6, r9
 800a7b0:	6026      	str	r6, [r4, #0]
 800a7b2:	463e      	mov	r6, r7
 800a7b4:	6165      	str	r5, [r4, #20]
 800a7b6:	eba5 0509 	sub.w	r5, r5, r9
 800a7ba:	60a5      	str	r5, [r4, #8]
 800a7bc:	42be      	cmp	r6, r7
 800a7be:	d900      	bls.n	800a7c2 <__ssputs_r+0x86>
 800a7c0:	463e      	mov	r6, r7
 800a7c2:	4632      	mov	r2, r6
 800a7c4:	4641      	mov	r1, r8
 800a7c6:	6820      	ldr	r0, [r4, #0]
 800a7c8:	f000 f97a 	bl	800aac0 <memmove>
 800a7cc:	68a3      	ldr	r3, [r4, #8]
 800a7ce:	6822      	ldr	r2, [r4, #0]
 800a7d0:	1b9b      	subs	r3, r3, r6
 800a7d2:	4432      	add	r2, r6
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	60a3      	str	r3, [r4, #8]
 800a7d8:	6022      	str	r2, [r4, #0]
 800a7da:	e7db      	b.n	800a794 <__ssputs_r+0x58>
 800a7dc:	462a      	mov	r2, r5
 800a7de:	f000 f995 	bl	800ab0c <_realloc_r>
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d1e1      	bne.n	800a7ac <__ssputs_r+0x70>
 800a7e8:	4650      	mov	r0, sl
 800a7ea:	6921      	ldr	r1, [r4, #16]
 800a7ec:	f7ff ff00 	bl	800a5f0 <_free_r>
 800a7f0:	e7c7      	b.n	800a782 <__ssputs_r+0x46>
	...

0800a7f4 <_svfiprintf_r>:
 800a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f8:	4698      	mov	r8, r3
 800a7fa:	898b      	ldrh	r3, [r1, #12]
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	061b      	lsls	r3, r3, #24
 800a800:	460d      	mov	r5, r1
 800a802:	4614      	mov	r4, r2
 800a804:	b09d      	sub	sp, #116	; 0x74
 800a806:	d50e      	bpl.n	800a826 <_svfiprintf_r+0x32>
 800a808:	690b      	ldr	r3, [r1, #16]
 800a80a:	b963      	cbnz	r3, 800a826 <_svfiprintf_r+0x32>
 800a80c:	2140      	movs	r1, #64	; 0x40
 800a80e:	f7ff ff3b 	bl	800a688 <_malloc_r>
 800a812:	6028      	str	r0, [r5, #0]
 800a814:	6128      	str	r0, [r5, #16]
 800a816:	b920      	cbnz	r0, 800a822 <_svfiprintf_r+0x2e>
 800a818:	230c      	movs	r3, #12
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	f04f 30ff 	mov.w	r0, #4294967295
 800a820:	e0d1      	b.n	800a9c6 <_svfiprintf_r+0x1d2>
 800a822:	2340      	movs	r3, #64	; 0x40
 800a824:	616b      	str	r3, [r5, #20]
 800a826:	2300      	movs	r3, #0
 800a828:	9309      	str	r3, [sp, #36]	; 0x24
 800a82a:	2320      	movs	r3, #32
 800a82c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a830:	2330      	movs	r3, #48	; 0x30
 800a832:	f04f 0901 	mov.w	r9, #1
 800a836:	f8cd 800c 	str.w	r8, [sp, #12]
 800a83a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a9e0 <_svfiprintf_r+0x1ec>
 800a83e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a842:	4623      	mov	r3, r4
 800a844:	469a      	mov	sl, r3
 800a846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a84a:	b10a      	cbz	r2, 800a850 <_svfiprintf_r+0x5c>
 800a84c:	2a25      	cmp	r2, #37	; 0x25
 800a84e:	d1f9      	bne.n	800a844 <_svfiprintf_r+0x50>
 800a850:	ebba 0b04 	subs.w	fp, sl, r4
 800a854:	d00b      	beq.n	800a86e <_svfiprintf_r+0x7a>
 800a856:	465b      	mov	r3, fp
 800a858:	4622      	mov	r2, r4
 800a85a:	4629      	mov	r1, r5
 800a85c:	4638      	mov	r0, r7
 800a85e:	f7ff ff6d 	bl	800a73c <__ssputs_r>
 800a862:	3001      	adds	r0, #1
 800a864:	f000 80aa 	beq.w	800a9bc <_svfiprintf_r+0x1c8>
 800a868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a86a:	445a      	add	r2, fp
 800a86c:	9209      	str	r2, [sp, #36]	; 0x24
 800a86e:	f89a 3000 	ldrb.w	r3, [sl]
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 80a2 	beq.w	800a9bc <_svfiprintf_r+0x1c8>
 800a878:	2300      	movs	r3, #0
 800a87a:	f04f 32ff 	mov.w	r2, #4294967295
 800a87e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a882:	f10a 0a01 	add.w	sl, sl, #1
 800a886:	9304      	str	r3, [sp, #16]
 800a888:	9307      	str	r3, [sp, #28]
 800a88a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a88e:	931a      	str	r3, [sp, #104]	; 0x68
 800a890:	4654      	mov	r4, sl
 800a892:	2205      	movs	r2, #5
 800a894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a898:	4851      	ldr	r0, [pc, #324]	; (800a9e0 <_svfiprintf_r+0x1ec>)
 800a89a:	f7ff f9c7 	bl	8009c2c <memchr>
 800a89e:	9a04      	ldr	r2, [sp, #16]
 800a8a0:	b9d8      	cbnz	r0, 800a8da <_svfiprintf_r+0xe6>
 800a8a2:	06d0      	lsls	r0, r2, #27
 800a8a4:	bf44      	itt	mi
 800a8a6:	2320      	movmi	r3, #32
 800a8a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ac:	0711      	lsls	r1, r2, #28
 800a8ae:	bf44      	itt	mi
 800a8b0:	232b      	movmi	r3, #43	; 0x2b
 800a8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a8bc:	d015      	beq.n	800a8ea <_svfiprintf_r+0xf6>
 800a8be:	4654      	mov	r4, sl
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f04f 0c0a 	mov.w	ip, #10
 800a8c6:	9a07      	ldr	r2, [sp, #28]
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ce:	3b30      	subs	r3, #48	; 0x30
 800a8d0:	2b09      	cmp	r3, #9
 800a8d2:	d94e      	bls.n	800a972 <_svfiprintf_r+0x17e>
 800a8d4:	b1b0      	cbz	r0, 800a904 <_svfiprintf_r+0x110>
 800a8d6:	9207      	str	r2, [sp, #28]
 800a8d8:	e014      	b.n	800a904 <_svfiprintf_r+0x110>
 800a8da:	eba0 0308 	sub.w	r3, r0, r8
 800a8de:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	46a2      	mov	sl, r4
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	e7d2      	b.n	800a890 <_svfiprintf_r+0x9c>
 800a8ea:	9b03      	ldr	r3, [sp, #12]
 800a8ec:	1d19      	adds	r1, r3, #4
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	9103      	str	r1, [sp, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	bfbb      	ittet	lt
 800a8f6:	425b      	neglt	r3, r3
 800a8f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fc:	9307      	strge	r3, [sp, #28]
 800a8fe:	9307      	strlt	r3, [sp, #28]
 800a900:	bfb8      	it	lt
 800a902:	9204      	strlt	r2, [sp, #16]
 800a904:	7823      	ldrb	r3, [r4, #0]
 800a906:	2b2e      	cmp	r3, #46	; 0x2e
 800a908:	d10c      	bne.n	800a924 <_svfiprintf_r+0x130>
 800a90a:	7863      	ldrb	r3, [r4, #1]
 800a90c:	2b2a      	cmp	r3, #42	; 0x2a
 800a90e:	d135      	bne.n	800a97c <_svfiprintf_r+0x188>
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	3402      	adds	r4, #2
 800a914:	1d1a      	adds	r2, r3, #4
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	9203      	str	r2, [sp, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bfb8      	it	lt
 800a91e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a922:	9305      	str	r3, [sp, #20]
 800a924:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a9f0 <_svfiprintf_r+0x1fc>
 800a928:	2203      	movs	r2, #3
 800a92a:	4650      	mov	r0, sl
 800a92c:	7821      	ldrb	r1, [r4, #0]
 800a92e:	f7ff f97d 	bl	8009c2c <memchr>
 800a932:	b140      	cbz	r0, 800a946 <_svfiprintf_r+0x152>
 800a934:	2340      	movs	r3, #64	; 0x40
 800a936:	eba0 000a 	sub.w	r0, r0, sl
 800a93a:	fa03 f000 	lsl.w	r0, r3, r0
 800a93e:	9b04      	ldr	r3, [sp, #16]
 800a940:	3401      	adds	r4, #1
 800a942:	4303      	orrs	r3, r0
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a94a:	2206      	movs	r2, #6
 800a94c:	4825      	ldr	r0, [pc, #148]	; (800a9e4 <_svfiprintf_r+0x1f0>)
 800a94e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a952:	f7ff f96b 	bl	8009c2c <memchr>
 800a956:	2800      	cmp	r0, #0
 800a958:	d038      	beq.n	800a9cc <_svfiprintf_r+0x1d8>
 800a95a:	4b23      	ldr	r3, [pc, #140]	; (800a9e8 <_svfiprintf_r+0x1f4>)
 800a95c:	bb1b      	cbnz	r3, 800a9a6 <_svfiprintf_r+0x1b2>
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	3307      	adds	r3, #7
 800a962:	f023 0307 	bic.w	r3, r3, #7
 800a966:	3308      	adds	r3, #8
 800a968:	9303      	str	r3, [sp, #12]
 800a96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96c:	4433      	add	r3, r6
 800a96e:	9309      	str	r3, [sp, #36]	; 0x24
 800a970:	e767      	b.n	800a842 <_svfiprintf_r+0x4e>
 800a972:	460c      	mov	r4, r1
 800a974:	2001      	movs	r0, #1
 800a976:	fb0c 3202 	mla	r2, ip, r2, r3
 800a97a:	e7a5      	b.n	800a8c8 <_svfiprintf_r+0xd4>
 800a97c:	2300      	movs	r3, #0
 800a97e:	f04f 0c0a 	mov.w	ip, #10
 800a982:	4619      	mov	r1, r3
 800a984:	3401      	adds	r4, #1
 800a986:	9305      	str	r3, [sp, #20]
 800a988:	4620      	mov	r0, r4
 800a98a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a98e:	3a30      	subs	r2, #48	; 0x30
 800a990:	2a09      	cmp	r2, #9
 800a992:	d903      	bls.n	800a99c <_svfiprintf_r+0x1a8>
 800a994:	2b00      	cmp	r3, #0
 800a996:	d0c5      	beq.n	800a924 <_svfiprintf_r+0x130>
 800a998:	9105      	str	r1, [sp, #20]
 800a99a:	e7c3      	b.n	800a924 <_svfiprintf_r+0x130>
 800a99c:	4604      	mov	r4, r0
 800a99e:	2301      	movs	r3, #1
 800a9a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9a4:	e7f0      	b.n	800a988 <_svfiprintf_r+0x194>
 800a9a6:	ab03      	add	r3, sp, #12
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	462a      	mov	r2, r5
 800a9ac:	4638      	mov	r0, r7
 800a9ae:	4b0f      	ldr	r3, [pc, #60]	; (800a9ec <_svfiprintf_r+0x1f8>)
 800a9b0:	a904      	add	r1, sp, #16
 800a9b2:	f7fc fa61 	bl	8006e78 <_printf_float>
 800a9b6:	1c42      	adds	r2, r0, #1
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	d1d6      	bne.n	800a96a <_svfiprintf_r+0x176>
 800a9bc:	89ab      	ldrh	r3, [r5, #12]
 800a9be:	065b      	lsls	r3, r3, #25
 800a9c0:	f53f af2c 	bmi.w	800a81c <_svfiprintf_r+0x28>
 800a9c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9c6:	b01d      	add	sp, #116	; 0x74
 800a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9cc:	ab03      	add	r3, sp, #12
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	462a      	mov	r2, r5
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <_svfiprintf_r+0x1f8>)
 800a9d6:	a904      	add	r1, sp, #16
 800a9d8:	f7fc fcea 	bl	80073b0 <_printf_i>
 800a9dc:	e7eb      	b.n	800a9b6 <_svfiprintf_r+0x1c2>
 800a9de:	bf00      	nop
 800a9e0:	0800e994 	.word	0x0800e994
 800a9e4:	0800e99e 	.word	0x0800e99e
 800a9e8:	08006e79 	.word	0x08006e79
 800a9ec:	0800a73d 	.word	0x0800a73d
 800a9f0:	0800e99a 	.word	0x0800e99a

0800a9f4 <nan>:
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	4901      	ldr	r1, [pc, #4]	; (800a9fc <nan+0x8>)
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	7ff80000 	.word	0x7ff80000

0800aa00 <_sbrk_r>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	2300      	movs	r3, #0
 800aa04:	4d05      	ldr	r5, [pc, #20]	; (800aa1c <_sbrk_r+0x1c>)
 800aa06:	4604      	mov	r4, r0
 800aa08:	4608      	mov	r0, r1
 800aa0a:	602b      	str	r3, [r5, #0]
 800aa0c:	f7f9 fed0 	bl	80047b0 <_sbrk>
 800aa10:	1c43      	adds	r3, r0, #1
 800aa12:	d102      	bne.n	800aa1a <_sbrk_r+0x1a>
 800aa14:	682b      	ldr	r3, [r5, #0]
 800aa16:	b103      	cbz	r3, 800aa1a <_sbrk_r+0x1a>
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	bd38      	pop	{r3, r4, r5, pc}
 800aa1c:	20000660 	.word	0x20000660

0800aa20 <strncmp>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	b16a      	cbz	r2, 800aa40 <strncmp+0x20>
 800aa24:	3901      	subs	r1, #1
 800aa26:	1884      	adds	r4, r0, r2
 800aa28:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aa2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d103      	bne.n	800aa3c <strncmp+0x1c>
 800aa34:	42a0      	cmp	r0, r4
 800aa36:	d001      	beq.n	800aa3c <strncmp+0x1c>
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1f5      	bne.n	800aa28 <strncmp+0x8>
 800aa3c:	1a98      	subs	r0, r3, r2
 800aa3e:	bd10      	pop	{r4, pc}
 800aa40:	4610      	mov	r0, r2
 800aa42:	e7fc      	b.n	800aa3e <strncmp+0x1e>

0800aa44 <__ascii_wctomb>:
 800aa44:	4603      	mov	r3, r0
 800aa46:	4608      	mov	r0, r1
 800aa48:	b141      	cbz	r1, 800aa5c <__ascii_wctomb+0x18>
 800aa4a:	2aff      	cmp	r2, #255	; 0xff
 800aa4c:	d904      	bls.n	800aa58 <__ascii_wctomb+0x14>
 800aa4e:	228a      	movs	r2, #138	; 0x8a
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	4770      	bx	lr
 800aa58:	2001      	movs	r0, #1
 800aa5a:	700a      	strb	r2, [r1, #0]
 800aa5c:	4770      	bx	lr
	...

0800aa60 <__assert_func>:
 800aa60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa62:	4614      	mov	r4, r2
 800aa64:	461a      	mov	r2, r3
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <__assert_func+0x2c>)
 800aa68:	4605      	mov	r5, r0
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68d8      	ldr	r0, [r3, #12]
 800aa6e:	b14c      	cbz	r4, 800aa84 <__assert_func+0x24>
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <__assert_func+0x30>)
 800aa72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa76:	9100      	str	r1, [sp, #0]
 800aa78:	462b      	mov	r3, r5
 800aa7a:	4906      	ldr	r1, [pc, #24]	; (800aa94 <__assert_func+0x34>)
 800aa7c:	f000 f80e 	bl	800aa9c <fiprintf>
 800aa80:	f000 fa82 	bl	800af88 <abort>
 800aa84:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <__assert_func+0x38>)
 800aa86:	461c      	mov	r4, r3
 800aa88:	e7f3      	b.n	800aa72 <__assert_func+0x12>
 800aa8a:	bf00      	nop
 800aa8c:	2000000c 	.word	0x2000000c
 800aa90:	0800e9a5 	.word	0x0800e9a5
 800aa94:	0800e9b2 	.word	0x0800e9b2
 800aa98:	0800e9e0 	.word	0x0800e9e0

0800aa9c <fiprintf>:
 800aa9c:	b40e      	push	{r1, r2, r3}
 800aa9e:	b503      	push	{r0, r1, lr}
 800aaa0:	4601      	mov	r1, r0
 800aaa2:	ab03      	add	r3, sp, #12
 800aaa4:	4805      	ldr	r0, [pc, #20]	; (800aabc <fiprintf+0x20>)
 800aaa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaaa:	6800      	ldr	r0, [r0, #0]
 800aaac:	9301      	str	r3, [sp, #4]
 800aaae:	f000 f87b 	bl	800aba8 <_vfiprintf_r>
 800aab2:	b002      	add	sp, #8
 800aab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aab8:	b003      	add	sp, #12
 800aaba:	4770      	bx	lr
 800aabc:	2000000c 	.word	0x2000000c

0800aac0 <memmove>:
 800aac0:	4288      	cmp	r0, r1
 800aac2:	b510      	push	{r4, lr}
 800aac4:	eb01 0402 	add.w	r4, r1, r2
 800aac8:	d902      	bls.n	800aad0 <memmove+0x10>
 800aaca:	4284      	cmp	r4, r0
 800aacc:	4623      	mov	r3, r4
 800aace:	d807      	bhi.n	800aae0 <memmove+0x20>
 800aad0:	1e43      	subs	r3, r0, #1
 800aad2:	42a1      	cmp	r1, r4
 800aad4:	d008      	beq.n	800aae8 <memmove+0x28>
 800aad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aada:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aade:	e7f8      	b.n	800aad2 <memmove+0x12>
 800aae0:	4601      	mov	r1, r0
 800aae2:	4402      	add	r2, r0
 800aae4:	428a      	cmp	r2, r1
 800aae6:	d100      	bne.n	800aaea <memmove+0x2a>
 800aae8:	bd10      	pop	{r4, pc}
 800aaea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaf2:	e7f7      	b.n	800aae4 <memmove+0x24>

0800aaf4 <__malloc_lock>:
 800aaf4:	4801      	ldr	r0, [pc, #4]	; (800aafc <__malloc_lock+0x8>)
 800aaf6:	f000 bc07 	b.w	800b308 <__retarget_lock_acquire_recursive>
 800aafa:	bf00      	nop
 800aafc:	20000668 	.word	0x20000668

0800ab00 <__malloc_unlock>:
 800ab00:	4801      	ldr	r0, [pc, #4]	; (800ab08 <__malloc_unlock+0x8>)
 800ab02:	f000 bc02 	b.w	800b30a <__retarget_lock_release_recursive>
 800ab06:	bf00      	nop
 800ab08:	20000668 	.word	0x20000668

0800ab0c <_realloc_r>:
 800ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0e:	4607      	mov	r7, r0
 800ab10:	4614      	mov	r4, r2
 800ab12:	460e      	mov	r6, r1
 800ab14:	b921      	cbnz	r1, 800ab20 <_realloc_r+0x14>
 800ab16:	4611      	mov	r1, r2
 800ab18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab1c:	f7ff bdb4 	b.w	800a688 <_malloc_r>
 800ab20:	b922      	cbnz	r2, 800ab2c <_realloc_r+0x20>
 800ab22:	f7ff fd65 	bl	800a5f0 <_free_r>
 800ab26:	4625      	mov	r5, r4
 800ab28:	4628      	mov	r0, r5
 800ab2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab2c:	f000 fc52 	bl	800b3d4 <_malloc_usable_size_r>
 800ab30:	42a0      	cmp	r0, r4
 800ab32:	d20f      	bcs.n	800ab54 <_realloc_r+0x48>
 800ab34:	4621      	mov	r1, r4
 800ab36:	4638      	mov	r0, r7
 800ab38:	f7ff fda6 	bl	800a688 <_malloc_r>
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d0f2      	beq.n	800ab28 <_realloc_r+0x1c>
 800ab42:	4631      	mov	r1, r6
 800ab44:	4622      	mov	r2, r4
 800ab46:	f7ff f87f 	bl	8009c48 <memcpy>
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	f7ff fd4f 	bl	800a5f0 <_free_r>
 800ab52:	e7e9      	b.n	800ab28 <_realloc_r+0x1c>
 800ab54:	4635      	mov	r5, r6
 800ab56:	e7e7      	b.n	800ab28 <_realloc_r+0x1c>

0800ab58 <__sfputc_r>:
 800ab58:	6893      	ldr	r3, [r2, #8]
 800ab5a:	b410      	push	{r4}
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	6093      	str	r3, [r2, #8]
 800ab62:	da07      	bge.n	800ab74 <__sfputc_r+0x1c>
 800ab64:	6994      	ldr	r4, [r2, #24]
 800ab66:	42a3      	cmp	r3, r4
 800ab68:	db01      	blt.n	800ab6e <__sfputc_r+0x16>
 800ab6a:	290a      	cmp	r1, #10
 800ab6c:	d102      	bne.n	800ab74 <__sfputc_r+0x1c>
 800ab6e:	bc10      	pop	{r4}
 800ab70:	f000 b94a 	b.w	800ae08 <__swbuf_r>
 800ab74:	6813      	ldr	r3, [r2, #0]
 800ab76:	1c58      	adds	r0, r3, #1
 800ab78:	6010      	str	r0, [r2, #0]
 800ab7a:	7019      	strb	r1, [r3, #0]
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	bc10      	pop	{r4}
 800ab80:	4770      	bx	lr

0800ab82 <__sfputs_r>:
 800ab82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab84:	4606      	mov	r6, r0
 800ab86:	460f      	mov	r7, r1
 800ab88:	4614      	mov	r4, r2
 800ab8a:	18d5      	adds	r5, r2, r3
 800ab8c:	42ac      	cmp	r4, r5
 800ab8e:	d101      	bne.n	800ab94 <__sfputs_r+0x12>
 800ab90:	2000      	movs	r0, #0
 800ab92:	e007      	b.n	800aba4 <__sfputs_r+0x22>
 800ab94:	463a      	mov	r2, r7
 800ab96:	4630      	mov	r0, r6
 800ab98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab9c:	f7ff ffdc 	bl	800ab58 <__sfputc_r>
 800aba0:	1c43      	adds	r3, r0, #1
 800aba2:	d1f3      	bne.n	800ab8c <__sfputs_r+0xa>
 800aba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aba8 <_vfiprintf_r>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	460d      	mov	r5, r1
 800abae:	4614      	mov	r4, r2
 800abb0:	4698      	mov	r8, r3
 800abb2:	4606      	mov	r6, r0
 800abb4:	b09d      	sub	sp, #116	; 0x74
 800abb6:	b118      	cbz	r0, 800abc0 <_vfiprintf_r+0x18>
 800abb8:	6983      	ldr	r3, [r0, #24]
 800abba:	b90b      	cbnz	r3, 800abc0 <_vfiprintf_r+0x18>
 800abbc:	f000 fb06 	bl	800b1cc <__sinit>
 800abc0:	4b89      	ldr	r3, [pc, #548]	; (800ade8 <_vfiprintf_r+0x240>)
 800abc2:	429d      	cmp	r5, r3
 800abc4:	d11b      	bne.n	800abfe <_vfiprintf_r+0x56>
 800abc6:	6875      	ldr	r5, [r6, #4]
 800abc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abca:	07d9      	lsls	r1, r3, #31
 800abcc:	d405      	bmi.n	800abda <_vfiprintf_r+0x32>
 800abce:	89ab      	ldrh	r3, [r5, #12]
 800abd0:	059a      	lsls	r2, r3, #22
 800abd2:	d402      	bmi.n	800abda <_vfiprintf_r+0x32>
 800abd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abd6:	f000 fb97 	bl	800b308 <__retarget_lock_acquire_recursive>
 800abda:	89ab      	ldrh	r3, [r5, #12]
 800abdc:	071b      	lsls	r3, r3, #28
 800abde:	d501      	bpl.n	800abe4 <_vfiprintf_r+0x3c>
 800abe0:	692b      	ldr	r3, [r5, #16]
 800abe2:	b9eb      	cbnz	r3, 800ac20 <_vfiprintf_r+0x78>
 800abe4:	4629      	mov	r1, r5
 800abe6:	4630      	mov	r0, r6
 800abe8:	f000 f960 	bl	800aeac <__swsetup_r>
 800abec:	b1c0      	cbz	r0, 800ac20 <_vfiprintf_r+0x78>
 800abee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abf0:	07dc      	lsls	r4, r3, #31
 800abf2:	d50e      	bpl.n	800ac12 <_vfiprintf_r+0x6a>
 800abf4:	f04f 30ff 	mov.w	r0, #4294967295
 800abf8:	b01d      	add	sp, #116	; 0x74
 800abfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfe:	4b7b      	ldr	r3, [pc, #492]	; (800adec <_vfiprintf_r+0x244>)
 800ac00:	429d      	cmp	r5, r3
 800ac02:	d101      	bne.n	800ac08 <_vfiprintf_r+0x60>
 800ac04:	68b5      	ldr	r5, [r6, #8]
 800ac06:	e7df      	b.n	800abc8 <_vfiprintf_r+0x20>
 800ac08:	4b79      	ldr	r3, [pc, #484]	; (800adf0 <_vfiprintf_r+0x248>)
 800ac0a:	429d      	cmp	r5, r3
 800ac0c:	bf08      	it	eq
 800ac0e:	68f5      	ldreq	r5, [r6, #12]
 800ac10:	e7da      	b.n	800abc8 <_vfiprintf_r+0x20>
 800ac12:	89ab      	ldrh	r3, [r5, #12]
 800ac14:	0598      	lsls	r0, r3, #22
 800ac16:	d4ed      	bmi.n	800abf4 <_vfiprintf_r+0x4c>
 800ac18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac1a:	f000 fb76 	bl	800b30a <__retarget_lock_release_recursive>
 800ac1e:	e7e9      	b.n	800abf4 <_vfiprintf_r+0x4c>
 800ac20:	2300      	movs	r3, #0
 800ac22:	9309      	str	r3, [sp, #36]	; 0x24
 800ac24:	2320      	movs	r3, #32
 800ac26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac2a:	2330      	movs	r3, #48	; 0x30
 800ac2c:	f04f 0901 	mov.w	r9, #1
 800ac30:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac34:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800adf4 <_vfiprintf_r+0x24c>
 800ac38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac3c:	4623      	mov	r3, r4
 800ac3e:	469a      	mov	sl, r3
 800ac40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac44:	b10a      	cbz	r2, 800ac4a <_vfiprintf_r+0xa2>
 800ac46:	2a25      	cmp	r2, #37	; 0x25
 800ac48:	d1f9      	bne.n	800ac3e <_vfiprintf_r+0x96>
 800ac4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ac4e:	d00b      	beq.n	800ac68 <_vfiprintf_r+0xc0>
 800ac50:	465b      	mov	r3, fp
 800ac52:	4622      	mov	r2, r4
 800ac54:	4629      	mov	r1, r5
 800ac56:	4630      	mov	r0, r6
 800ac58:	f7ff ff93 	bl	800ab82 <__sfputs_r>
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	f000 80aa 	beq.w	800adb6 <_vfiprintf_r+0x20e>
 800ac62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac64:	445a      	add	r2, fp
 800ac66:	9209      	str	r2, [sp, #36]	; 0x24
 800ac68:	f89a 3000 	ldrb.w	r3, [sl]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 80a2 	beq.w	800adb6 <_vfiprintf_r+0x20e>
 800ac72:	2300      	movs	r3, #0
 800ac74:	f04f 32ff 	mov.w	r2, #4294967295
 800ac78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac7c:	f10a 0a01 	add.w	sl, sl, #1
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	9307      	str	r3, [sp, #28]
 800ac84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac88:	931a      	str	r3, [sp, #104]	; 0x68
 800ac8a:	4654      	mov	r4, sl
 800ac8c:	2205      	movs	r2, #5
 800ac8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac92:	4858      	ldr	r0, [pc, #352]	; (800adf4 <_vfiprintf_r+0x24c>)
 800ac94:	f7fe ffca 	bl	8009c2c <memchr>
 800ac98:	9a04      	ldr	r2, [sp, #16]
 800ac9a:	b9d8      	cbnz	r0, 800acd4 <_vfiprintf_r+0x12c>
 800ac9c:	06d1      	lsls	r1, r2, #27
 800ac9e:	bf44      	itt	mi
 800aca0:	2320      	movmi	r3, #32
 800aca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca6:	0713      	lsls	r3, r2, #28
 800aca8:	bf44      	itt	mi
 800acaa:	232b      	movmi	r3, #43	; 0x2b
 800acac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acb0:	f89a 3000 	ldrb.w	r3, [sl]
 800acb4:	2b2a      	cmp	r3, #42	; 0x2a
 800acb6:	d015      	beq.n	800ace4 <_vfiprintf_r+0x13c>
 800acb8:	4654      	mov	r4, sl
 800acba:	2000      	movs	r0, #0
 800acbc:	f04f 0c0a 	mov.w	ip, #10
 800acc0:	9a07      	ldr	r2, [sp, #28]
 800acc2:	4621      	mov	r1, r4
 800acc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acc8:	3b30      	subs	r3, #48	; 0x30
 800acca:	2b09      	cmp	r3, #9
 800accc:	d94e      	bls.n	800ad6c <_vfiprintf_r+0x1c4>
 800acce:	b1b0      	cbz	r0, 800acfe <_vfiprintf_r+0x156>
 800acd0:	9207      	str	r2, [sp, #28]
 800acd2:	e014      	b.n	800acfe <_vfiprintf_r+0x156>
 800acd4:	eba0 0308 	sub.w	r3, r0, r8
 800acd8:	fa09 f303 	lsl.w	r3, r9, r3
 800acdc:	4313      	orrs	r3, r2
 800acde:	46a2      	mov	sl, r4
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	e7d2      	b.n	800ac8a <_vfiprintf_r+0xe2>
 800ace4:	9b03      	ldr	r3, [sp, #12]
 800ace6:	1d19      	adds	r1, r3, #4
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	9103      	str	r1, [sp, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	bfbb      	ittet	lt
 800acf0:	425b      	neglt	r3, r3
 800acf2:	f042 0202 	orrlt.w	r2, r2, #2
 800acf6:	9307      	strge	r3, [sp, #28]
 800acf8:	9307      	strlt	r3, [sp, #28]
 800acfa:	bfb8      	it	lt
 800acfc:	9204      	strlt	r2, [sp, #16]
 800acfe:	7823      	ldrb	r3, [r4, #0]
 800ad00:	2b2e      	cmp	r3, #46	; 0x2e
 800ad02:	d10c      	bne.n	800ad1e <_vfiprintf_r+0x176>
 800ad04:	7863      	ldrb	r3, [r4, #1]
 800ad06:	2b2a      	cmp	r3, #42	; 0x2a
 800ad08:	d135      	bne.n	800ad76 <_vfiprintf_r+0x1ce>
 800ad0a:	9b03      	ldr	r3, [sp, #12]
 800ad0c:	3402      	adds	r4, #2
 800ad0e:	1d1a      	adds	r2, r3, #4
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	9203      	str	r2, [sp, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bfb8      	it	lt
 800ad18:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad1c:	9305      	str	r3, [sp, #20]
 800ad1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae04 <_vfiprintf_r+0x25c>
 800ad22:	2203      	movs	r2, #3
 800ad24:	4650      	mov	r0, sl
 800ad26:	7821      	ldrb	r1, [r4, #0]
 800ad28:	f7fe ff80 	bl	8009c2c <memchr>
 800ad2c:	b140      	cbz	r0, 800ad40 <_vfiprintf_r+0x198>
 800ad2e:	2340      	movs	r3, #64	; 0x40
 800ad30:	eba0 000a 	sub.w	r0, r0, sl
 800ad34:	fa03 f000 	lsl.w	r0, r3, r0
 800ad38:	9b04      	ldr	r3, [sp, #16]
 800ad3a:	3401      	adds	r4, #1
 800ad3c:	4303      	orrs	r3, r0
 800ad3e:	9304      	str	r3, [sp, #16]
 800ad40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad44:	2206      	movs	r2, #6
 800ad46:	482c      	ldr	r0, [pc, #176]	; (800adf8 <_vfiprintf_r+0x250>)
 800ad48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad4c:	f7fe ff6e 	bl	8009c2c <memchr>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d03f      	beq.n	800add4 <_vfiprintf_r+0x22c>
 800ad54:	4b29      	ldr	r3, [pc, #164]	; (800adfc <_vfiprintf_r+0x254>)
 800ad56:	bb1b      	cbnz	r3, 800ada0 <_vfiprintf_r+0x1f8>
 800ad58:	9b03      	ldr	r3, [sp, #12]
 800ad5a:	3307      	adds	r3, #7
 800ad5c:	f023 0307 	bic.w	r3, r3, #7
 800ad60:	3308      	adds	r3, #8
 800ad62:	9303      	str	r3, [sp, #12]
 800ad64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad66:	443b      	add	r3, r7
 800ad68:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6a:	e767      	b.n	800ac3c <_vfiprintf_r+0x94>
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	2001      	movs	r0, #1
 800ad70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad74:	e7a5      	b.n	800acc2 <_vfiprintf_r+0x11a>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f04f 0c0a 	mov.w	ip, #10
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	3401      	adds	r4, #1
 800ad80:	9305      	str	r3, [sp, #20]
 800ad82:	4620      	mov	r0, r4
 800ad84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad88:	3a30      	subs	r2, #48	; 0x30
 800ad8a:	2a09      	cmp	r2, #9
 800ad8c:	d903      	bls.n	800ad96 <_vfiprintf_r+0x1ee>
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d0c5      	beq.n	800ad1e <_vfiprintf_r+0x176>
 800ad92:	9105      	str	r1, [sp, #20]
 800ad94:	e7c3      	b.n	800ad1e <_vfiprintf_r+0x176>
 800ad96:	4604      	mov	r4, r0
 800ad98:	2301      	movs	r3, #1
 800ad9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad9e:	e7f0      	b.n	800ad82 <_vfiprintf_r+0x1da>
 800ada0:	ab03      	add	r3, sp, #12
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	462a      	mov	r2, r5
 800ada6:	4630      	mov	r0, r6
 800ada8:	4b15      	ldr	r3, [pc, #84]	; (800ae00 <_vfiprintf_r+0x258>)
 800adaa:	a904      	add	r1, sp, #16
 800adac:	f7fc f864 	bl	8006e78 <_printf_float>
 800adb0:	4607      	mov	r7, r0
 800adb2:	1c78      	adds	r0, r7, #1
 800adb4:	d1d6      	bne.n	800ad64 <_vfiprintf_r+0x1bc>
 800adb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adb8:	07d9      	lsls	r1, r3, #31
 800adba:	d405      	bmi.n	800adc8 <_vfiprintf_r+0x220>
 800adbc:	89ab      	ldrh	r3, [r5, #12]
 800adbe:	059a      	lsls	r2, r3, #22
 800adc0:	d402      	bmi.n	800adc8 <_vfiprintf_r+0x220>
 800adc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adc4:	f000 faa1 	bl	800b30a <__retarget_lock_release_recursive>
 800adc8:	89ab      	ldrh	r3, [r5, #12]
 800adca:	065b      	lsls	r3, r3, #25
 800adcc:	f53f af12 	bmi.w	800abf4 <_vfiprintf_r+0x4c>
 800add0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800add2:	e711      	b.n	800abf8 <_vfiprintf_r+0x50>
 800add4:	ab03      	add	r3, sp, #12
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	462a      	mov	r2, r5
 800adda:	4630      	mov	r0, r6
 800addc:	4b08      	ldr	r3, [pc, #32]	; (800ae00 <_vfiprintf_r+0x258>)
 800adde:	a904      	add	r1, sp, #16
 800ade0:	f7fc fae6 	bl	80073b0 <_printf_i>
 800ade4:	e7e4      	b.n	800adb0 <_vfiprintf_r+0x208>
 800ade6:	bf00      	nop
 800ade8:	0800ea04 	.word	0x0800ea04
 800adec:	0800ea24 	.word	0x0800ea24
 800adf0:	0800e9e4 	.word	0x0800e9e4
 800adf4:	0800e994 	.word	0x0800e994
 800adf8:	0800e99e 	.word	0x0800e99e
 800adfc:	08006e79 	.word	0x08006e79
 800ae00:	0800ab83 	.word	0x0800ab83
 800ae04:	0800e99a 	.word	0x0800e99a

0800ae08 <__swbuf_r>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	460e      	mov	r6, r1
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	4605      	mov	r5, r0
 800ae10:	b118      	cbz	r0, 800ae1a <__swbuf_r+0x12>
 800ae12:	6983      	ldr	r3, [r0, #24]
 800ae14:	b90b      	cbnz	r3, 800ae1a <__swbuf_r+0x12>
 800ae16:	f000 f9d9 	bl	800b1cc <__sinit>
 800ae1a:	4b21      	ldr	r3, [pc, #132]	; (800aea0 <__swbuf_r+0x98>)
 800ae1c:	429c      	cmp	r4, r3
 800ae1e:	d12b      	bne.n	800ae78 <__swbuf_r+0x70>
 800ae20:	686c      	ldr	r4, [r5, #4]
 800ae22:	69a3      	ldr	r3, [r4, #24]
 800ae24:	60a3      	str	r3, [r4, #8]
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	071a      	lsls	r2, r3, #28
 800ae2a:	d52f      	bpl.n	800ae8c <__swbuf_r+0x84>
 800ae2c:	6923      	ldr	r3, [r4, #16]
 800ae2e:	b36b      	cbz	r3, 800ae8c <__swbuf_r+0x84>
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	6820      	ldr	r0, [r4, #0]
 800ae34:	b2f6      	uxtb	r6, r6
 800ae36:	1ac0      	subs	r0, r0, r3
 800ae38:	6963      	ldr	r3, [r4, #20]
 800ae3a:	4637      	mov	r7, r6
 800ae3c:	4283      	cmp	r3, r0
 800ae3e:	dc04      	bgt.n	800ae4a <__swbuf_r+0x42>
 800ae40:	4621      	mov	r1, r4
 800ae42:	4628      	mov	r0, r5
 800ae44:	f000 f92e 	bl	800b0a4 <_fflush_r>
 800ae48:	bb30      	cbnz	r0, 800ae98 <__swbuf_r+0x90>
 800ae4a:	68a3      	ldr	r3, [r4, #8]
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	60a3      	str	r3, [r4, #8]
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	6022      	str	r2, [r4, #0]
 800ae58:	701e      	strb	r6, [r3, #0]
 800ae5a:	6963      	ldr	r3, [r4, #20]
 800ae5c:	4283      	cmp	r3, r0
 800ae5e:	d004      	beq.n	800ae6a <__swbuf_r+0x62>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	07db      	lsls	r3, r3, #31
 800ae64:	d506      	bpl.n	800ae74 <__swbuf_r+0x6c>
 800ae66:	2e0a      	cmp	r6, #10
 800ae68:	d104      	bne.n	800ae74 <__swbuf_r+0x6c>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f000 f919 	bl	800b0a4 <_fflush_r>
 800ae72:	b988      	cbnz	r0, 800ae98 <__swbuf_r+0x90>
 800ae74:	4638      	mov	r0, r7
 800ae76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <__swbuf_r+0x9c>)
 800ae7a:	429c      	cmp	r4, r3
 800ae7c:	d101      	bne.n	800ae82 <__swbuf_r+0x7a>
 800ae7e:	68ac      	ldr	r4, [r5, #8]
 800ae80:	e7cf      	b.n	800ae22 <__swbuf_r+0x1a>
 800ae82:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <__swbuf_r+0xa0>)
 800ae84:	429c      	cmp	r4, r3
 800ae86:	bf08      	it	eq
 800ae88:	68ec      	ldreq	r4, [r5, #12]
 800ae8a:	e7ca      	b.n	800ae22 <__swbuf_r+0x1a>
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f000 f80c 	bl	800aeac <__swsetup_r>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d0cb      	beq.n	800ae30 <__swbuf_r+0x28>
 800ae98:	f04f 37ff 	mov.w	r7, #4294967295
 800ae9c:	e7ea      	b.n	800ae74 <__swbuf_r+0x6c>
 800ae9e:	bf00      	nop
 800aea0:	0800ea04 	.word	0x0800ea04
 800aea4:	0800ea24 	.word	0x0800ea24
 800aea8:	0800e9e4 	.word	0x0800e9e4

0800aeac <__swsetup_r>:
 800aeac:	4b32      	ldr	r3, [pc, #200]	; (800af78 <__swsetup_r+0xcc>)
 800aeae:	b570      	push	{r4, r5, r6, lr}
 800aeb0:	681d      	ldr	r5, [r3, #0]
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	460c      	mov	r4, r1
 800aeb6:	b125      	cbz	r5, 800aec2 <__swsetup_r+0x16>
 800aeb8:	69ab      	ldr	r3, [r5, #24]
 800aeba:	b913      	cbnz	r3, 800aec2 <__swsetup_r+0x16>
 800aebc:	4628      	mov	r0, r5
 800aebe:	f000 f985 	bl	800b1cc <__sinit>
 800aec2:	4b2e      	ldr	r3, [pc, #184]	; (800af7c <__swsetup_r+0xd0>)
 800aec4:	429c      	cmp	r4, r3
 800aec6:	d10f      	bne.n	800aee8 <__swsetup_r+0x3c>
 800aec8:	686c      	ldr	r4, [r5, #4]
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aed0:	0719      	lsls	r1, r3, #28
 800aed2:	d42c      	bmi.n	800af2e <__swsetup_r+0x82>
 800aed4:	06dd      	lsls	r5, r3, #27
 800aed6:	d411      	bmi.n	800aefc <__swsetup_r+0x50>
 800aed8:	2309      	movs	r3, #9
 800aeda:	6033      	str	r3, [r6, #0]
 800aedc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aee0:	f04f 30ff 	mov.w	r0, #4294967295
 800aee4:	81a3      	strh	r3, [r4, #12]
 800aee6:	e03e      	b.n	800af66 <__swsetup_r+0xba>
 800aee8:	4b25      	ldr	r3, [pc, #148]	; (800af80 <__swsetup_r+0xd4>)
 800aeea:	429c      	cmp	r4, r3
 800aeec:	d101      	bne.n	800aef2 <__swsetup_r+0x46>
 800aeee:	68ac      	ldr	r4, [r5, #8]
 800aef0:	e7eb      	b.n	800aeca <__swsetup_r+0x1e>
 800aef2:	4b24      	ldr	r3, [pc, #144]	; (800af84 <__swsetup_r+0xd8>)
 800aef4:	429c      	cmp	r4, r3
 800aef6:	bf08      	it	eq
 800aef8:	68ec      	ldreq	r4, [r5, #12]
 800aefa:	e7e6      	b.n	800aeca <__swsetup_r+0x1e>
 800aefc:	0758      	lsls	r0, r3, #29
 800aefe:	d512      	bpl.n	800af26 <__swsetup_r+0x7a>
 800af00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af02:	b141      	cbz	r1, 800af16 <__swsetup_r+0x6a>
 800af04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af08:	4299      	cmp	r1, r3
 800af0a:	d002      	beq.n	800af12 <__swsetup_r+0x66>
 800af0c:	4630      	mov	r0, r6
 800af0e:	f7ff fb6f 	bl	800a5f0 <_free_r>
 800af12:	2300      	movs	r3, #0
 800af14:	6363      	str	r3, [r4, #52]	; 0x34
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	2300      	movs	r3, #0
 800af20:	6063      	str	r3, [r4, #4]
 800af22:	6923      	ldr	r3, [r4, #16]
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	f043 0308 	orr.w	r3, r3, #8
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	b94b      	cbnz	r3, 800af46 <__swsetup_r+0x9a>
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af3c:	d003      	beq.n	800af46 <__swsetup_r+0x9a>
 800af3e:	4621      	mov	r1, r4
 800af40:	4630      	mov	r0, r6
 800af42:	f000 fa07 	bl	800b354 <__smakebuf_r>
 800af46:	89a0      	ldrh	r0, [r4, #12]
 800af48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af4c:	f010 0301 	ands.w	r3, r0, #1
 800af50:	d00a      	beq.n	800af68 <__swsetup_r+0xbc>
 800af52:	2300      	movs	r3, #0
 800af54:	60a3      	str	r3, [r4, #8]
 800af56:	6963      	ldr	r3, [r4, #20]
 800af58:	425b      	negs	r3, r3
 800af5a:	61a3      	str	r3, [r4, #24]
 800af5c:	6923      	ldr	r3, [r4, #16]
 800af5e:	b943      	cbnz	r3, 800af72 <__swsetup_r+0xc6>
 800af60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af64:	d1ba      	bne.n	800aedc <__swsetup_r+0x30>
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	0781      	lsls	r1, r0, #30
 800af6a:	bf58      	it	pl
 800af6c:	6963      	ldrpl	r3, [r4, #20]
 800af6e:	60a3      	str	r3, [r4, #8]
 800af70:	e7f4      	b.n	800af5c <__swsetup_r+0xb0>
 800af72:	2000      	movs	r0, #0
 800af74:	e7f7      	b.n	800af66 <__swsetup_r+0xba>
 800af76:	bf00      	nop
 800af78:	2000000c 	.word	0x2000000c
 800af7c:	0800ea04 	.word	0x0800ea04
 800af80:	0800ea24 	.word	0x0800ea24
 800af84:	0800e9e4 	.word	0x0800e9e4

0800af88 <abort>:
 800af88:	2006      	movs	r0, #6
 800af8a:	b508      	push	{r3, lr}
 800af8c:	f000 fa52 	bl	800b434 <raise>
 800af90:	2001      	movs	r0, #1
 800af92:	f7f9 fb99 	bl	80046c8 <_exit>
	...

0800af98 <__sflush_r>:
 800af98:	898a      	ldrh	r2, [r1, #12]
 800af9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af9e:	4605      	mov	r5, r0
 800afa0:	0710      	lsls	r0, r2, #28
 800afa2:	460c      	mov	r4, r1
 800afa4:	d458      	bmi.n	800b058 <__sflush_r+0xc0>
 800afa6:	684b      	ldr	r3, [r1, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	dc05      	bgt.n	800afb8 <__sflush_r+0x20>
 800afac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dc02      	bgt.n	800afb8 <__sflush_r+0x20>
 800afb2:	2000      	movs	r0, #0
 800afb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afba:	2e00      	cmp	r6, #0
 800afbc:	d0f9      	beq.n	800afb2 <__sflush_r+0x1a>
 800afbe:	2300      	movs	r3, #0
 800afc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afc4:	682f      	ldr	r7, [r5, #0]
 800afc6:	602b      	str	r3, [r5, #0]
 800afc8:	d032      	beq.n	800b030 <__sflush_r+0x98>
 800afca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	075a      	lsls	r2, r3, #29
 800afd0:	d505      	bpl.n	800afde <__sflush_r+0x46>
 800afd2:	6863      	ldr	r3, [r4, #4]
 800afd4:	1ac0      	subs	r0, r0, r3
 800afd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afd8:	b10b      	cbz	r3, 800afde <__sflush_r+0x46>
 800afda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afdc:	1ac0      	subs	r0, r0, r3
 800afde:	2300      	movs	r3, #0
 800afe0:	4602      	mov	r2, r0
 800afe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afe4:	4628      	mov	r0, r5
 800afe6:	6a21      	ldr	r1, [r4, #32]
 800afe8:	47b0      	blx	r6
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	d106      	bne.n	800affe <__sflush_r+0x66>
 800aff0:	6829      	ldr	r1, [r5, #0]
 800aff2:	291d      	cmp	r1, #29
 800aff4:	d82c      	bhi.n	800b050 <__sflush_r+0xb8>
 800aff6:	4a2a      	ldr	r2, [pc, #168]	; (800b0a0 <__sflush_r+0x108>)
 800aff8:	40ca      	lsrs	r2, r1
 800affa:	07d6      	lsls	r6, r2, #31
 800affc:	d528      	bpl.n	800b050 <__sflush_r+0xb8>
 800affe:	2200      	movs	r2, #0
 800b000:	6062      	str	r2, [r4, #4]
 800b002:	6922      	ldr	r2, [r4, #16]
 800b004:	04d9      	lsls	r1, r3, #19
 800b006:	6022      	str	r2, [r4, #0]
 800b008:	d504      	bpl.n	800b014 <__sflush_r+0x7c>
 800b00a:	1c42      	adds	r2, r0, #1
 800b00c:	d101      	bne.n	800b012 <__sflush_r+0x7a>
 800b00e:	682b      	ldr	r3, [r5, #0]
 800b010:	b903      	cbnz	r3, 800b014 <__sflush_r+0x7c>
 800b012:	6560      	str	r0, [r4, #84]	; 0x54
 800b014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b016:	602f      	str	r7, [r5, #0]
 800b018:	2900      	cmp	r1, #0
 800b01a:	d0ca      	beq.n	800afb2 <__sflush_r+0x1a>
 800b01c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b020:	4299      	cmp	r1, r3
 800b022:	d002      	beq.n	800b02a <__sflush_r+0x92>
 800b024:	4628      	mov	r0, r5
 800b026:	f7ff fae3 	bl	800a5f0 <_free_r>
 800b02a:	2000      	movs	r0, #0
 800b02c:	6360      	str	r0, [r4, #52]	; 0x34
 800b02e:	e7c1      	b.n	800afb4 <__sflush_r+0x1c>
 800b030:	6a21      	ldr	r1, [r4, #32]
 800b032:	2301      	movs	r3, #1
 800b034:	4628      	mov	r0, r5
 800b036:	47b0      	blx	r6
 800b038:	1c41      	adds	r1, r0, #1
 800b03a:	d1c7      	bne.n	800afcc <__sflush_r+0x34>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0c4      	beq.n	800afcc <__sflush_r+0x34>
 800b042:	2b1d      	cmp	r3, #29
 800b044:	d001      	beq.n	800b04a <__sflush_r+0xb2>
 800b046:	2b16      	cmp	r3, #22
 800b048:	d101      	bne.n	800b04e <__sflush_r+0xb6>
 800b04a:	602f      	str	r7, [r5, #0]
 800b04c:	e7b1      	b.n	800afb2 <__sflush_r+0x1a>
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b054:	81a3      	strh	r3, [r4, #12]
 800b056:	e7ad      	b.n	800afb4 <__sflush_r+0x1c>
 800b058:	690f      	ldr	r7, [r1, #16]
 800b05a:	2f00      	cmp	r7, #0
 800b05c:	d0a9      	beq.n	800afb2 <__sflush_r+0x1a>
 800b05e:	0793      	lsls	r3, r2, #30
 800b060:	bf18      	it	ne
 800b062:	2300      	movne	r3, #0
 800b064:	680e      	ldr	r6, [r1, #0]
 800b066:	bf08      	it	eq
 800b068:	694b      	ldreq	r3, [r1, #20]
 800b06a:	eba6 0807 	sub.w	r8, r6, r7
 800b06e:	600f      	str	r7, [r1, #0]
 800b070:	608b      	str	r3, [r1, #8]
 800b072:	f1b8 0f00 	cmp.w	r8, #0
 800b076:	dd9c      	ble.n	800afb2 <__sflush_r+0x1a>
 800b078:	4643      	mov	r3, r8
 800b07a:	463a      	mov	r2, r7
 800b07c:	4628      	mov	r0, r5
 800b07e:	6a21      	ldr	r1, [r4, #32]
 800b080:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b082:	47b0      	blx	r6
 800b084:	2800      	cmp	r0, #0
 800b086:	dc06      	bgt.n	800b096 <__sflush_r+0xfe>
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	f04f 30ff 	mov.w	r0, #4294967295
 800b08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b092:	81a3      	strh	r3, [r4, #12]
 800b094:	e78e      	b.n	800afb4 <__sflush_r+0x1c>
 800b096:	4407      	add	r7, r0
 800b098:	eba8 0800 	sub.w	r8, r8, r0
 800b09c:	e7e9      	b.n	800b072 <__sflush_r+0xda>
 800b09e:	bf00      	nop
 800b0a0:	20400001 	.word	0x20400001

0800b0a4 <_fflush_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	690b      	ldr	r3, [r1, #16]
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	b913      	cbnz	r3, 800b0b4 <_fflush_r+0x10>
 800b0ae:	2500      	movs	r5, #0
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	b118      	cbz	r0, 800b0be <_fflush_r+0x1a>
 800b0b6:	6983      	ldr	r3, [r0, #24]
 800b0b8:	b90b      	cbnz	r3, 800b0be <_fflush_r+0x1a>
 800b0ba:	f000 f887 	bl	800b1cc <__sinit>
 800b0be:	4b14      	ldr	r3, [pc, #80]	; (800b110 <_fflush_r+0x6c>)
 800b0c0:	429c      	cmp	r4, r3
 800b0c2:	d11b      	bne.n	800b0fc <_fflush_r+0x58>
 800b0c4:	686c      	ldr	r4, [r5, #4]
 800b0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0ef      	beq.n	800b0ae <_fflush_r+0xa>
 800b0ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0d0:	07d0      	lsls	r0, r2, #31
 800b0d2:	d404      	bmi.n	800b0de <_fflush_r+0x3a>
 800b0d4:	0599      	lsls	r1, r3, #22
 800b0d6:	d402      	bmi.n	800b0de <_fflush_r+0x3a>
 800b0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0da:	f000 f915 	bl	800b308 <__retarget_lock_acquire_recursive>
 800b0de:	4628      	mov	r0, r5
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	f7ff ff59 	bl	800af98 <__sflush_r>
 800b0e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	07da      	lsls	r2, r3, #31
 800b0ec:	d4e0      	bmi.n	800b0b0 <_fflush_r+0xc>
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	059b      	lsls	r3, r3, #22
 800b0f2:	d4dd      	bmi.n	800b0b0 <_fflush_r+0xc>
 800b0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0f6:	f000 f908 	bl	800b30a <__retarget_lock_release_recursive>
 800b0fa:	e7d9      	b.n	800b0b0 <_fflush_r+0xc>
 800b0fc:	4b05      	ldr	r3, [pc, #20]	; (800b114 <_fflush_r+0x70>)
 800b0fe:	429c      	cmp	r4, r3
 800b100:	d101      	bne.n	800b106 <_fflush_r+0x62>
 800b102:	68ac      	ldr	r4, [r5, #8]
 800b104:	e7df      	b.n	800b0c6 <_fflush_r+0x22>
 800b106:	4b04      	ldr	r3, [pc, #16]	; (800b118 <_fflush_r+0x74>)
 800b108:	429c      	cmp	r4, r3
 800b10a:	bf08      	it	eq
 800b10c:	68ec      	ldreq	r4, [r5, #12]
 800b10e:	e7da      	b.n	800b0c6 <_fflush_r+0x22>
 800b110:	0800ea04 	.word	0x0800ea04
 800b114:	0800ea24 	.word	0x0800ea24
 800b118:	0800e9e4 	.word	0x0800e9e4

0800b11c <std>:
 800b11c:	2300      	movs	r3, #0
 800b11e:	b510      	push	{r4, lr}
 800b120:	4604      	mov	r4, r0
 800b122:	e9c0 3300 	strd	r3, r3, [r0]
 800b126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b12a:	6083      	str	r3, [r0, #8]
 800b12c:	8181      	strh	r1, [r0, #12]
 800b12e:	6643      	str	r3, [r0, #100]	; 0x64
 800b130:	81c2      	strh	r2, [r0, #14]
 800b132:	6183      	str	r3, [r0, #24]
 800b134:	4619      	mov	r1, r3
 800b136:	2208      	movs	r2, #8
 800b138:	305c      	adds	r0, #92	; 0x5c
 800b13a:	f7fb fdf7 	bl	8006d2c <memset>
 800b13e:	4b05      	ldr	r3, [pc, #20]	; (800b154 <std+0x38>)
 800b140:	6224      	str	r4, [r4, #32]
 800b142:	6263      	str	r3, [r4, #36]	; 0x24
 800b144:	4b04      	ldr	r3, [pc, #16]	; (800b158 <std+0x3c>)
 800b146:	62a3      	str	r3, [r4, #40]	; 0x28
 800b148:	4b04      	ldr	r3, [pc, #16]	; (800b15c <std+0x40>)
 800b14a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b14c:	4b04      	ldr	r3, [pc, #16]	; (800b160 <std+0x44>)
 800b14e:	6323      	str	r3, [r4, #48]	; 0x30
 800b150:	bd10      	pop	{r4, pc}
 800b152:	bf00      	nop
 800b154:	0800b46d 	.word	0x0800b46d
 800b158:	0800b48f 	.word	0x0800b48f
 800b15c:	0800b4c7 	.word	0x0800b4c7
 800b160:	0800b4eb 	.word	0x0800b4eb

0800b164 <_cleanup_r>:
 800b164:	4901      	ldr	r1, [pc, #4]	; (800b16c <_cleanup_r+0x8>)
 800b166:	f000 b8af 	b.w	800b2c8 <_fwalk_reent>
 800b16a:	bf00      	nop
 800b16c:	0800b0a5 	.word	0x0800b0a5

0800b170 <__sfmoreglue>:
 800b170:	b570      	push	{r4, r5, r6, lr}
 800b172:	2568      	movs	r5, #104	; 0x68
 800b174:	1e4a      	subs	r2, r1, #1
 800b176:	4355      	muls	r5, r2
 800b178:	460e      	mov	r6, r1
 800b17a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b17e:	f7ff fa83 	bl	800a688 <_malloc_r>
 800b182:	4604      	mov	r4, r0
 800b184:	b140      	cbz	r0, 800b198 <__sfmoreglue+0x28>
 800b186:	2100      	movs	r1, #0
 800b188:	e9c0 1600 	strd	r1, r6, [r0]
 800b18c:	300c      	adds	r0, #12
 800b18e:	60a0      	str	r0, [r4, #8]
 800b190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b194:	f7fb fdca 	bl	8006d2c <memset>
 800b198:	4620      	mov	r0, r4
 800b19a:	bd70      	pop	{r4, r5, r6, pc}

0800b19c <__sfp_lock_acquire>:
 800b19c:	4801      	ldr	r0, [pc, #4]	; (800b1a4 <__sfp_lock_acquire+0x8>)
 800b19e:	f000 b8b3 	b.w	800b308 <__retarget_lock_acquire_recursive>
 800b1a2:	bf00      	nop
 800b1a4:	2000066c 	.word	0x2000066c

0800b1a8 <__sfp_lock_release>:
 800b1a8:	4801      	ldr	r0, [pc, #4]	; (800b1b0 <__sfp_lock_release+0x8>)
 800b1aa:	f000 b8ae 	b.w	800b30a <__retarget_lock_release_recursive>
 800b1ae:	bf00      	nop
 800b1b0:	2000066c 	.word	0x2000066c

0800b1b4 <__sinit_lock_acquire>:
 800b1b4:	4801      	ldr	r0, [pc, #4]	; (800b1bc <__sinit_lock_acquire+0x8>)
 800b1b6:	f000 b8a7 	b.w	800b308 <__retarget_lock_acquire_recursive>
 800b1ba:	bf00      	nop
 800b1bc:	20000667 	.word	0x20000667

0800b1c0 <__sinit_lock_release>:
 800b1c0:	4801      	ldr	r0, [pc, #4]	; (800b1c8 <__sinit_lock_release+0x8>)
 800b1c2:	f000 b8a2 	b.w	800b30a <__retarget_lock_release_recursive>
 800b1c6:	bf00      	nop
 800b1c8:	20000667 	.word	0x20000667

0800b1cc <__sinit>:
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	f7ff fff0 	bl	800b1b4 <__sinit_lock_acquire>
 800b1d4:	69a3      	ldr	r3, [r4, #24]
 800b1d6:	b11b      	cbz	r3, 800b1e0 <__sinit+0x14>
 800b1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1dc:	f7ff bff0 	b.w	800b1c0 <__sinit_lock_release>
 800b1e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1e4:	6523      	str	r3, [r4, #80]	; 0x50
 800b1e6:	4b13      	ldr	r3, [pc, #76]	; (800b234 <__sinit+0x68>)
 800b1e8:	4a13      	ldr	r2, [pc, #76]	; (800b238 <__sinit+0x6c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1ee:	42a3      	cmp	r3, r4
 800b1f0:	bf08      	it	eq
 800b1f2:	2301      	moveq	r3, #1
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	bf08      	it	eq
 800b1f8:	61a3      	streq	r3, [r4, #24]
 800b1fa:	f000 f81f 	bl	800b23c <__sfp>
 800b1fe:	6060      	str	r0, [r4, #4]
 800b200:	4620      	mov	r0, r4
 800b202:	f000 f81b 	bl	800b23c <__sfp>
 800b206:	60a0      	str	r0, [r4, #8]
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 f817 	bl	800b23c <__sfp>
 800b20e:	2200      	movs	r2, #0
 800b210:	2104      	movs	r1, #4
 800b212:	60e0      	str	r0, [r4, #12]
 800b214:	6860      	ldr	r0, [r4, #4]
 800b216:	f7ff ff81 	bl	800b11c <std>
 800b21a:	2201      	movs	r2, #1
 800b21c:	2109      	movs	r1, #9
 800b21e:	68a0      	ldr	r0, [r4, #8]
 800b220:	f7ff ff7c 	bl	800b11c <std>
 800b224:	2202      	movs	r2, #2
 800b226:	2112      	movs	r1, #18
 800b228:	68e0      	ldr	r0, [r4, #12]
 800b22a:	f7ff ff77 	bl	800b11c <std>
 800b22e:	2301      	movs	r3, #1
 800b230:	61a3      	str	r3, [r4, #24]
 800b232:	e7d1      	b.n	800b1d8 <__sinit+0xc>
 800b234:	0800e58c 	.word	0x0800e58c
 800b238:	0800b165 	.word	0x0800b165

0800b23c <__sfp>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	4607      	mov	r7, r0
 800b240:	f7ff ffac 	bl	800b19c <__sfp_lock_acquire>
 800b244:	4b1e      	ldr	r3, [pc, #120]	; (800b2c0 <__sfp+0x84>)
 800b246:	681e      	ldr	r6, [r3, #0]
 800b248:	69b3      	ldr	r3, [r6, #24]
 800b24a:	b913      	cbnz	r3, 800b252 <__sfp+0x16>
 800b24c:	4630      	mov	r0, r6
 800b24e:	f7ff ffbd 	bl	800b1cc <__sinit>
 800b252:	3648      	adds	r6, #72	; 0x48
 800b254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b258:	3b01      	subs	r3, #1
 800b25a:	d503      	bpl.n	800b264 <__sfp+0x28>
 800b25c:	6833      	ldr	r3, [r6, #0]
 800b25e:	b30b      	cbz	r3, 800b2a4 <__sfp+0x68>
 800b260:	6836      	ldr	r6, [r6, #0]
 800b262:	e7f7      	b.n	800b254 <__sfp+0x18>
 800b264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b268:	b9d5      	cbnz	r5, 800b2a0 <__sfp+0x64>
 800b26a:	4b16      	ldr	r3, [pc, #88]	; (800b2c4 <__sfp+0x88>)
 800b26c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b270:	60e3      	str	r3, [r4, #12]
 800b272:	6665      	str	r5, [r4, #100]	; 0x64
 800b274:	f000 f847 	bl	800b306 <__retarget_lock_init_recursive>
 800b278:	f7ff ff96 	bl	800b1a8 <__sfp_lock_release>
 800b27c:	2208      	movs	r2, #8
 800b27e:	4629      	mov	r1, r5
 800b280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b288:	6025      	str	r5, [r4, #0]
 800b28a:	61a5      	str	r5, [r4, #24]
 800b28c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b290:	f7fb fd4c 	bl	8006d2c <memset>
 800b294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b29c:	4620      	mov	r0, r4
 800b29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a0:	3468      	adds	r4, #104	; 0x68
 800b2a2:	e7d9      	b.n	800b258 <__sfp+0x1c>
 800b2a4:	2104      	movs	r1, #4
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	f7ff ff62 	bl	800b170 <__sfmoreglue>
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	6030      	str	r0, [r6, #0]
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d1d5      	bne.n	800b260 <__sfp+0x24>
 800b2b4:	f7ff ff78 	bl	800b1a8 <__sfp_lock_release>
 800b2b8:	230c      	movs	r3, #12
 800b2ba:	603b      	str	r3, [r7, #0]
 800b2bc:	e7ee      	b.n	800b29c <__sfp+0x60>
 800b2be:	bf00      	nop
 800b2c0:	0800e58c 	.word	0x0800e58c
 800b2c4:	ffff0001 	.word	0xffff0001

0800b2c8 <_fwalk_reent>:
 800b2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	4688      	mov	r8, r1
 800b2d0:	2700      	movs	r7, #0
 800b2d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2da:	f1b9 0901 	subs.w	r9, r9, #1
 800b2de:	d505      	bpl.n	800b2ec <_fwalk_reent+0x24>
 800b2e0:	6824      	ldr	r4, [r4, #0]
 800b2e2:	2c00      	cmp	r4, #0
 800b2e4:	d1f7      	bne.n	800b2d6 <_fwalk_reent+0xe>
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ec:	89ab      	ldrh	r3, [r5, #12]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d907      	bls.n	800b302 <_fwalk_reent+0x3a>
 800b2f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	d003      	beq.n	800b302 <_fwalk_reent+0x3a>
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	47c0      	blx	r8
 800b300:	4307      	orrs	r7, r0
 800b302:	3568      	adds	r5, #104	; 0x68
 800b304:	e7e9      	b.n	800b2da <_fwalk_reent+0x12>

0800b306 <__retarget_lock_init_recursive>:
 800b306:	4770      	bx	lr

0800b308 <__retarget_lock_acquire_recursive>:
 800b308:	4770      	bx	lr

0800b30a <__retarget_lock_release_recursive>:
 800b30a:	4770      	bx	lr

0800b30c <__swhatbuf_r>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	460e      	mov	r6, r1
 800b310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b314:	4614      	mov	r4, r2
 800b316:	2900      	cmp	r1, #0
 800b318:	461d      	mov	r5, r3
 800b31a:	b096      	sub	sp, #88	; 0x58
 800b31c:	da07      	bge.n	800b32e <__swhatbuf_r+0x22>
 800b31e:	2300      	movs	r3, #0
 800b320:	602b      	str	r3, [r5, #0]
 800b322:	89b3      	ldrh	r3, [r6, #12]
 800b324:	061a      	lsls	r2, r3, #24
 800b326:	d410      	bmi.n	800b34a <__swhatbuf_r+0x3e>
 800b328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32c:	e00e      	b.n	800b34c <__swhatbuf_r+0x40>
 800b32e:	466a      	mov	r2, sp
 800b330:	f000 f902 	bl	800b538 <_fstat_r>
 800b334:	2800      	cmp	r0, #0
 800b336:	dbf2      	blt.n	800b31e <__swhatbuf_r+0x12>
 800b338:	9a01      	ldr	r2, [sp, #4]
 800b33a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b33e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b342:	425a      	negs	r2, r3
 800b344:	415a      	adcs	r2, r3
 800b346:	602a      	str	r2, [r5, #0]
 800b348:	e7ee      	b.n	800b328 <__swhatbuf_r+0x1c>
 800b34a:	2340      	movs	r3, #64	; 0x40
 800b34c:	2000      	movs	r0, #0
 800b34e:	6023      	str	r3, [r4, #0]
 800b350:	b016      	add	sp, #88	; 0x58
 800b352:	bd70      	pop	{r4, r5, r6, pc}

0800b354 <__smakebuf_r>:
 800b354:	898b      	ldrh	r3, [r1, #12]
 800b356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b358:	079d      	lsls	r5, r3, #30
 800b35a:	4606      	mov	r6, r0
 800b35c:	460c      	mov	r4, r1
 800b35e:	d507      	bpl.n	800b370 <__smakebuf_r+0x1c>
 800b360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	6123      	str	r3, [r4, #16]
 800b368:	2301      	movs	r3, #1
 800b36a:	6163      	str	r3, [r4, #20]
 800b36c:	b002      	add	sp, #8
 800b36e:	bd70      	pop	{r4, r5, r6, pc}
 800b370:	466a      	mov	r2, sp
 800b372:	ab01      	add	r3, sp, #4
 800b374:	f7ff ffca 	bl	800b30c <__swhatbuf_r>
 800b378:	9900      	ldr	r1, [sp, #0]
 800b37a:	4605      	mov	r5, r0
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7ff f983 	bl	800a688 <_malloc_r>
 800b382:	b948      	cbnz	r0, 800b398 <__smakebuf_r+0x44>
 800b384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b388:	059a      	lsls	r2, r3, #22
 800b38a:	d4ef      	bmi.n	800b36c <__smakebuf_r+0x18>
 800b38c:	f023 0303 	bic.w	r3, r3, #3
 800b390:	f043 0302 	orr.w	r3, r3, #2
 800b394:	81a3      	strh	r3, [r4, #12]
 800b396:	e7e3      	b.n	800b360 <__smakebuf_r+0xc>
 800b398:	4b0d      	ldr	r3, [pc, #52]	; (800b3d0 <__smakebuf_r+0x7c>)
 800b39a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	6020      	str	r0, [r4, #0]
 800b3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a4:	81a3      	strh	r3, [r4, #12]
 800b3a6:	9b00      	ldr	r3, [sp, #0]
 800b3a8:	6120      	str	r0, [r4, #16]
 800b3aa:	6163      	str	r3, [r4, #20]
 800b3ac:	9b01      	ldr	r3, [sp, #4]
 800b3ae:	b15b      	cbz	r3, 800b3c8 <__smakebuf_r+0x74>
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3b6:	f000 f8d1 	bl	800b55c <_isatty_r>
 800b3ba:	b128      	cbz	r0, 800b3c8 <__smakebuf_r+0x74>
 800b3bc:	89a3      	ldrh	r3, [r4, #12]
 800b3be:	f023 0303 	bic.w	r3, r3, #3
 800b3c2:	f043 0301 	orr.w	r3, r3, #1
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	89a0      	ldrh	r0, [r4, #12]
 800b3ca:	4305      	orrs	r5, r0
 800b3cc:	81a5      	strh	r5, [r4, #12]
 800b3ce:	e7cd      	b.n	800b36c <__smakebuf_r+0x18>
 800b3d0:	0800b165 	.word	0x0800b165

0800b3d4 <_malloc_usable_size_r>:
 800b3d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d8:	1f18      	subs	r0, r3, #4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	bfbc      	itt	lt
 800b3de:	580b      	ldrlt	r3, [r1, r0]
 800b3e0:	18c0      	addlt	r0, r0, r3
 800b3e2:	4770      	bx	lr

0800b3e4 <_raise_r>:
 800b3e4:	291f      	cmp	r1, #31
 800b3e6:	b538      	push	{r3, r4, r5, lr}
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	460d      	mov	r5, r1
 800b3ec:	d904      	bls.n	800b3f8 <_raise_r+0x14>
 800b3ee:	2316      	movs	r3, #22
 800b3f0:	6003      	str	r3, [r0, #0]
 800b3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3fa:	b112      	cbz	r2, 800b402 <_raise_r+0x1e>
 800b3fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b400:	b94b      	cbnz	r3, 800b416 <_raise_r+0x32>
 800b402:	4620      	mov	r0, r4
 800b404:	f000 f830 	bl	800b468 <_getpid_r>
 800b408:	462a      	mov	r2, r5
 800b40a:	4601      	mov	r1, r0
 800b40c:	4620      	mov	r0, r4
 800b40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b412:	f000 b817 	b.w	800b444 <_kill_r>
 800b416:	2b01      	cmp	r3, #1
 800b418:	d00a      	beq.n	800b430 <_raise_r+0x4c>
 800b41a:	1c59      	adds	r1, r3, #1
 800b41c:	d103      	bne.n	800b426 <_raise_r+0x42>
 800b41e:	2316      	movs	r3, #22
 800b420:	6003      	str	r3, [r0, #0]
 800b422:	2001      	movs	r0, #1
 800b424:	e7e7      	b.n	800b3f6 <_raise_r+0x12>
 800b426:	2400      	movs	r4, #0
 800b428:	4628      	mov	r0, r5
 800b42a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b42e:	4798      	blx	r3
 800b430:	2000      	movs	r0, #0
 800b432:	e7e0      	b.n	800b3f6 <_raise_r+0x12>

0800b434 <raise>:
 800b434:	4b02      	ldr	r3, [pc, #8]	; (800b440 <raise+0xc>)
 800b436:	4601      	mov	r1, r0
 800b438:	6818      	ldr	r0, [r3, #0]
 800b43a:	f7ff bfd3 	b.w	800b3e4 <_raise_r>
 800b43e:	bf00      	nop
 800b440:	2000000c 	.word	0x2000000c

0800b444 <_kill_r>:
 800b444:	b538      	push	{r3, r4, r5, lr}
 800b446:	2300      	movs	r3, #0
 800b448:	4d06      	ldr	r5, [pc, #24]	; (800b464 <_kill_r+0x20>)
 800b44a:	4604      	mov	r4, r0
 800b44c:	4608      	mov	r0, r1
 800b44e:	4611      	mov	r1, r2
 800b450:	602b      	str	r3, [r5, #0]
 800b452:	f7f9 f929 	bl	80046a8 <_kill>
 800b456:	1c43      	adds	r3, r0, #1
 800b458:	d102      	bne.n	800b460 <_kill_r+0x1c>
 800b45a:	682b      	ldr	r3, [r5, #0]
 800b45c:	b103      	cbz	r3, 800b460 <_kill_r+0x1c>
 800b45e:	6023      	str	r3, [r4, #0]
 800b460:	bd38      	pop	{r3, r4, r5, pc}
 800b462:	bf00      	nop
 800b464:	20000660 	.word	0x20000660

0800b468 <_getpid_r>:
 800b468:	f7f9 b917 	b.w	800469a <_getpid>

0800b46c <__sread>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	460c      	mov	r4, r1
 800b470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b474:	f000 f894 	bl	800b5a0 <_read_r>
 800b478:	2800      	cmp	r0, #0
 800b47a:	bfab      	itete	ge
 800b47c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b47e:	89a3      	ldrhlt	r3, [r4, #12]
 800b480:	181b      	addge	r3, r3, r0
 800b482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b486:	bfac      	ite	ge
 800b488:	6563      	strge	r3, [r4, #84]	; 0x54
 800b48a:	81a3      	strhlt	r3, [r4, #12]
 800b48c:	bd10      	pop	{r4, pc}

0800b48e <__swrite>:
 800b48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b492:	461f      	mov	r7, r3
 800b494:	898b      	ldrh	r3, [r1, #12]
 800b496:	4605      	mov	r5, r0
 800b498:	05db      	lsls	r3, r3, #23
 800b49a:	460c      	mov	r4, r1
 800b49c:	4616      	mov	r6, r2
 800b49e:	d505      	bpl.n	800b4ac <__swrite+0x1e>
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a8:	f000 f868 	bl	800b57c <_lseek_r>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	4632      	mov	r2, r6
 800b4b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4b4:	81a3      	strh	r3, [r4, #12]
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c2:	f000 b817 	b.w	800b4f4 <_write_r>

0800b4c6 <__sseek>:
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ce:	f000 f855 	bl	800b57c <_lseek_r>
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	bf15      	itete	ne
 800b4d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4e2:	81a3      	strheq	r3, [r4, #12]
 800b4e4:	bf18      	it	ne
 800b4e6:	81a3      	strhne	r3, [r4, #12]
 800b4e8:	bd10      	pop	{r4, pc}

0800b4ea <__sclose>:
 800b4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ee:	f000 b813 	b.w	800b518 <_close_r>
	...

0800b4f4 <_write_r>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	4611      	mov	r1, r2
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	4d05      	ldr	r5, [pc, #20]	; (800b514 <_write_r+0x20>)
 800b500:	602a      	str	r2, [r5, #0]
 800b502:	461a      	mov	r2, r3
 800b504:	f7f9 f907 	bl	8004716 <_write>
 800b508:	1c43      	adds	r3, r0, #1
 800b50a:	d102      	bne.n	800b512 <_write_r+0x1e>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	b103      	cbz	r3, 800b512 <_write_r+0x1e>
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	20000660 	.word	0x20000660

0800b518 <_close_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	2300      	movs	r3, #0
 800b51c:	4d05      	ldr	r5, [pc, #20]	; (800b534 <_close_r+0x1c>)
 800b51e:	4604      	mov	r4, r0
 800b520:	4608      	mov	r0, r1
 800b522:	602b      	str	r3, [r5, #0]
 800b524:	f7f9 f913 	bl	800474e <_close>
 800b528:	1c43      	adds	r3, r0, #1
 800b52a:	d102      	bne.n	800b532 <_close_r+0x1a>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	b103      	cbz	r3, 800b532 <_close_r+0x1a>
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	bd38      	pop	{r3, r4, r5, pc}
 800b534:	20000660 	.word	0x20000660

0800b538 <_fstat_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	2300      	movs	r3, #0
 800b53c:	4d06      	ldr	r5, [pc, #24]	; (800b558 <_fstat_r+0x20>)
 800b53e:	4604      	mov	r4, r0
 800b540:	4608      	mov	r0, r1
 800b542:	4611      	mov	r1, r2
 800b544:	602b      	str	r3, [r5, #0]
 800b546:	f7f9 f90d 	bl	8004764 <_fstat>
 800b54a:	1c43      	adds	r3, r0, #1
 800b54c:	d102      	bne.n	800b554 <_fstat_r+0x1c>
 800b54e:	682b      	ldr	r3, [r5, #0]
 800b550:	b103      	cbz	r3, 800b554 <_fstat_r+0x1c>
 800b552:	6023      	str	r3, [r4, #0]
 800b554:	bd38      	pop	{r3, r4, r5, pc}
 800b556:	bf00      	nop
 800b558:	20000660 	.word	0x20000660

0800b55c <_isatty_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	2300      	movs	r3, #0
 800b560:	4d05      	ldr	r5, [pc, #20]	; (800b578 <_isatty_r+0x1c>)
 800b562:	4604      	mov	r4, r0
 800b564:	4608      	mov	r0, r1
 800b566:	602b      	str	r3, [r5, #0]
 800b568:	f7f9 f90b 	bl	8004782 <_isatty>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d102      	bne.n	800b576 <_isatty_r+0x1a>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	b103      	cbz	r3, 800b576 <_isatty_r+0x1a>
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	20000660 	.word	0x20000660

0800b57c <_lseek_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4604      	mov	r4, r0
 800b580:	4608      	mov	r0, r1
 800b582:	4611      	mov	r1, r2
 800b584:	2200      	movs	r2, #0
 800b586:	4d05      	ldr	r5, [pc, #20]	; (800b59c <_lseek_r+0x20>)
 800b588:	602a      	str	r2, [r5, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	f7f9 f903 	bl	8004796 <_lseek>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d102      	bne.n	800b59a <_lseek_r+0x1e>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	b103      	cbz	r3, 800b59a <_lseek_r+0x1e>
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	20000660 	.word	0x20000660

0800b5a0 <_read_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4608      	mov	r0, r1
 800b5a6:	4611      	mov	r1, r2
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	4d05      	ldr	r5, [pc, #20]	; (800b5c0 <_read_r+0x20>)
 800b5ac:	602a      	str	r2, [r5, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	f7f9 f894 	bl	80046dc <_read>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d102      	bne.n	800b5be <_read_r+0x1e>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	b103      	cbz	r3, 800b5be <_read_r+0x1e>
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	20000660 	.word	0x20000660

0800b5c4 <cos>:
 800b5c4:	b530      	push	{r4, r5, lr}
 800b5c6:	4a1e      	ldr	r2, [pc, #120]	; (800b640 <cos+0x7c>)
 800b5c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	dc04      	bgt.n	800b5dc <cos+0x18>
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f001 f8f3 	bl	800c7c0 <__kernel_cos>
 800b5da:	e006      	b.n	800b5ea <cos+0x26>
 800b5dc:	4a19      	ldr	r2, [pc, #100]	; (800b644 <cos+0x80>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	dd05      	ble.n	800b5ee <cos+0x2a>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	f7f4 fdbf 	bl	8000168 <__aeabi_dsub>
 800b5ea:	b007      	add	sp, #28
 800b5ec:	bd30      	pop	{r4, r5, pc}
 800b5ee:	aa02      	add	r2, sp, #8
 800b5f0:	f000 fb56 	bl	800bca0 <__ieee754_rem_pio2>
 800b5f4:	f000 0003 	and.w	r0, r0, #3
 800b5f8:	2801      	cmp	r0, #1
 800b5fa:	d007      	beq.n	800b60c <cos+0x48>
 800b5fc:	2802      	cmp	r0, #2
 800b5fe:	d00f      	beq.n	800b620 <cos+0x5c>
 800b600:	b9a8      	cbnz	r0, 800b62e <cos+0x6a>
 800b602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b60a:	e7e4      	b.n	800b5d6 <cos+0x12>
 800b60c:	9000      	str	r0, [sp, #0]
 800b60e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b616:	f001 fcdb 	bl	800cfd0 <__kernel_sin>
 800b61a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b61e:	e7e4      	b.n	800b5ea <cos+0x26>
 800b620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b628:	f001 f8ca 	bl	800c7c0 <__kernel_cos>
 800b62c:	e7f5      	b.n	800b61a <cos+0x56>
 800b62e:	2301      	movs	r3, #1
 800b630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b63a:	f001 fcc9 	bl	800cfd0 <__kernel_sin>
 800b63e:	e7d4      	b.n	800b5ea <cos+0x26>
 800b640:	3fe921fb 	.word	0x3fe921fb
 800b644:	7fefffff 	.word	0x7fefffff

0800b648 <sin>:
 800b648:	b530      	push	{r4, r5, lr}
 800b64a:	4a20      	ldr	r2, [pc, #128]	; (800b6cc <sin+0x84>)
 800b64c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b650:	4293      	cmp	r3, r2
 800b652:	b087      	sub	sp, #28
 800b654:	dc06      	bgt.n	800b664 <sin+0x1c>
 800b656:	2300      	movs	r3, #0
 800b658:	2200      	movs	r2, #0
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	2300      	movs	r3, #0
 800b65e:	f001 fcb7 	bl	800cfd0 <__kernel_sin>
 800b662:	e006      	b.n	800b672 <sin+0x2a>
 800b664:	4a1a      	ldr	r2, [pc, #104]	; (800b6d0 <sin+0x88>)
 800b666:	4293      	cmp	r3, r2
 800b668:	dd05      	ble.n	800b676 <sin+0x2e>
 800b66a:	4602      	mov	r2, r0
 800b66c:	460b      	mov	r3, r1
 800b66e:	f7f4 fd7b 	bl	8000168 <__aeabi_dsub>
 800b672:	b007      	add	sp, #28
 800b674:	bd30      	pop	{r4, r5, pc}
 800b676:	aa02      	add	r2, sp, #8
 800b678:	f000 fb12 	bl	800bca0 <__ieee754_rem_pio2>
 800b67c:	f000 0003 	and.w	r0, r0, #3
 800b680:	2801      	cmp	r0, #1
 800b682:	d009      	beq.n	800b698 <sin+0x50>
 800b684:	2802      	cmp	r0, #2
 800b686:	d00e      	beq.n	800b6a6 <sin+0x5e>
 800b688:	b9c0      	cbnz	r0, 800b6bc <sin+0x74>
 800b68a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b68e:	2301      	movs	r3, #1
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b696:	e7e2      	b.n	800b65e <sin+0x16>
 800b698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b69c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6a0:	f001 f88e 	bl	800c7c0 <__kernel_cos>
 800b6a4:	e7e5      	b.n	800b672 <sin+0x2a>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6b2:	f001 fc8d 	bl	800cfd0 <__kernel_sin>
 800b6b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b6ba:	e7da      	b.n	800b672 <sin+0x2a>
 800b6bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6c4:	f001 f87c 	bl	800c7c0 <__kernel_cos>
 800b6c8:	e7f5      	b.n	800b6b6 <sin+0x6e>
 800b6ca:	bf00      	nop
 800b6cc:	3fe921fb 	.word	0x3fe921fb
 800b6d0:	7fefffff 	.word	0x7fefffff

0800b6d4 <atanf>:
 800b6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b6dc:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	4680      	mov	r8, r0
 800b6e4:	db0e      	blt.n	800b704 <atanf+0x30>
 800b6e6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b6ea:	dd04      	ble.n	800b6f6 <atanf+0x22>
 800b6ec:	4601      	mov	r1, r0
 800b6ee:	f7f5 fa41 	bl	8000b74 <__addsf3>
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	e003      	b.n	800b6fe <atanf+0x2a>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f300 80ce 	bgt.w	800b898 <atanf+0x1c4>
 800b6fc:	4c67      	ldr	r4, [pc, #412]	; (800b89c <atanf+0x1c8>)
 800b6fe:	4620      	mov	r0, r4
 800b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b704:	4b66      	ldr	r3, [pc, #408]	; (800b8a0 <atanf+0x1cc>)
 800b706:	429d      	cmp	r5, r3
 800b708:	dc0e      	bgt.n	800b728 <atanf+0x54>
 800b70a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800b70e:	da08      	bge.n	800b722 <atanf+0x4e>
 800b710:	4964      	ldr	r1, [pc, #400]	; (800b8a4 <atanf+0x1d0>)
 800b712:	f7f5 fa2f 	bl	8000b74 <__addsf3>
 800b716:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b71a:	f7f5 fcef 	bl	80010fc <__aeabi_fcmpgt>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d1ed      	bne.n	800b6fe <atanf+0x2a>
 800b722:	f04f 36ff 	mov.w	r6, #4294967295
 800b726:	e01c      	b.n	800b762 <atanf+0x8e>
 800b728:	f000 f914 	bl	800b954 <fabsf>
 800b72c:	4b5e      	ldr	r3, [pc, #376]	; (800b8a8 <atanf+0x1d4>)
 800b72e:	4604      	mov	r4, r0
 800b730:	429d      	cmp	r5, r3
 800b732:	dc7c      	bgt.n	800b82e <atanf+0x15a>
 800b734:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b738:	429d      	cmp	r5, r3
 800b73a:	dc67      	bgt.n	800b80c <atanf+0x138>
 800b73c:	4601      	mov	r1, r0
 800b73e:	f7f5 fa19 	bl	8000b74 <__addsf3>
 800b742:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b746:	f7f5 fa13 	bl	8000b70 <__aeabi_fsub>
 800b74a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b74e:	4605      	mov	r5, r0
 800b750:	4620      	mov	r0, r4
 800b752:	f7f5 fa0f 	bl	8000b74 <__addsf3>
 800b756:	4601      	mov	r1, r0
 800b758:	4628      	mov	r0, r5
 800b75a:	f7f5 fbc7 	bl	8000eec <__aeabi_fdiv>
 800b75e:	2600      	movs	r6, #0
 800b760:	4604      	mov	r4, r0
 800b762:	4621      	mov	r1, r4
 800b764:	4620      	mov	r0, r4
 800b766:	f7f5 fb0d 	bl	8000d84 <__aeabi_fmul>
 800b76a:	4601      	mov	r1, r0
 800b76c:	4607      	mov	r7, r0
 800b76e:	f7f5 fb09 	bl	8000d84 <__aeabi_fmul>
 800b772:	4605      	mov	r5, r0
 800b774:	494d      	ldr	r1, [pc, #308]	; (800b8ac <atanf+0x1d8>)
 800b776:	f7f5 fb05 	bl	8000d84 <__aeabi_fmul>
 800b77a:	494d      	ldr	r1, [pc, #308]	; (800b8b0 <atanf+0x1dc>)
 800b77c:	f7f5 f9fa 	bl	8000b74 <__addsf3>
 800b780:	4629      	mov	r1, r5
 800b782:	f7f5 faff 	bl	8000d84 <__aeabi_fmul>
 800b786:	494b      	ldr	r1, [pc, #300]	; (800b8b4 <atanf+0x1e0>)
 800b788:	f7f5 f9f4 	bl	8000b74 <__addsf3>
 800b78c:	4629      	mov	r1, r5
 800b78e:	f7f5 faf9 	bl	8000d84 <__aeabi_fmul>
 800b792:	4949      	ldr	r1, [pc, #292]	; (800b8b8 <atanf+0x1e4>)
 800b794:	f7f5 f9ee 	bl	8000b74 <__addsf3>
 800b798:	4629      	mov	r1, r5
 800b79a:	f7f5 faf3 	bl	8000d84 <__aeabi_fmul>
 800b79e:	4947      	ldr	r1, [pc, #284]	; (800b8bc <atanf+0x1e8>)
 800b7a0:	f7f5 f9e8 	bl	8000b74 <__addsf3>
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	f7f5 faed 	bl	8000d84 <__aeabi_fmul>
 800b7aa:	4945      	ldr	r1, [pc, #276]	; (800b8c0 <atanf+0x1ec>)
 800b7ac:	f7f5 f9e2 	bl	8000b74 <__addsf3>
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	f7f5 fae7 	bl	8000d84 <__aeabi_fmul>
 800b7b6:	4943      	ldr	r1, [pc, #268]	; (800b8c4 <atanf+0x1f0>)
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	f7f5 fae2 	bl	8000d84 <__aeabi_fmul>
 800b7c0:	4941      	ldr	r1, [pc, #260]	; (800b8c8 <atanf+0x1f4>)
 800b7c2:	f7f5 f9d5 	bl	8000b70 <__aeabi_fsub>
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	f7f5 fadc 	bl	8000d84 <__aeabi_fmul>
 800b7cc:	493f      	ldr	r1, [pc, #252]	; (800b8cc <atanf+0x1f8>)
 800b7ce:	f7f5 f9cf 	bl	8000b70 <__aeabi_fsub>
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	f7f5 fad6 	bl	8000d84 <__aeabi_fmul>
 800b7d8:	493d      	ldr	r1, [pc, #244]	; (800b8d0 <atanf+0x1fc>)
 800b7da:	f7f5 f9c9 	bl	8000b70 <__aeabi_fsub>
 800b7de:	4629      	mov	r1, r5
 800b7e0:	f7f5 fad0 	bl	8000d84 <__aeabi_fmul>
 800b7e4:	493b      	ldr	r1, [pc, #236]	; (800b8d4 <atanf+0x200>)
 800b7e6:	f7f5 f9c3 	bl	8000b70 <__aeabi_fsub>
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	f7f5 faca 	bl	8000d84 <__aeabi_fmul>
 800b7f0:	4601      	mov	r1, r0
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	f7f5 f9be 	bl	8000b74 <__addsf3>
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	f7f5 fac3 	bl	8000d84 <__aeabi_fmul>
 800b7fe:	1c73      	adds	r3, r6, #1
 800b800:	4601      	mov	r1, r0
 800b802:	d133      	bne.n	800b86c <atanf+0x198>
 800b804:	4620      	mov	r0, r4
 800b806:	f7f5 f9b3 	bl	8000b70 <__aeabi_fsub>
 800b80a:	e772      	b.n	800b6f2 <atanf+0x1e>
 800b80c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b810:	f7f5 f9ae 	bl	8000b70 <__aeabi_fsub>
 800b814:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b818:	4605      	mov	r5, r0
 800b81a:	4620      	mov	r0, r4
 800b81c:	f7f5 f9aa 	bl	8000b74 <__addsf3>
 800b820:	4601      	mov	r1, r0
 800b822:	4628      	mov	r0, r5
 800b824:	f7f5 fb62 	bl	8000eec <__aeabi_fdiv>
 800b828:	2601      	movs	r6, #1
 800b82a:	4604      	mov	r4, r0
 800b82c:	e799      	b.n	800b762 <atanf+0x8e>
 800b82e:	4b2a      	ldr	r3, [pc, #168]	; (800b8d8 <atanf+0x204>)
 800b830:	429d      	cmp	r5, r3
 800b832:	dc14      	bgt.n	800b85e <atanf+0x18a>
 800b834:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b838:	f7f5 f99a 	bl	8000b70 <__aeabi_fsub>
 800b83c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b840:	4605      	mov	r5, r0
 800b842:	4620      	mov	r0, r4
 800b844:	f7f5 fa9e 	bl	8000d84 <__aeabi_fmul>
 800b848:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b84c:	f7f5 f992 	bl	8000b74 <__addsf3>
 800b850:	4601      	mov	r1, r0
 800b852:	4628      	mov	r0, r5
 800b854:	f7f5 fb4a 	bl	8000eec <__aeabi_fdiv>
 800b858:	2602      	movs	r6, #2
 800b85a:	4604      	mov	r4, r0
 800b85c:	e781      	b.n	800b762 <atanf+0x8e>
 800b85e:	4601      	mov	r1, r0
 800b860:	481e      	ldr	r0, [pc, #120]	; (800b8dc <atanf+0x208>)
 800b862:	f7f5 fb43 	bl	8000eec <__aeabi_fdiv>
 800b866:	2603      	movs	r6, #3
 800b868:	4604      	mov	r4, r0
 800b86a:	e77a      	b.n	800b762 <atanf+0x8e>
 800b86c:	4b1c      	ldr	r3, [pc, #112]	; (800b8e0 <atanf+0x20c>)
 800b86e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b872:	f7f5 f97d 	bl	8000b70 <__aeabi_fsub>
 800b876:	4621      	mov	r1, r4
 800b878:	f7f5 f97a 	bl	8000b70 <__aeabi_fsub>
 800b87c:	4b19      	ldr	r3, [pc, #100]	; (800b8e4 <atanf+0x210>)
 800b87e:	4601      	mov	r1, r0
 800b880:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b884:	f7f5 f974 	bl	8000b70 <__aeabi_fsub>
 800b888:	f1b8 0f00 	cmp.w	r8, #0
 800b88c:	4604      	mov	r4, r0
 800b88e:	f6bf af36 	bge.w	800b6fe <atanf+0x2a>
 800b892:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b896:	e72c      	b.n	800b6f2 <atanf+0x1e>
 800b898:	4c13      	ldr	r4, [pc, #76]	; (800b8e8 <atanf+0x214>)
 800b89a:	e730      	b.n	800b6fe <atanf+0x2a>
 800b89c:	bfc90fdb 	.word	0xbfc90fdb
 800b8a0:	3edfffff 	.word	0x3edfffff
 800b8a4:	7149f2ca 	.word	0x7149f2ca
 800b8a8:	3f97ffff 	.word	0x3f97ffff
 800b8ac:	3c8569d7 	.word	0x3c8569d7
 800b8b0:	3d4bda59 	.word	0x3d4bda59
 800b8b4:	3d886b35 	.word	0x3d886b35
 800b8b8:	3dba2e6e 	.word	0x3dba2e6e
 800b8bc:	3e124925 	.word	0x3e124925
 800b8c0:	3eaaaaab 	.word	0x3eaaaaab
 800b8c4:	bd15a221 	.word	0xbd15a221
 800b8c8:	3d6ef16b 	.word	0x3d6ef16b
 800b8cc:	3d9d8795 	.word	0x3d9d8795
 800b8d0:	3de38e38 	.word	0x3de38e38
 800b8d4:	3e4ccccd 	.word	0x3e4ccccd
 800b8d8:	401bffff 	.word	0x401bffff
 800b8dc:	bf800000 	.word	0xbf800000
 800b8e0:	0800ea54 	.word	0x0800ea54
 800b8e4:	0800ea44 	.word	0x0800ea44
 800b8e8:	3fc90fdb 	.word	0x3fc90fdb

0800b8ec <cosf>:
 800b8ec:	b507      	push	{r0, r1, r2, lr}
 800b8ee:	4a18      	ldr	r2, [pc, #96]	; (800b950 <cosf+0x64>)
 800b8f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	4601      	mov	r1, r0
 800b8f8:	dc03      	bgt.n	800b902 <cosf+0x16>
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	f001 fc1e 	bl	800d13c <__kernel_cosf>
 800b900:	e004      	b.n	800b90c <cosf+0x20>
 800b902:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b906:	db04      	blt.n	800b912 <cosf+0x26>
 800b908:	f7f5 f932 	bl	8000b70 <__aeabi_fsub>
 800b90c:	b003      	add	sp, #12
 800b90e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b912:	4669      	mov	r1, sp
 800b914:	f000 fda4 	bl	800c460 <__ieee754_rem_pio2f>
 800b918:	f000 0203 	and.w	r2, r0, #3
 800b91c:	2a01      	cmp	r2, #1
 800b91e:	d005      	beq.n	800b92c <cosf+0x40>
 800b920:	2a02      	cmp	r2, #2
 800b922:	d00a      	beq.n	800b93a <cosf+0x4e>
 800b924:	b972      	cbnz	r2, 800b944 <cosf+0x58>
 800b926:	9901      	ldr	r1, [sp, #4]
 800b928:	9800      	ldr	r0, [sp, #0]
 800b92a:	e7e7      	b.n	800b8fc <cosf+0x10>
 800b92c:	9901      	ldr	r1, [sp, #4]
 800b92e:	9800      	ldr	r0, [sp, #0]
 800b930:	f001 ff3a 	bl	800d7a8 <__kernel_sinf>
 800b934:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b938:	e7e8      	b.n	800b90c <cosf+0x20>
 800b93a:	9901      	ldr	r1, [sp, #4]
 800b93c:	9800      	ldr	r0, [sp, #0]
 800b93e:	f001 fbfd 	bl	800d13c <__kernel_cosf>
 800b942:	e7f7      	b.n	800b934 <cosf+0x48>
 800b944:	2201      	movs	r2, #1
 800b946:	9901      	ldr	r1, [sp, #4]
 800b948:	9800      	ldr	r0, [sp, #0]
 800b94a:	f001 ff2d 	bl	800d7a8 <__kernel_sinf>
 800b94e:	e7dd      	b.n	800b90c <cosf+0x20>
 800b950:	3f490fd8 	.word	0x3f490fd8

0800b954 <fabsf>:
 800b954:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b958:	4770      	bx	lr
	...

0800b95c <sinf>:
 800b95c:	b507      	push	{r0, r1, r2, lr}
 800b95e:	4a19      	ldr	r2, [pc, #100]	; (800b9c4 <sinf+0x68>)
 800b960:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b964:	4293      	cmp	r3, r2
 800b966:	4601      	mov	r1, r0
 800b968:	dc04      	bgt.n	800b974 <sinf+0x18>
 800b96a:	2200      	movs	r2, #0
 800b96c:	2100      	movs	r1, #0
 800b96e:	f001 ff1b 	bl	800d7a8 <__kernel_sinf>
 800b972:	e004      	b.n	800b97e <sinf+0x22>
 800b974:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b978:	db04      	blt.n	800b984 <sinf+0x28>
 800b97a:	f7f5 f8f9 	bl	8000b70 <__aeabi_fsub>
 800b97e:	b003      	add	sp, #12
 800b980:	f85d fb04 	ldr.w	pc, [sp], #4
 800b984:	4669      	mov	r1, sp
 800b986:	f000 fd6b 	bl	800c460 <__ieee754_rem_pio2f>
 800b98a:	f000 0003 	and.w	r0, r0, #3
 800b98e:	2801      	cmp	r0, #1
 800b990:	d006      	beq.n	800b9a0 <sinf+0x44>
 800b992:	2802      	cmp	r0, #2
 800b994:	d009      	beq.n	800b9aa <sinf+0x4e>
 800b996:	b980      	cbnz	r0, 800b9ba <sinf+0x5e>
 800b998:	2201      	movs	r2, #1
 800b99a:	9901      	ldr	r1, [sp, #4]
 800b99c:	9800      	ldr	r0, [sp, #0]
 800b99e:	e7e6      	b.n	800b96e <sinf+0x12>
 800b9a0:	9901      	ldr	r1, [sp, #4]
 800b9a2:	9800      	ldr	r0, [sp, #0]
 800b9a4:	f001 fbca 	bl	800d13c <__kernel_cosf>
 800b9a8:	e7e9      	b.n	800b97e <sinf+0x22>
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	9901      	ldr	r1, [sp, #4]
 800b9ae:	9800      	ldr	r0, [sp, #0]
 800b9b0:	f001 fefa 	bl	800d7a8 <__kernel_sinf>
 800b9b4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b9b8:	e7e1      	b.n	800b97e <sinf+0x22>
 800b9ba:	9901      	ldr	r1, [sp, #4]
 800b9bc:	9800      	ldr	r0, [sp, #0]
 800b9be:	f001 fbbd 	bl	800d13c <__kernel_cosf>
 800b9c2:	e7f7      	b.n	800b9b4 <sinf+0x58>
 800b9c4:	3f490fd8 	.word	0x3f490fd8

0800b9c8 <tanf>:
 800b9c8:	b507      	push	{r0, r1, r2, lr}
 800b9ca:	4a0f      	ldr	r2, [pc, #60]	; (800ba08 <tanf+0x40>)
 800b9cc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	dc04      	bgt.n	800b9e0 <tanf+0x18>
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	2100      	movs	r1, #0
 800b9da:	f001 ff5b 	bl	800d894 <__kernel_tanf>
 800b9de:	e004      	b.n	800b9ea <tanf+0x22>
 800b9e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b9e4:	db04      	blt.n	800b9f0 <tanf+0x28>
 800b9e6:	f7f5 f8c3 	bl	8000b70 <__aeabi_fsub>
 800b9ea:	b003      	add	sp, #12
 800b9ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9f0:	4669      	mov	r1, sp
 800b9f2:	f000 fd35 	bl	800c460 <__ieee754_rem_pio2f>
 800b9f6:	0042      	lsls	r2, r0, #1
 800b9f8:	f002 0202 	and.w	r2, r2, #2
 800b9fc:	9901      	ldr	r1, [sp, #4]
 800b9fe:	9800      	ldr	r0, [sp, #0]
 800ba00:	f1c2 0201 	rsb	r2, r2, #1
 800ba04:	e7e9      	b.n	800b9da <tanf+0x12>
 800ba06:	bf00      	nop
 800ba08:	3f490fda 	.word	0x3f490fda

0800ba0c <atan2>:
 800ba0c:	f000 b874 	b.w	800baf8 <__ieee754_atan2>

0800ba10 <sqrt>:
 800ba10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	f000 fb33 	bl	800c080 <__ieee754_sqrt>
 800ba1a:	4b12      	ldr	r3, [pc, #72]	; (800ba64 <sqrt+0x54>)
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	f993 3000 	ldrsb.w	r3, [r3]
 800ba22:	460d      	mov	r5, r1
 800ba24:	3301      	adds	r3, #1
 800ba26:	d019      	beq.n	800ba5c <sqrt+0x4c>
 800ba28:	4632      	mov	r2, r6
 800ba2a:	463b      	mov	r3, r7
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	4639      	mov	r1, r7
 800ba30:	f7f4 ffec 	bl	8000a0c <__aeabi_dcmpun>
 800ba34:	b990      	cbnz	r0, 800ba5c <sqrt+0x4c>
 800ba36:	2200      	movs	r2, #0
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	f7f4 ffbd 	bl	80009bc <__aeabi_dcmplt>
 800ba42:	b158      	cbz	r0, 800ba5c <sqrt+0x4c>
 800ba44:	f7fb f948 	bl	8006cd8 <__errno>
 800ba48:	2321      	movs	r3, #33	; 0x21
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	6003      	str	r3, [r0, #0]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	4610      	mov	r0, r2
 800ba52:	4619      	mov	r1, r3
 800ba54:	f7f4 fe6a 	bl	800072c <__aeabi_ddiv>
 800ba58:	4604      	mov	r4, r0
 800ba5a:	460d      	mov	r5, r1
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba62:	bf00      	nop
 800ba64:	200001e0 	.word	0x200001e0

0800ba68 <asinf>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	f000 fbb4 	bl	800c1d8 <__ieee754_asinf>
 800ba70:	4b0e      	ldr	r3, [pc, #56]	; (800baac <asinf+0x44>)
 800ba72:	4605      	mov	r5, r0
 800ba74:	f993 3000 	ldrsb.w	r3, [r3]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	d015      	beq.n	800baa8 <asinf+0x40>
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f7f5 fb46 	bl	8001110 <__aeabi_fcmpun>
 800ba84:	b980      	cbnz	r0, 800baa8 <asinf+0x40>
 800ba86:	4620      	mov	r0, r4
 800ba88:	f7ff ff64 	bl	800b954 <fabsf>
 800ba8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ba90:	f7f5 fb34 	bl	80010fc <__aeabi_fcmpgt>
 800ba94:	b140      	cbz	r0, 800baa8 <asinf+0x40>
 800ba96:	f7fb f91f 	bl	8006cd8 <__errno>
 800ba9a:	2321      	movs	r3, #33	; 0x21
 800ba9c:	6003      	str	r3, [r0, #0]
 800ba9e:	4804      	ldr	r0, [pc, #16]	; (800bab0 <asinf+0x48>)
 800baa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa4:	f7fb bfbc 	b.w	8007a20 <nanf>
 800baa8:	4628      	mov	r0, r5
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	200001e0 	.word	0x200001e0
 800bab0:	0800e9e0 	.word	0x0800e9e0

0800bab4 <sqrtf>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4605      	mov	r5, r0
 800bab8:	f000 fe30 	bl	800c71c <__ieee754_sqrtf>
 800babc:	4b0d      	ldr	r3, [pc, #52]	; (800baf4 <sqrtf+0x40>)
 800babe:	4604      	mov	r4, r0
 800bac0:	f993 3000 	ldrsb.w	r3, [r3]
 800bac4:	3301      	adds	r3, #1
 800bac6:	d012      	beq.n	800baee <sqrtf+0x3a>
 800bac8:	4629      	mov	r1, r5
 800baca:	4628      	mov	r0, r5
 800bacc:	f7f5 fb20 	bl	8001110 <__aeabi_fcmpun>
 800bad0:	b968      	cbnz	r0, 800baee <sqrtf+0x3a>
 800bad2:	2100      	movs	r1, #0
 800bad4:	4628      	mov	r0, r5
 800bad6:	f7f5 faf3 	bl	80010c0 <__aeabi_fcmplt>
 800bada:	b140      	cbz	r0, 800baee <sqrtf+0x3a>
 800badc:	f7fb f8fc 	bl	8006cd8 <__errno>
 800bae0:	2321      	movs	r3, #33	; 0x21
 800bae2:	2100      	movs	r1, #0
 800bae4:	6003      	str	r3, [r0, #0]
 800bae6:	4608      	mov	r0, r1
 800bae8:	f7f5 fa00 	bl	8000eec <__aeabi_fdiv>
 800baec:	4604      	mov	r4, r0
 800baee:	4620      	mov	r0, r4
 800baf0:	bd38      	pop	{r3, r4, r5, pc}
 800baf2:	bf00      	nop
 800baf4:	200001e0 	.word	0x200001e0

0800baf8 <__ieee754_atan2>:
 800baf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafc:	4692      	mov	sl, r2
 800bafe:	4699      	mov	r9, r3
 800bb00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bb04:	461f      	mov	r7, r3
 800bb06:	f1ca 0300 	rsb	r3, sl, #0
 800bb0a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800bc98 <__ieee754_atan2+0x1a0>
 800bb0e:	ea43 030a 	orr.w	r3, r3, sl
 800bb12:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bb16:	4573      	cmp	r3, lr
 800bb18:	4604      	mov	r4, r0
 800bb1a:	460d      	mov	r5, r1
 800bb1c:	d808      	bhi.n	800bb30 <__ieee754_atan2+0x38>
 800bb1e:	4246      	negs	r6, r0
 800bb20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb24:	4306      	orrs	r6, r0
 800bb26:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800bb2a:	4576      	cmp	r6, lr
 800bb2c:	468c      	mov	ip, r1
 800bb2e:	d908      	bls.n	800bb42 <__ieee754_atan2+0x4a>
 800bb30:	4652      	mov	r2, sl
 800bb32:	464b      	mov	r3, r9
 800bb34:	4620      	mov	r0, r4
 800bb36:	4629      	mov	r1, r5
 800bb38:	f7f4 fb18 	bl	800016c <__adddf3>
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	460d      	mov	r5, r1
 800bb40:	e019      	b.n	800bb76 <__ieee754_atan2+0x7e>
 800bb42:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800bb46:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800bb4a:	ea56 060a 	orrs.w	r6, r6, sl
 800bb4e:	d103      	bne.n	800bb58 <__ieee754_atan2+0x60>
 800bb50:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	f001 bfcc 	b.w	800daf0 <atan>
 800bb58:	17be      	asrs	r6, r7, #30
 800bb5a:	f006 0602 	and.w	r6, r6, #2
 800bb5e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800bb62:	ea53 0100 	orrs.w	r1, r3, r0
 800bb66:	d10a      	bne.n	800bb7e <__ieee754_atan2+0x86>
 800bb68:	2e02      	cmp	r6, #2
 800bb6a:	d067      	beq.n	800bc3c <__ieee754_atan2+0x144>
 800bb6c:	2e03      	cmp	r6, #3
 800bb6e:	d102      	bne.n	800bb76 <__ieee754_atan2+0x7e>
 800bb70:	a53b      	add	r5, pc, #236	; (adr r5, 800bc60 <__ieee754_atan2+0x168>)
 800bb72:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb76:	4620      	mov	r0, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7e:	ea52 010a 	orrs.w	r1, r2, sl
 800bb82:	d106      	bne.n	800bb92 <__ieee754_atan2+0x9a>
 800bb84:	f1bc 0f00 	cmp.w	ip, #0
 800bb88:	da63      	bge.n	800bc52 <__ieee754_atan2+0x15a>
 800bb8a:	a537      	add	r5, pc, #220	; (adr r5, 800bc68 <__ieee754_atan2+0x170>)
 800bb8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb90:	e7f1      	b.n	800bb76 <__ieee754_atan2+0x7e>
 800bb92:	4572      	cmp	r2, lr
 800bb94:	d10f      	bne.n	800bbb6 <__ieee754_atan2+0xbe>
 800bb96:	4293      	cmp	r3, r2
 800bb98:	f106 36ff 	add.w	r6, r6, #4294967295
 800bb9c:	d107      	bne.n	800bbae <__ieee754_atan2+0xb6>
 800bb9e:	2e02      	cmp	r6, #2
 800bba0:	d850      	bhi.n	800bc44 <__ieee754_atan2+0x14c>
 800bba2:	4b3b      	ldr	r3, [pc, #236]	; (800bc90 <__ieee754_atan2+0x198>)
 800bba4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bba8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800bbac:	e7e3      	b.n	800bb76 <__ieee754_atan2+0x7e>
 800bbae:	2e02      	cmp	r6, #2
 800bbb0:	d84c      	bhi.n	800bc4c <__ieee754_atan2+0x154>
 800bbb2:	4b38      	ldr	r3, [pc, #224]	; (800bc94 <__ieee754_atan2+0x19c>)
 800bbb4:	e7f6      	b.n	800bba4 <__ieee754_atan2+0xac>
 800bbb6:	4573      	cmp	r3, lr
 800bbb8:	d0e4      	beq.n	800bb84 <__ieee754_atan2+0x8c>
 800bbba:	1a9b      	subs	r3, r3, r2
 800bbbc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bbc0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bbc4:	da20      	bge.n	800bc08 <__ieee754_atan2+0x110>
 800bbc6:	2f00      	cmp	r7, #0
 800bbc8:	da01      	bge.n	800bbce <__ieee754_atan2+0xd6>
 800bbca:	323c      	adds	r2, #60	; 0x3c
 800bbcc:	db20      	blt.n	800bc10 <__ieee754_atan2+0x118>
 800bbce:	4652      	mov	r2, sl
 800bbd0:	464b      	mov	r3, r9
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	f7f4 fda9 	bl	800072c <__aeabi_ddiv>
 800bbda:	f002 f913 	bl	800de04 <fabs>
 800bbde:	f001 ff87 	bl	800daf0 <atan>
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	460d      	mov	r5, r1
 800bbe6:	2e01      	cmp	r6, #1
 800bbe8:	d015      	beq.n	800bc16 <__ieee754_atan2+0x11e>
 800bbea:	2e02      	cmp	r6, #2
 800bbec:	d017      	beq.n	800bc1e <__ieee754_atan2+0x126>
 800bbee:	2e00      	cmp	r6, #0
 800bbf0:	d0c1      	beq.n	800bb76 <__ieee754_atan2+0x7e>
 800bbf2:	a31f      	add	r3, pc, #124	; (adr r3, 800bc70 <__ieee754_atan2+0x178>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	f7f4 fab4 	bl	8000168 <__aeabi_dsub>
 800bc00:	a31d      	add	r3, pc, #116	; (adr r3, 800bc78 <__ieee754_atan2+0x180>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	e016      	b.n	800bc36 <__ieee754_atan2+0x13e>
 800bc08:	a51d      	add	r5, pc, #116	; (adr r5, 800bc80 <__ieee754_atan2+0x188>)
 800bc0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc0e:	e7ea      	b.n	800bbe6 <__ieee754_atan2+0xee>
 800bc10:	2400      	movs	r4, #0
 800bc12:	2500      	movs	r5, #0
 800bc14:	e7e7      	b.n	800bbe6 <__ieee754_atan2+0xee>
 800bc16:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bc1a:	461d      	mov	r5, r3
 800bc1c:	e7ab      	b.n	800bb76 <__ieee754_atan2+0x7e>
 800bc1e:	a314      	add	r3, pc, #80	; (adr r3, 800bc70 <__ieee754_atan2+0x178>)
 800bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc24:	4620      	mov	r0, r4
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f4 fa9e 	bl	8000168 <__aeabi_dsub>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	a111      	add	r1, pc, #68	; (adr r1, 800bc78 <__ieee754_atan2+0x180>)
 800bc32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc36:	f7f4 fa97 	bl	8000168 <__aeabi_dsub>
 800bc3a:	e77f      	b.n	800bb3c <__ieee754_atan2+0x44>
 800bc3c:	a50e      	add	r5, pc, #56	; (adr r5, 800bc78 <__ieee754_atan2+0x180>)
 800bc3e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc42:	e798      	b.n	800bb76 <__ieee754_atan2+0x7e>
 800bc44:	a510      	add	r5, pc, #64	; (adr r5, 800bc88 <__ieee754_atan2+0x190>)
 800bc46:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc4a:	e794      	b.n	800bb76 <__ieee754_atan2+0x7e>
 800bc4c:	2400      	movs	r4, #0
 800bc4e:	2500      	movs	r5, #0
 800bc50:	e791      	b.n	800bb76 <__ieee754_atan2+0x7e>
 800bc52:	a50b      	add	r5, pc, #44	; (adr r5, 800bc80 <__ieee754_atan2+0x188>)
 800bc54:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc58:	e78d      	b.n	800bb76 <__ieee754_atan2+0x7e>
 800bc5a:	bf00      	nop
 800bc5c:	f3af 8000 	nop.w
 800bc60:	54442d18 	.word	0x54442d18
 800bc64:	c00921fb 	.word	0xc00921fb
 800bc68:	54442d18 	.word	0x54442d18
 800bc6c:	bff921fb 	.word	0xbff921fb
 800bc70:	33145c07 	.word	0x33145c07
 800bc74:	3ca1a626 	.word	0x3ca1a626
 800bc78:	54442d18 	.word	0x54442d18
 800bc7c:	400921fb 	.word	0x400921fb
 800bc80:	54442d18 	.word	0x54442d18
 800bc84:	3ff921fb 	.word	0x3ff921fb
 800bc88:	54442d18 	.word	0x54442d18
 800bc8c:	3fe921fb 	.word	0x3fe921fb
 800bc90:	0800ea68 	.word	0x0800ea68
 800bc94:	0800ea80 	.word	0x0800ea80
 800bc98:	7ff00000 	.word	0x7ff00000
 800bc9c:	00000000 	.word	0x00000000

0800bca0 <__ieee754_rem_pio2>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	4614      	mov	r4, r2
 800bca6:	4ac4      	ldr	r2, [pc, #784]	; (800bfb8 <__ieee754_rem_pio2+0x318>)
 800bca8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bcac:	b08d      	sub	sp, #52	; 0x34
 800bcae:	4592      	cmp	sl, r2
 800bcb0:	9104      	str	r1, [sp, #16]
 800bcb2:	dc07      	bgt.n	800bcc4 <__ieee754_rem_pio2+0x24>
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e9c4 0100 	strd	r0, r1, [r4]
 800bcbc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bcc0:	2500      	movs	r5, #0
 800bcc2:	e024      	b.n	800bd0e <__ieee754_rem_pio2+0x6e>
 800bcc4:	4abd      	ldr	r2, [pc, #756]	; (800bfbc <__ieee754_rem_pio2+0x31c>)
 800bcc6:	4592      	cmp	sl, r2
 800bcc8:	dc72      	bgt.n	800bdb0 <__ieee754_rem_pio2+0x110>
 800bcca:	9b04      	ldr	r3, [sp, #16]
 800bccc:	4dbc      	ldr	r5, [pc, #752]	; (800bfc0 <__ieee754_rem_pio2+0x320>)
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	a3ab      	add	r3, pc, #684	; (adr r3, 800bf80 <__ieee754_rem_pio2+0x2e0>)
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	dd36      	ble.n	800bd46 <__ieee754_rem_pio2+0xa6>
 800bcd8:	f7f4 fa46 	bl	8000168 <__aeabi_dsub>
 800bcdc:	45aa      	cmp	sl, r5
 800bcde:	4606      	mov	r6, r0
 800bce0:	460f      	mov	r7, r1
 800bce2:	d018      	beq.n	800bd16 <__ieee754_rem_pio2+0x76>
 800bce4:	a3a8      	add	r3, pc, #672	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fa3d 	bl	8000168 <__aeabi_dsub>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	e9c4 2300 	strd	r2, r3, [r4]
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	f7f4 fa35 	bl	8000168 <__aeabi_dsub>
 800bcfe:	a3a2      	add	r3, pc, #648	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f7f4 fa30 	bl	8000168 <__aeabi_dsub>
 800bd08:	2501      	movs	r5, #1
 800bd0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd0e:	4628      	mov	r0, r5
 800bd10:	b00d      	add	sp, #52	; 0x34
 800bd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd16:	a39e      	add	r3, pc, #632	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2f0>)
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fa24 	bl	8000168 <__aeabi_dsub>
 800bd20:	a39d      	add	r3, pc, #628	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	4606      	mov	r6, r0
 800bd28:	460f      	mov	r7, r1
 800bd2a:	f7f4 fa1d 	bl	8000168 <__aeabi_dsub>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4630      	mov	r0, r6
 800bd34:	e9c4 2300 	strd	r2, r3, [r4]
 800bd38:	4639      	mov	r1, r7
 800bd3a:	f7f4 fa15 	bl	8000168 <__aeabi_dsub>
 800bd3e:	a396      	add	r3, pc, #600	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	e7de      	b.n	800bd04 <__ieee754_rem_pio2+0x64>
 800bd46:	f7f4 fa11 	bl	800016c <__adddf3>
 800bd4a:	45aa      	cmp	sl, r5
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	460f      	mov	r7, r1
 800bd50:	d016      	beq.n	800bd80 <__ieee754_rem_pio2+0xe0>
 800bd52:	a38d      	add	r3, pc, #564	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fa08 	bl	800016c <__adddf3>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4630      	mov	r0, r6
 800bd62:	e9c4 2300 	strd	r2, r3, [r4]
 800bd66:	4639      	mov	r1, r7
 800bd68:	f7f4 f9fe 	bl	8000168 <__aeabi_dsub>
 800bd6c:	a386      	add	r3, pc, #536	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	f7f4 f9fb 	bl	800016c <__adddf3>
 800bd76:	f04f 35ff 	mov.w	r5, #4294967295
 800bd7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd7e:	e7c6      	b.n	800bd0e <__ieee754_rem_pio2+0x6e>
 800bd80:	a383      	add	r3, pc, #524	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2f0>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 f9f1 	bl	800016c <__adddf3>
 800bd8a:	a383      	add	r3, pc, #524	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	4606      	mov	r6, r0
 800bd92:	460f      	mov	r7, r1
 800bd94:	f7f4 f9ea 	bl	800016c <__adddf3>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	e9c4 2300 	strd	r2, r3, [r4]
 800bda2:	4639      	mov	r1, r7
 800bda4:	f7f4 f9e0 	bl	8000168 <__aeabi_dsub>
 800bda8:	a37b      	add	r3, pc, #492	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	e7e0      	b.n	800bd72 <__ieee754_rem_pio2+0xd2>
 800bdb0:	4a84      	ldr	r2, [pc, #528]	; (800bfc4 <__ieee754_rem_pio2+0x324>)
 800bdb2:	4592      	cmp	sl, r2
 800bdb4:	f300 80d5 	bgt.w	800bf62 <__ieee754_rem_pio2+0x2c2>
 800bdb8:	f002 f824 	bl	800de04 <fabs>
 800bdbc:	a378      	add	r3, pc, #480	; (adr r3, 800bfa0 <__ieee754_rem_pio2+0x300>)
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	f7f4 fb87 	bl	80004d8 <__aeabi_dmul>
 800bdca:	2200      	movs	r2, #0
 800bdcc:	4b7e      	ldr	r3, [pc, #504]	; (800bfc8 <__ieee754_rem_pio2+0x328>)
 800bdce:	f7f4 f9cd 	bl	800016c <__adddf3>
 800bdd2:	f7f4 fe31 	bl	8000a38 <__aeabi_d2iz>
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	f7f4 fb14 	bl	8000404 <__aeabi_i2d>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bde4:	a366      	add	r3, pc, #408	; (adr r3, 800bf80 <__ieee754_rem_pio2+0x2e0>)
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	f7f4 fb75 	bl	80004d8 <__aeabi_dmul>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	f7f4 f9b7 	bl	8000168 <__aeabi_dsub>
 800bdfa:	a363      	add	r3, pc, #396	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	4680      	mov	r8, r0
 800be02:	4689      	mov	r9, r1
 800be04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be08:	f7f4 fb66 	bl	80004d8 <__aeabi_dmul>
 800be0c:	2d1f      	cmp	r5, #31
 800be0e:	4606      	mov	r6, r0
 800be10:	460f      	mov	r7, r1
 800be12:	dc0e      	bgt.n	800be32 <__ieee754_rem_pio2+0x192>
 800be14:	4b6d      	ldr	r3, [pc, #436]	; (800bfcc <__ieee754_rem_pio2+0x32c>)
 800be16:	1e6a      	subs	r2, r5, #1
 800be18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1c:	4553      	cmp	r3, sl
 800be1e:	d008      	beq.n	800be32 <__ieee754_rem_pio2+0x192>
 800be20:	4632      	mov	r2, r6
 800be22:	463b      	mov	r3, r7
 800be24:	4640      	mov	r0, r8
 800be26:	4649      	mov	r1, r9
 800be28:	f7f4 f99e 	bl	8000168 <__aeabi_dsub>
 800be2c:	e9c4 0100 	strd	r0, r1, [r4]
 800be30:	e013      	b.n	800be5a <__ieee754_rem_pio2+0x1ba>
 800be32:	463b      	mov	r3, r7
 800be34:	4632      	mov	r2, r6
 800be36:	4640      	mov	r0, r8
 800be38:	4649      	mov	r1, r9
 800be3a:	f7f4 f995 	bl	8000168 <__aeabi_dsub>
 800be3e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800be42:	9305      	str	r3, [sp, #20]
 800be44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be48:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800be4c:	f1ba 0f10 	cmp.w	sl, #16
 800be50:	dc1f      	bgt.n	800be92 <__ieee754_rem_pio2+0x1f2>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	e9c4 2300 	strd	r2, r3, [r4]
 800be5a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800be5e:	4640      	mov	r0, r8
 800be60:	4653      	mov	r3, sl
 800be62:	4649      	mov	r1, r9
 800be64:	f7f4 f980 	bl	8000168 <__aeabi_dsub>
 800be68:	4632      	mov	r2, r6
 800be6a:	463b      	mov	r3, r7
 800be6c:	f7f4 f97c 	bl	8000168 <__aeabi_dsub>
 800be70:	460b      	mov	r3, r1
 800be72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800be76:	9904      	ldr	r1, [sp, #16]
 800be78:	4602      	mov	r2, r0
 800be7a:	2900      	cmp	r1, #0
 800be7c:	f6bf af47 	bge.w	800bd0e <__ieee754_rem_pio2+0x6e>
 800be80:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800be84:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800be88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be8c:	60e3      	str	r3, [r4, #12]
 800be8e:	426d      	negs	r5, r5
 800be90:	e73d      	b.n	800bd0e <__ieee754_rem_pio2+0x6e>
 800be92:	a33f      	add	r3, pc, #252	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2f0>)
 800be94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be9c:	f7f4 fb1c 	bl	80004d8 <__aeabi_dmul>
 800bea0:	4606      	mov	r6, r0
 800bea2:	460f      	mov	r7, r1
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4640      	mov	r0, r8
 800beaa:	4649      	mov	r1, r9
 800beac:	f7f4 f95c 	bl	8000168 <__aeabi_dsub>
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	4682      	mov	sl, r0
 800beb6:	468b      	mov	fp, r1
 800beb8:	4640      	mov	r0, r8
 800beba:	4649      	mov	r1, r9
 800bebc:	f7f4 f954 	bl	8000168 <__aeabi_dsub>
 800bec0:	4632      	mov	r2, r6
 800bec2:	463b      	mov	r3, r7
 800bec4:	f7f4 f950 	bl	8000168 <__aeabi_dsub>
 800bec8:	a333      	add	r3, pc, #204	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bece:	4606      	mov	r6, r0
 800bed0:	460f      	mov	r7, r1
 800bed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bed6:	f7f4 faff 	bl	80004d8 <__aeabi_dmul>
 800beda:	4632      	mov	r2, r6
 800bedc:	463b      	mov	r3, r7
 800bede:	f7f4 f943 	bl	8000168 <__aeabi_dsub>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	4606      	mov	r6, r0
 800bee8:	460f      	mov	r7, r1
 800beea:	4650      	mov	r0, sl
 800beec:	4659      	mov	r1, fp
 800beee:	f7f4 f93b 	bl	8000168 <__aeabi_dsub>
 800bef2:	9a05      	ldr	r2, [sp, #20]
 800bef4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	2b31      	cmp	r3, #49	; 0x31
 800befc:	dc06      	bgt.n	800bf0c <__ieee754_rem_pio2+0x26c>
 800befe:	4602      	mov	r2, r0
 800bf00:	460b      	mov	r3, r1
 800bf02:	46d0      	mov	r8, sl
 800bf04:	46d9      	mov	r9, fp
 800bf06:	e9c4 2300 	strd	r2, r3, [r4]
 800bf0a:	e7a6      	b.n	800be5a <__ieee754_rem_pio2+0x1ba>
 800bf0c:	a326      	add	r3, pc, #152	; (adr r3, 800bfa8 <__ieee754_rem_pio2+0x308>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf16:	f7f4 fadf 	bl	80004d8 <__aeabi_dmul>
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	4650      	mov	r0, sl
 800bf24:	4659      	mov	r1, fp
 800bf26:	f7f4 f91f 	bl	8000168 <__aeabi_dsub>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4680      	mov	r8, r0
 800bf30:	4689      	mov	r9, r1
 800bf32:	4650      	mov	r0, sl
 800bf34:	4659      	mov	r1, fp
 800bf36:	f7f4 f917 	bl	8000168 <__aeabi_dsub>
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	463b      	mov	r3, r7
 800bf3e:	f7f4 f913 	bl	8000168 <__aeabi_dsub>
 800bf42:	a31b      	add	r3, pc, #108	; (adr r3, 800bfb0 <__ieee754_rem_pio2+0x310>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	4606      	mov	r6, r0
 800bf4a:	460f      	mov	r7, r1
 800bf4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf50:	f7f4 fac2 	bl	80004d8 <__aeabi_dmul>
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	f7f4 f906 	bl	8000168 <__aeabi_dsub>
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	460f      	mov	r7, r1
 800bf60:	e75e      	b.n	800be20 <__ieee754_rem_pio2+0x180>
 800bf62:	4a1b      	ldr	r2, [pc, #108]	; (800bfd0 <__ieee754_rem_pio2+0x330>)
 800bf64:	4592      	cmp	sl, r2
 800bf66:	dd35      	ble.n	800bfd4 <__ieee754_rem_pio2+0x334>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	f7f4 f8fc 	bl	8000168 <__aeabi_dsub>
 800bf70:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf74:	e9c4 0100 	strd	r0, r1, [r4]
 800bf78:	e6a2      	b.n	800bcc0 <__ieee754_rem_pio2+0x20>
 800bf7a:	bf00      	nop
 800bf7c:	f3af 8000 	nop.w
 800bf80:	54400000 	.word	0x54400000
 800bf84:	3ff921fb 	.word	0x3ff921fb
 800bf88:	1a626331 	.word	0x1a626331
 800bf8c:	3dd0b461 	.word	0x3dd0b461
 800bf90:	1a600000 	.word	0x1a600000
 800bf94:	3dd0b461 	.word	0x3dd0b461
 800bf98:	2e037073 	.word	0x2e037073
 800bf9c:	3ba3198a 	.word	0x3ba3198a
 800bfa0:	6dc9c883 	.word	0x6dc9c883
 800bfa4:	3fe45f30 	.word	0x3fe45f30
 800bfa8:	2e000000 	.word	0x2e000000
 800bfac:	3ba3198a 	.word	0x3ba3198a
 800bfb0:	252049c1 	.word	0x252049c1
 800bfb4:	397b839a 	.word	0x397b839a
 800bfb8:	3fe921fb 	.word	0x3fe921fb
 800bfbc:	4002d97b 	.word	0x4002d97b
 800bfc0:	3ff921fb 	.word	0x3ff921fb
 800bfc4:	413921fb 	.word	0x413921fb
 800bfc8:	3fe00000 	.word	0x3fe00000
 800bfcc:	0800ea98 	.word	0x0800ea98
 800bfd0:	7fefffff 	.word	0x7fefffff
 800bfd4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800bfd8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bfdc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800bfe0:	460f      	mov	r7, r1
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	f7f4 fd28 	bl	8000a38 <__aeabi_d2iz>
 800bfe8:	f7f4 fa0c 	bl	8000404 <__aeabi_i2d>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4630      	mov	r0, r6
 800bff2:	4639      	mov	r1, r7
 800bff4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bff8:	f7f4 f8b6 	bl	8000168 <__aeabi_dsub>
 800bffc:	2200      	movs	r2, #0
 800bffe:	4b1e      	ldr	r3, [pc, #120]	; (800c078 <__ieee754_rem_pio2+0x3d8>)
 800c000:	f7f4 fa6a 	bl	80004d8 <__aeabi_dmul>
 800c004:	460f      	mov	r7, r1
 800c006:	4606      	mov	r6, r0
 800c008:	f7f4 fd16 	bl	8000a38 <__aeabi_d2iz>
 800c00c:	f7f4 f9fa 	bl	8000404 <__aeabi_i2d>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4630      	mov	r0, r6
 800c016:	4639      	mov	r1, r7
 800c018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c01c:	f7f4 f8a4 	bl	8000168 <__aeabi_dsub>
 800c020:	2200      	movs	r2, #0
 800c022:	4b15      	ldr	r3, [pc, #84]	; (800c078 <__ieee754_rem_pio2+0x3d8>)
 800c024:	f7f4 fa58 	bl	80004d8 <__aeabi_dmul>
 800c028:	f04f 0803 	mov.w	r8, #3
 800c02c:	2600      	movs	r6, #0
 800c02e:	2700      	movs	r7, #0
 800c030:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c034:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c038:	4632      	mov	r2, r6
 800c03a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c03e:	463b      	mov	r3, r7
 800c040:	46c2      	mov	sl, r8
 800c042:	f108 38ff 	add.w	r8, r8, #4294967295
 800c046:	f7f4 fcaf 	bl	80009a8 <__aeabi_dcmpeq>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d1f4      	bne.n	800c038 <__ieee754_rem_pio2+0x398>
 800c04e:	4b0b      	ldr	r3, [pc, #44]	; (800c07c <__ieee754_rem_pio2+0x3dc>)
 800c050:	462a      	mov	r2, r5
 800c052:	9301      	str	r3, [sp, #4]
 800c054:	2302      	movs	r3, #2
 800c056:	4621      	mov	r1, r4
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	a806      	add	r0, sp, #24
 800c05c:	4653      	mov	r3, sl
 800c05e:	f000 fc6d 	bl	800c93c <__kernel_rem_pio2>
 800c062:	9b04      	ldr	r3, [sp, #16]
 800c064:	4605      	mov	r5, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	f6bf ae51 	bge.w	800bd0e <__ieee754_rem_pio2+0x6e>
 800c06c:	6863      	ldr	r3, [r4, #4]
 800c06e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c072:	6063      	str	r3, [r4, #4]
 800c074:	68e3      	ldr	r3, [r4, #12]
 800c076:	e707      	b.n	800be88 <__ieee754_rem_pio2+0x1e8>
 800c078:	41700000 	.word	0x41700000
 800c07c:	0800eb18 	.word	0x0800eb18

0800c080 <__ieee754_sqrt>:
 800c080:	f8df c150 	ldr.w	ip, [pc, #336]	; 800c1d4 <__ieee754_sqrt+0x154>
 800c084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c088:	ea3c 0c01 	bics.w	ip, ip, r1
 800c08c:	460b      	mov	r3, r1
 800c08e:	4606      	mov	r6, r0
 800c090:	460d      	mov	r5, r1
 800c092:	460a      	mov	r2, r1
 800c094:	4607      	mov	r7, r0
 800c096:	4604      	mov	r4, r0
 800c098:	d10e      	bne.n	800c0b8 <__ieee754_sqrt+0x38>
 800c09a:	4602      	mov	r2, r0
 800c09c:	f7f4 fa1c 	bl	80004d8 <__aeabi_dmul>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	4629      	mov	r1, r5
 800c0a8:	f7f4 f860 	bl	800016c <__adddf3>
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	460d      	mov	r5, r1
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	dc0d      	bgt.n	800c0d8 <__ieee754_sqrt+0x58>
 800c0bc:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c0c0:	ea5c 0707 	orrs.w	r7, ip, r7
 800c0c4:	d0f4      	beq.n	800c0b0 <__ieee754_sqrt+0x30>
 800c0c6:	b139      	cbz	r1, 800c0d8 <__ieee754_sqrt+0x58>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	f7f4 f84d 	bl	8000168 <__aeabi_dsub>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	f7f4 fb2b 	bl	800072c <__aeabi_ddiv>
 800c0d6:	e7e9      	b.n	800c0ac <__ieee754_sqrt+0x2c>
 800c0d8:	1512      	asrs	r2, r2, #20
 800c0da:	d074      	beq.n	800c1c6 <__ieee754_sqrt+0x146>
 800c0dc:	2000      	movs	r0, #0
 800c0de:	07d5      	lsls	r5, r2, #31
 800c0e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0e4:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800c0e8:	bf5e      	ittt	pl
 800c0ea:	0fe3      	lsrpl	r3, r4, #31
 800c0ec:	0064      	lslpl	r4, r4, #1
 800c0ee:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800c0f2:	0fe3      	lsrs	r3, r4, #31
 800c0f4:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c0f8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800c0fc:	2516      	movs	r5, #22
 800c0fe:	4601      	mov	r1, r0
 800c100:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c104:	1076      	asrs	r6, r6, #1
 800c106:	0064      	lsls	r4, r4, #1
 800c108:	188f      	adds	r7, r1, r2
 800c10a:	429f      	cmp	r7, r3
 800c10c:	bfde      	ittt	le
 800c10e:	1bdb      	suble	r3, r3, r7
 800c110:	18b9      	addle	r1, r7, r2
 800c112:	1880      	addle	r0, r0, r2
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	3d01      	subs	r5, #1
 800c118:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c11c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c120:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c124:	d1f0      	bne.n	800c108 <__ieee754_sqrt+0x88>
 800c126:	462a      	mov	r2, r5
 800c128:	f04f 0e20 	mov.w	lr, #32
 800c12c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800c130:	428b      	cmp	r3, r1
 800c132:	eb07 0c05 	add.w	ip, r7, r5
 800c136:	dc02      	bgt.n	800c13e <__ieee754_sqrt+0xbe>
 800c138:	d113      	bne.n	800c162 <__ieee754_sqrt+0xe2>
 800c13a:	45a4      	cmp	ip, r4
 800c13c:	d811      	bhi.n	800c162 <__ieee754_sqrt+0xe2>
 800c13e:	f1bc 0f00 	cmp.w	ip, #0
 800c142:	eb0c 0507 	add.w	r5, ip, r7
 800c146:	da43      	bge.n	800c1d0 <__ieee754_sqrt+0x150>
 800c148:	2d00      	cmp	r5, #0
 800c14a:	db41      	blt.n	800c1d0 <__ieee754_sqrt+0x150>
 800c14c:	f101 0801 	add.w	r8, r1, #1
 800c150:	1a5b      	subs	r3, r3, r1
 800c152:	4641      	mov	r1, r8
 800c154:	45a4      	cmp	ip, r4
 800c156:	bf88      	it	hi
 800c158:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c15c:	eba4 040c 	sub.w	r4, r4, ip
 800c160:	443a      	add	r2, r7
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	f1be 0e01 	subs.w	lr, lr, #1
 800c168:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c16c:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800c170:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c174:	d1dc      	bne.n	800c130 <__ieee754_sqrt+0xb0>
 800c176:	4323      	orrs	r3, r4
 800c178:	d006      	beq.n	800c188 <__ieee754_sqrt+0x108>
 800c17a:	1c54      	adds	r4, r2, #1
 800c17c:	bf0b      	itete	eq
 800c17e:	4672      	moveq	r2, lr
 800c180:	3201      	addne	r2, #1
 800c182:	3001      	addeq	r0, #1
 800c184:	f022 0201 	bicne.w	r2, r2, #1
 800c188:	1043      	asrs	r3, r0, #1
 800c18a:	07c1      	lsls	r1, r0, #31
 800c18c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c190:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c194:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c198:	bf48      	it	mi
 800c19a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c19e:	4610      	mov	r0, r2
 800c1a0:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800c1a4:	e782      	b.n	800c0ac <__ieee754_sqrt+0x2c>
 800c1a6:	0ae3      	lsrs	r3, r4, #11
 800c1a8:	3915      	subs	r1, #21
 800c1aa:	0564      	lsls	r4, r4, #21
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d0fa      	beq.n	800c1a6 <__ieee754_sqrt+0x126>
 800c1b0:	02de      	lsls	r6, r3, #11
 800c1b2:	d50a      	bpl.n	800c1ca <__ieee754_sqrt+0x14a>
 800c1b4:	f1c2 0020 	rsb	r0, r2, #32
 800c1b8:	fa24 f000 	lsr.w	r0, r4, r0
 800c1bc:	1e55      	subs	r5, r2, #1
 800c1be:	4094      	lsls	r4, r2
 800c1c0:	4303      	orrs	r3, r0
 800c1c2:	1b4a      	subs	r2, r1, r5
 800c1c4:	e78a      	b.n	800c0dc <__ieee754_sqrt+0x5c>
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	e7f0      	b.n	800c1ac <__ieee754_sqrt+0x12c>
 800c1ca:	005b      	lsls	r3, r3, #1
 800c1cc:	3201      	adds	r2, #1
 800c1ce:	e7ef      	b.n	800c1b0 <__ieee754_sqrt+0x130>
 800c1d0:	4688      	mov	r8, r1
 800c1d2:	e7bd      	b.n	800c150 <__ieee754_sqrt+0xd0>
 800c1d4:	7ff00000 	.word	0x7ff00000

0800c1d8 <__ieee754_asinf>:
 800c1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1dc:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800c1e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	d10c      	bne.n	800c204 <__ieee754_asinf+0x2c>
 800c1ea:	498d      	ldr	r1, [pc, #564]	; (800c420 <__ieee754_asinf+0x248>)
 800c1ec:	f7f4 fdca 	bl	8000d84 <__aeabi_fmul>
 800c1f0:	498c      	ldr	r1, [pc, #560]	; (800c424 <__ieee754_asinf+0x24c>)
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f7f4 fdc5 	bl	8000d84 <__aeabi_fmul>
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	f7f4 fcb9 	bl	8000b74 <__addsf3>
 800c202:	e006      	b.n	800c212 <__ieee754_asinf+0x3a>
 800c204:	dd07      	ble.n	800c216 <__ieee754_asinf+0x3e>
 800c206:	4601      	mov	r1, r0
 800c208:	f7f4 fcb2 	bl	8000b70 <__aeabi_fsub>
 800c20c:	4601      	mov	r1, r0
 800c20e:	f7f4 fe6d 	bl	8000eec <__aeabi_fdiv>
 800c212:	4604      	mov	r4, r0
 800c214:	e00e      	b.n	800c234 <__ieee754_asinf+0x5c>
 800c216:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800c21a:	da58      	bge.n	800c2ce <__ieee754_asinf+0xf6>
 800c21c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800c220:	da0b      	bge.n	800c23a <__ieee754_asinf+0x62>
 800c222:	4981      	ldr	r1, [pc, #516]	; (800c428 <__ieee754_asinf+0x250>)
 800c224:	f7f4 fca6 	bl	8000b74 <__addsf3>
 800c228:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c22c:	f7f4 ff66 	bl	80010fc <__aeabi_fcmpgt>
 800c230:	2800      	cmp	r0, #0
 800c232:	d04c      	beq.n	800c2ce <__ieee754_asinf+0xf6>
 800c234:	4620      	mov	r0, r4
 800c236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c23a:	4601      	mov	r1, r0
 800c23c:	f7f4 fda2 	bl	8000d84 <__aeabi_fmul>
 800c240:	4605      	mov	r5, r0
 800c242:	497a      	ldr	r1, [pc, #488]	; (800c42c <__ieee754_asinf+0x254>)
 800c244:	f7f4 fd9e 	bl	8000d84 <__aeabi_fmul>
 800c248:	4979      	ldr	r1, [pc, #484]	; (800c430 <__ieee754_asinf+0x258>)
 800c24a:	f7f4 fc93 	bl	8000b74 <__addsf3>
 800c24e:	4629      	mov	r1, r5
 800c250:	f7f4 fd98 	bl	8000d84 <__aeabi_fmul>
 800c254:	4977      	ldr	r1, [pc, #476]	; (800c434 <__ieee754_asinf+0x25c>)
 800c256:	f7f4 fc8b 	bl	8000b70 <__aeabi_fsub>
 800c25a:	4629      	mov	r1, r5
 800c25c:	f7f4 fd92 	bl	8000d84 <__aeabi_fmul>
 800c260:	4975      	ldr	r1, [pc, #468]	; (800c438 <__ieee754_asinf+0x260>)
 800c262:	f7f4 fc87 	bl	8000b74 <__addsf3>
 800c266:	4629      	mov	r1, r5
 800c268:	f7f4 fd8c 	bl	8000d84 <__aeabi_fmul>
 800c26c:	4973      	ldr	r1, [pc, #460]	; (800c43c <__ieee754_asinf+0x264>)
 800c26e:	f7f4 fc7f 	bl	8000b70 <__aeabi_fsub>
 800c272:	4629      	mov	r1, r5
 800c274:	f7f4 fd86 	bl	8000d84 <__aeabi_fmul>
 800c278:	4971      	ldr	r1, [pc, #452]	; (800c440 <__ieee754_asinf+0x268>)
 800c27a:	f7f4 fc7b 	bl	8000b74 <__addsf3>
 800c27e:	4629      	mov	r1, r5
 800c280:	f7f4 fd80 	bl	8000d84 <__aeabi_fmul>
 800c284:	496f      	ldr	r1, [pc, #444]	; (800c444 <__ieee754_asinf+0x26c>)
 800c286:	4606      	mov	r6, r0
 800c288:	4628      	mov	r0, r5
 800c28a:	f7f4 fd7b 	bl	8000d84 <__aeabi_fmul>
 800c28e:	496e      	ldr	r1, [pc, #440]	; (800c448 <__ieee754_asinf+0x270>)
 800c290:	f7f4 fc6e 	bl	8000b70 <__aeabi_fsub>
 800c294:	4629      	mov	r1, r5
 800c296:	f7f4 fd75 	bl	8000d84 <__aeabi_fmul>
 800c29a:	496c      	ldr	r1, [pc, #432]	; (800c44c <__ieee754_asinf+0x274>)
 800c29c:	f7f4 fc6a 	bl	8000b74 <__addsf3>
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	f7f4 fd6f 	bl	8000d84 <__aeabi_fmul>
 800c2a6:	496a      	ldr	r1, [pc, #424]	; (800c450 <__ieee754_asinf+0x278>)
 800c2a8:	f7f4 fc62 	bl	8000b70 <__aeabi_fsub>
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	f7f4 fd69 	bl	8000d84 <__aeabi_fmul>
 800c2b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c2b6:	f7f4 fc5d 	bl	8000b74 <__addsf3>
 800c2ba:	4601      	mov	r1, r0
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f7f4 fe15 	bl	8000eec <__aeabi_fdiv>
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	f7f4 fd5e 	bl	8000d84 <__aeabi_fmul>
 800c2c8:	4601      	mov	r1, r0
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	e797      	b.n	800c1fe <__ieee754_asinf+0x26>
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f7ff fb40 	bl	800b954 <fabsf>
 800c2d4:	4601      	mov	r1, r0
 800c2d6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c2da:	f7f4 fc49 	bl	8000b70 <__aeabi_fsub>
 800c2de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c2e2:	f7f4 fd4f 	bl	8000d84 <__aeabi_fmul>
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	4950      	ldr	r1, [pc, #320]	; (800c42c <__ieee754_asinf+0x254>)
 800c2ea:	f7f4 fd4b 	bl	8000d84 <__aeabi_fmul>
 800c2ee:	4950      	ldr	r1, [pc, #320]	; (800c430 <__ieee754_asinf+0x258>)
 800c2f0:	f7f4 fc40 	bl	8000b74 <__addsf3>
 800c2f4:	4631      	mov	r1, r6
 800c2f6:	f7f4 fd45 	bl	8000d84 <__aeabi_fmul>
 800c2fa:	494e      	ldr	r1, [pc, #312]	; (800c434 <__ieee754_asinf+0x25c>)
 800c2fc:	f7f4 fc38 	bl	8000b70 <__aeabi_fsub>
 800c300:	4631      	mov	r1, r6
 800c302:	f7f4 fd3f 	bl	8000d84 <__aeabi_fmul>
 800c306:	494c      	ldr	r1, [pc, #304]	; (800c438 <__ieee754_asinf+0x260>)
 800c308:	f7f4 fc34 	bl	8000b74 <__addsf3>
 800c30c:	4631      	mov	r1, r6
 800c30e:	f7f4 fd39 	bl	8000d84 <__aeabi_fmul>
 800c312:	494a      	ldr	r1, [pc, #296]	; (800c43c <__ieee754_asinf+0x264>)
 800c314:	f7f4 fc2c 	bl	8000b70 <__aeabi_fsub>
 800c318:	4631      	mov	r1, r6
 800c31a:	f7f4 fd33 	bl	8000d84 <__aeabi_fmul>
 800c31e:	4948      	ldr	r1, [pc, #288]	; (800c440 <__ieee754_asinf+0x268>)
 800c320:	f7f4 fc28 	bl	8000b74 <__addsf3>
 800c324:	4631      	mov	r1, r6
 800c326:	f7f4 fd2d 	bl	8000d84 <__aeabi_fmul>
 800c32a:	4946      	ldr	r1, [pc, #280]	; (800c444 <__ieee754_asinf+0x26c>)
 800c32c:	4681      	mov	r9, r0
 800c32e:	4630      	mov	r0, r6
 800c330:	f7f4 fd28 	bl	8000d84 <__aeabi_fmul>
 800c334:	4944      	ldr	r1, [pc, #272]	; (800c448 <__ieee754_asinf+0x270>)
 800c336:	f7f4 fc1b 	bl	8000b70 <__aeabi_fsub>
 800c33a:	4631      	mov	r1, r6
 800c33c:	f7f4 fd22 	bl	8000d84 <__aeabi_fmul>
 800c340:	4942      	ldr	r1, [pc, #264]	; (800c44c <__ieee754_asinf+0x274>)
 800c342:	f7f4 fc17 	bl	8000b74 <__addsf3>
 800c346:	4631      	mov	r1, r6
 800c348:	f7f4 fd1c 	bl	8000d84 <__aeabi_fmul>
 800c34c:	4940      	ldr	r1, [pc, #256]	; (800c450 <__ieee754_asinf+0x278>)
 800c34e:	f7f4 fc0f 	bl	8000b70 <__aeabi_fsub>
 800c352:	4631      	mov	r1, r6
 800c354:	f7f4 fd16 	bl	8000d84 <__aeabi_fmul>
 800c358:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c35c:	f7f4 fc0a 	bl	8000b74 <__addsf3>
 800c360:	4682      	mov	sl, r0
 800c362:	4630      	mov	r0, r6
 800c364:	f000 f9da 	bl	800c71c <__ieee754_sqrtf>
 800c368:	4b3a      	ldr	r3, [pc, #232]	; (800c454 <__ieee754_asinf+0x27c>)
 800c36a:	4607      	mov	r7, r0
 800c36c:	4598      	cmp	r8, r3
 800c36e:	dd1a      	ble.n	800c3a6 <__ieee754_asinf+0x1ce>
 800c370:	4651      	mov	r1, sl
 800c372:	4648      	mov	r0, r9
 800c374:	f7f4 fdba 	bl	8000eec <__aeabi_fdiv>
 800c378:	4639      	mov	r1, r7
 800c37a:	f7f4 fd03 	bl	8000d84 <__aeabi_fmul>
 800c37e:	4639      	mov	r1, r7
 800c380:	f7f4 fbf8 	bl	8000b74 <__addsf3>
 800c384:	4601      	mov	r1, r0
 800c386:	f7f4 fbf5 	bl	8000b74 <__addsf3>
 800c38a:	4933      	ldr	r1, [pc, #204]	; (800c458 <__ieee754_asinf+0x280>)
 800c38c:	f7f4 fbf2 	bl	8000b74 <__addsf3>
 800c390:	4601      	mov	r1, r0
 800c392:	4823      	ldr	r0, [pc, #140]	; (800c420 <__ieee754_asinf+0x248>)
 800c394:	f7f4 fbec 	bl	8000b70 <__aeabi_fsub>
 800c398:	2d00      	cmp	r5, #0
 800c39a:	4604      	mov	r4, r0
 800c39c:	f73f af4a 	bgt.w	800c234 <__ieee754_asinf+0x5c>
 800c3a0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c3a4:	e735      	b.n	800c212 <__ieee754_asinf+0x3a>
 800c3a6:	4601      	mov	r1, r0
 800c3a8:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800c3ac:	f7f4 fbe2 	bl	8000b74 <__addsf3>
 800c3b0:	4651      	mov	r1, sl
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	4648      	mov	r0, r9
 800c3b6:	f7f4 fd99 	bl	8000eec <__aeabi_fdiv>
 800c3ba:	4601      	mov	r1, r0
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f7f4 fce1 	bl	8000d84 <__aeabi_fmul>
 800c3c2:	f028 080f 	bic.w	r8, r8, #15
 800c3c6:	4681      	mov	r9, r0
 800c3c8:	4641      	mov	r1, r8
 800c3ca:	4640      	mov	r0, r8
 800c3cc:	f7f4 fcda 	bl	8000d84 <__aeabi_fmul>
 800c3d0:	4601      	mov	r1, r0
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f7f4 fbcc 	bl	8000b70 <__aeabi_fsub>
 800c3d8:	4641      	mov	r1, r8
 800c3da:	4604      	mov	r4, r0
 800c3dc:	4638      	mov	r0, r7
 800c3de:	f7f4 fbc9 	bl	8000b74 <__addsf3>
 800c3e2:	4601      	mov	r1, r0
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f7f4 fd81 	bl	8000eec <__aeabi_fdiv>
 800c3ea:	4601      	mov	r1, r0
 800c3ec:	f7f4 fbc2 	bl	8000b74 <__addsf3>
 800c3f0:	4601      	mov	r1, r0
 800c3f2:	480c      	ldr	r0, [pc, #48]	; (800c424 <__ieee754_asinf+0x24c>)
 800c3f4:	f7f4 fbbc 	bl	8000b70 <__aeabi_fsub>
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	4648      	mov	r0, r9
 800c3fc:	f7f4 fbb8 	bl	8000b70 <__aeabi_fsub>
 800c400:	4641      	mov	r1, r8
 800c402:	4604      	mov	r4, r0
 800c404:	4640      	mov	r0, r8
 800c406:	f7f4 fbb5 	bl	8000b74 <__addsf3>
 800c40a:	4601      	mov	r1, r0
 800c40c:	4813      	ldr	r0, [pc, #76]	; (800c45c <__ieee754_asinf+0x284>)
 800c40e:	f7f4 fbaf 	bl	8000b70 <__aeabi_fsub>
 800c412:	4601      	mov	r1, r0
 800c414:	4620      	mov	r0, r4
 800c416:	f7f4 fbab 	bl	8000b70 <__aeabi_fsub>
 800c41a:	4601      	mov	r1, r0
 800c41c:	480f      	ldr	r0, [pc, #60]	; (800c45c <__ieee754_asinf+0x284>)
 800c41e:	e7b9      	b.n	800c394 <__ieee754_asinf+0x1bc>
 800c420:	3fc90fdb 	.word	0x3fc90fdb
 800c424:	b33bbd2e 	.word	0xb33bbd2e
 800c428:	7149f2ca 	.word	0x7149f2ca
 800c42c:	3811ef08 	.word	0x3811ef08
 800c430:	3a4f7f04 	.word	0x3a4f7f04
 800c434:	3d241146 	.word	0x3d241146
 800c438:	3e4e0aa8 	.word	0x3e4e0aa8
 800c43c:	3ea6b090 	.word	0x3ea6b090
 800c440:	3e2aaaab 	.word	0x3e2aaaab
 800c444:	3d9dc62e 	.word	0x3d9dc62e
 800c448:	3f303361 	.word	0x3f303361
 800c44c:	4001572d 	.word	0x4001572d
 800c450:	4019d139 	.word	0x4019d139
 800c454:	3f799999 	.word	0x3f799999
 800c458:	333bbd2e 	.word	0x333bbd2e
 800c45c:	3f490fdb 	.word	0x3f490fdb

0800c460 <__ieee754_rem_pio2f>:
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	4aa0      	ldr	r2, [pc, #640]	; (800c6e8 <__ieee754_rem_pio2f+0x288>)
 800c466:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800c46a:	4296      	cmp	r6, r2
 800c46c:	460c      	mov	r4, r1
 800c46e:	4682      	mov	sl, r0
 800c470:	b087      	sub	sp, #28
 800c472:	dc04      	bgt.n	800c47e <__ieee754_rem_pio2f+0x1e>
 800c474:	2300      	movs	r3, #0
 800c476:	6008      	str	r0, [r1, #0]
 800c478:	604b      	str	r3, [r1, #4]
 800c47a:	2500      	movs	r5, #0
 800c47c:	e01a      	b.n	800c4b4 <__ieee754_rem_pio2f+0x54>
 800c47e:	4a9b      	ldr	r2, [pc, #620]	; (800c6ec <__ieee754_rem_pio2f+0x28c>)
 800c480:	4296      	cmp	r6, r2
 800c482:	dc4b      	bgt.n	800c51c <__ieee754_rem_pio2f+0xbc>
 800c484:	2800      	cmp	r0, #0
 800c486:	499a      	ldr	r1, [pc, #616]	; (800c6f0 <__ieee754_rem_pio2f+0x290>)
 800c488:	4f9a      	ldr	r7, [pc, #616]	; (800c6f4 <__ieee754_rem_pio2f+0x294>)
 800c48a:	f026 060f 	bic.w	r6, r6, #15
 800c48e:	dd23      	ble.n	800c4d8 <__ieee754_rem_pio2f+0x78>
 800c490:	f7f4 fb6e 	bl	8000b70 <__aeabi_fsub>
 800c494:	42be      	cmp	r6, r7
 800c496:	4605      	mov	r5, r0
 800c498:	d010      	beq.n	800c4bc <__ieee754_rem_pio2f+0x5c>
 800c49a:	4997      	ldr	r1, [pc, #604]	; (800c6f8 <__ieee754_rem_pio2f+0x298>)
 800c49c:	f7f4 fb68 	bl	8000b70 <__aeabi_fsub>
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	6020      	str	r0, [r4, #0]
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f7f4 fb63 	bl	8000b70 <__aeabi_fsub>
 800c4aa:	4993      	ldr	r1, [pc, #588]	; (800c6f8 <__ieee754_rem_pio2f+0x298>)
 800c4ac:	f7f4 fb60 	bl	8000b70 <__aeabi_fsub>
 800c4b0:	2501      	movs	r5, #1
 800c4b2:	6060      	str	r0, [r4, #4]
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	b007      	add	sp, #28
 800c4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4bc:	498f      	ldr	r1, [pc, #572]	; (800c6fc <__ieee754_rem_pio2f+0x29c>)
 800c4be:	f7f4 fb57 	bl	8000b70 <__aeabi_fsub>
 800c4c2:	498f      	ldr	r1, [pc, #572]	; (800c700 <__ieee754_rem_pio2f+0x2a0>)
 800c4c4:	4605      	mov	r5, r0
 800c4c6:	f7f4 fb53 	bl	8000b70 <__aeabi_fsub>
 800c4ca:	4601      	mov	r1, r0
 800c4cc:	6020      	str	r0, [r4, #0]
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7f4 fb4e 	bl	8000b70 <__aeabi_fsub>
 800c4d4:	498a      	ldr	r1, [pc, #552]	; (800c700 <__ieee754_rem_pio2f+0x2a0>)
 800c4d6:	e7e9      	b.n	800c4ac <__ieee754_rem_pio2f+0x4c>
 800c4d8:	f7f4 fb4c 	bl	8000b74 <__addsf3>
 800c4dc:	42be      	cmp	r6, r7
 800c4de:	4605      	mov	r5, r0
 800c4e0:	d00e      	beq.n	800c500 <__ieee754_rem_pio2f+0xa0>
 800c4e2:	4985      	ldr	r1, [pc, #532]	; (800c6f8 <__ieee754_rem_pio2f+0x298>)
 800c4e4:	f7f4 fb46 	bl	8000b74 <__addsf3>
 800c4e8:	4601      	mov	r1, r0
 800c4ea:	6020      	str	r0, [r4, #0]
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	f7f4 fb3f 	bl	8000b70 <__aeabi_fsub>
 800c4f2:	4981      	ldr	r1, [pc, #516]	; (800c6f8 <__ieee754_rem_pio2f+0x298>)
 800c4f4:	f7f4 fb3e 	bl	8000b74 <__addsf3>
 800c4f8:	f04f 35ff 	mov.w	r5, #4294967295
 800c4fc:	6060      	str	r0, [r4, #4]
 800c4fe:	e7d9      	b.n	800c4b4 <__ieee754_rem_pio2f+0x54>
 800c500:	497e      	ldr	r1, [pc, #504]	; (800c6fc <__ieee754_rem_pio2f+0x29c>)
 800c502:	f7f4 fb37 	bl	8000b74 <__addsf3>
 800c506:	497e      	ldr	r1, [pc, #504]	; (800c700 <__ieee754_rem_pio2f+0x2a0>)
 800c508:	4605      	mov	r5, r0
 800c50a:	f7f4 fb33 	bl	8000b74 <__addsf3>
 800c50e:	4601      	mov	r1, r0
 800c510:	6020      	str	r0, [r4, #0]
 800c512:	4628      	mov	r0, r5
 800c514:	f7f4 fb2c 	bl	8000b70 <__aeabi_fsub>
 800c518:	4979      	ldr	r1, [pc, #484]	; (800c700 <__ieee754_rem_pio2f+0x2a0>)
 800c51a:	e7eb      	b.n	800c4f4 <__ieee754_rem_pio2f+0x94>
 800c51c:	4a79      	ldr	r2, [pc, #484]	; (800c704 <__ieee754_rem_pio2f+0x2a4>)
 800c51e:	4296      	cmp	r6, r2
 800c520:	f300 8091 	bgt.w	800c646 <__ieee754_rem_pio2f+0x1e6>
 800c524:	f7ff fa16 	bl	800b954 <fabsf>
 800c528:	4977      	ldr	r1, [pc, #476]	; (800c708 <__ieee754_rem_pio2f+0x2a8>)
 800c52a:	4607      	mov	r7, r0
 800c52c:	f7f4 fc2a 	bl	8000d84 <__aeabi_fmul>
 800c530:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c534:	f7f4 fb1e 	bl	8000b74 <__addsf3>
 800c538:	f7f4 fe00 	bl	800113c <__aeabi_f2iz>
 800c53c:	4605      	mov	r5, r0
 800c53e:	f7f4 fbcd 	bl	8000cdc <__aeabi_i2f>
 800c542:	496b      	ldr	r1, [pc, #428]	; (800c6f0 <__ieee754_rem_pio2f+0x290>)
 800c544:	4681      	mov	r9, r0
 800c546:	f7f4 fc1d 	bl	8000d84 <__aeabi_fmul>
 800c54a:	4601      	mov	r1, r0
 800c54c:	4638      	mov	r0, r7
 800c54e:	f7f4 fb0f 	bl	8000b70 <__aeabi_fsub>
 800c552:	4969      	ldr	r1, [pc, #420]	; (800c6f8 <__ieee754_rem_pio2f+0x298>)
 800c554:	4680      	mov	r8, r0
 800c556:	4648      	mov	r0, r9
 800c558:	f7f4 fc14 	bl	8000d84 <__aeabi_fmul>
 800c55c:	2d1f      	cmp	r5, #31
 800c55e:	4607      	mov	r7, r0
 800c560:	dc0c      	bgt.n	800c57c <__ieee754_rem_pio2f+0x11c>
 800c562:	4a6a      	ldr	r2, [pc, #424]	; (800c70c <__ieee754_rem_pio2f+0x2ac>)
 800c564:	1e69      	subs	r1, r5, #1
 800c566:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c56a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800c56e:	4293      	cmp	r3, r2
 800c570:	d004      	beq.n	800c57c <__ieee754_rem_pio2f+0x11c>
 800c572:	4639      	mov	r1, r7
 800c574:	4640      	mov	r0, r8
 800c576:	f7f4 fafb 	bl	8000b70 <__aeabi_fsub>
 800c57a:	e00b      	b.n	800c594 <__ieee754_rem_pio2f+0x134>
 800c57c:	4639      	mov	r1, r7
 800c57e:	4640      	mov	r0, r8
 800c580:	f7f4 faf6 	bl	8000b70 <__aeabi_fsub>
 800c584:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c588:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800c58c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800c590:	2e08      	cmp	r6, #8
 800c592:	dc01      	bgt.n	800c598 <__ieee754_rem_pio2f+0x138>
 800c594:	6020      	str	r0, [r4, #0]
 800c596:	e026      	b.n	800c5e6 <__ieee754_rem_pio2f+0x186>
 800c598:	4958      	ldr	r1, [pc, #352]	; (800c6fc <__ieee754_rem_pio2f+0x29c>)
 800c59a:	4648      	mov	r0, r9
 800c59c:	f7f4 fbf2 	bl	8000d84 <__aeabi_fmul>
 800c5a0:	4607      	mov	r7, r0
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	f7f4 fae3 	bl	8000b70 <__aeabi_fsub>
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	4640      	mov	r0, r8
 800c5b0:	f7f4 fade 	bl	8000b70 <__aeabi_fsub>
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	f7f4 fadb 	bl	8000b70 <__aeabi_fsub>
 800c5ba:	4607      	mov	r7, r0
 800c5bc:	4950      	ldr	r1, [pc, #320]	; (800c700 <__ieee754_rem_pio2f+0x2a0>)
 800c5be:	4648      	mov	r0, r9
 800c5c0:	f7f4 fbe0 	bl	8000d84 <__aeabi_fmul>
 800c5c4:	4639      	mov	r1, r7
 800c5c6:	f7f4 fad3 	bl	8000b70 <__aeabi_fsub>
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	4607      	mov	r7, r0
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f7f4 face 	bl	8000b70 <__aeabi_fsub>
 800c5d4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c5d8:	ebab 0b03 	sub.w	fp, fp, r3
 800c5dc:	f1bb 0f19 	cmp.w	fp, #25
 800c5e0:	dc16      	bgt.n	800c610 <__ieee754_rem_pio2f+0x1b0>
 800c5e2:	46b0      	mov	r8, r6
 800c5e4:	6020      	str	r0, [r4, #0]
 800c5e6:	6826      	ldr	r6, [r4, #0]
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	f7f4 fac0 	bl	8000b70 <__aeabi_fsub>
 800c5f0:	4639      	mov	r1, r7
 800c5f2:	f7f4 fabd 	bl	8000b70 <__aeabi_fsub>
 800c5f6:	f1ba 0f00 	cmp.w	sl, #0
 800c5fa:	6060      	str	r0, [r4, #4]
 800c5fc:	f6bf af5a 	bge.w	800c4b4 <__ieee754_rem_pio2f+0x54>
 800c600:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c604:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c608:	6026      	str	r6, [r4, #0]
 800c60a:	6060      	str	r0, [r4, #4]
 800c60c:	426d      	negs	r5, r5
 800c60e:	e751      	b.n	800c4b4 <__ieee754_rem_pio2f+0x54>
 800c610:	493f      	ldr	r1, [pc, #252]	; (800c710 <__ieee754_rem_pio2f+0x2b0>)
 800c612:	4648      	mov	r0, r9
 800c614:	f7f4 fbb6 	bl	8000d84 <__aeabi_fmul>
 800c618:	4607      	mov	r7, r0
 800c61a:	4601      	mov	r1, r0
 800c61c:	4630      	mov	r0, r6
 800c61e:	f7f4 faa7 	bl	8000b70 <__aeabi_fsub>
 800c622:	4601      	mov	r1, r0
 800c624:	4680      	mov	r8, r0
 800c626:	4630      	mov	r0, r6
 800c628:	f7f4 faa2 	bl	8000b70 <__aeabi_fsub>
 800c62c:	4639      	mov	r1, r7
 800c62e:	f7f4 fa9f 	bl	8000b70 <__aeabi_fsub>
 800c632:	4606      	mov	r6, r0
 800c634:	4937      	ldr	r1, [pc, #220]	; (800c714 <__ieee754_rem_pio2f+0x2b4>)
 800c636:	4648      	mov	r0, r9
 800c638:	f7f4 fba4 	bl	8000d84 <__aeabi_fmul>
 800c63c:	4631      	mov	r1, r6
 800c63e:	f7f4 fa97 	bl	8000b70 <__aeabi_fsub>
 800c642:	4607      	mov	r7, r0
 800c644:	e795      	b.n	800c572 <__ieee754_rem_pio2f+0x112>
 800c646:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c64a:	db05      	blt.n	800c658 <__ieee754_rem_pio2f+0x1f8>
 800c64c:	4601      	mov	r1, r0
 800c64e:	f7f4 fa8f 	bl	8000b70 <__aeabi_fsub>
 800c652:	6060      	str	r0, [r4, #4]
 800c654:	6020      	str	r0, [r4, #0]
 800c656:	e710      	b.n	800c47a <__ieee754_rem_pio2f+0x1a>
 800c658:	15f7      	asrs	r7, r6, #23
 800c65a:	3f86      	subs	r7, #134	; 0x86
 800c65c:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800c660:	4630      	mov	r0, r6
 800c662:	f7f4 fd6b 	bl	800113c <__aeabi_f2iz>
 800c666:	f7f4 fb39 	bl	8000cdc <__aeabi_i2f>
 800c66a:	4601      	mov	r1, r0
 800c66c:	9003      	str	r0, [sp, #12]
 800c66e:	4630      	mov	r0, r6
 800c670:	f7f4 fa7e 	bl	8000b70 <__aeabi_fsub>
 800c674:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c678:	f7f4 fb84 	bl	8000d84 <__aeabi_fmul>
 800c67c:	4606      	mov	r6, r0
 800c67e:	f7f4 fd5d 	bl	800113c <__aeabi_f2iz>
 800c682:	f7f4 fb2b 	bl	8000cdc <__aeabi_i2f>
 800c686:	4601      	mov	r1, r0
 800c688:	9004      	str	r0, [sp, #16]
 800c68a:	4605      	mov	r5, r0
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7f4 fa6f 	bl	8000b70 <__aeabi_fsub>
 800c692:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c696:	f7f4 fb75 	bl	8000d84 <__aeabi_fmul>
 800c69a:	2100      	movs	r1, #0
 800c69c:	9005      	str	r0, [sp, #20]
 800c69e:	f7f4 fd05 	bl	80010ac <__aeabi_fcmpeq>
 800c6a2:	b1f0      	cbz	r0, 800c6e2 <__ieee754_rem_pio2f+0x282>
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	f7f4 fd00 	bl	80010ac <__aeabi_fcmpeq>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	bf14      	ite	ne
 800c6b0:	2301      	movne	r3, #1
 800c6b2:	2302      	moveq	r3, #2
 800c6b4:	4a18      	ldr	r2, [pc, #96]	; (800c718 <__ieee754_rem_pio2f+0x2b8>)
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	9201      	str	r2, [sp, #4]
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	a803      	add	r0, sp, #12
 800c6be:	9200      	str	r2, [sp, #0]
 800c6c0:	463a      	mov	r2, r7
 800c6c2:	f000 fdbb 	bl	800d23c <__kernel_rem_pio2f>
 800c6c6:	f1ba 0f00 	cmp.w	sl, #0
 800c6ca:	4605      	mov	r5, r0
 800c6cc:	f6bf aef2 	bge.w	800c4b4 <__ieee754_rem_pio2f+0x54>
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c6d6:	6023      	str	r3, [r4, #0]
 800c6d8:	6863      	ldr	r3, [r4, #4]
 800c6da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c6de:	6063      	str	r3, [r4, #4]
 800c6e0:	e794      	b.n	800c60c <__ieee754_rem_pio2f+0x1ac>
 800c6e2:	2303      	movs	r3, #3
 800c6e4:	e7e6      	b.n	800c6b4 <__ieee754_rem_pio2f+0x254>
 800c6e6:	bf00      	nop
 800c6e8:	3f490fd8 	.word	0x3f490fd8
 800c6ec:	4016cbe3 	.word	0x4016cbe3
 800c6f0:	3fc90f80 	.word	0x3fc90f80
 800c6f4:	3fc90fd0 	.word	0x3fc90fd0
 800c6f8:	37354443 	.word	0x37354443
 800c6fc:	37354400 	.word	0x37354400
 800c700:	2e85a308 	.word	0x2e85a308
 800c704:	43490f80 	.word	0x43490f80
 800c708:	3f22f984 	.word	0x3f22f984
 800c70c:	0800ec20 	.word	0x0800ec20
 800c710:	2e85a300 	.word	0x2e85a300
 800c714:	248d3132 	.word	0x248d3132
 800c718:	0800eca0 	.word	0x0800eca0

0800c71c <__ieee754_sqrtf>:
 800c71c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c720:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c724:	b570      	push	{r4, r5, r6, lr}
 800c726:	4603      	mov	r3, r0
 800c728:	4604      	mov	r4, r0
 800c72a:	d309      	bcc.n	800c740 <__ieee754_sqrtf+0x24>
 800c72c:	4601      	mov	r1, r0
 800c72e:	f7f4 fb29 	bl	8000d84 <__aeabi_fmul>
 800c732:	4601      	mov	r1, r0
 800c734:	4620      	mov	r0, r4
 800c736:	f7f4 fa1d 	bl	8000b74 <__addsf3>
 800c73a:	4604      	mov	r4, r0
 800c73c:	4620      	mov	r0, r4
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	2a00      	cmp	r2, #0
 800c742:	d0fb      	beq.n	800c73c <__ieee754_sqrtf+0x20>
 800c744:	2800      	cmp	r0, #0
 800c746:	da06      	bge.n	800c756 <__ieee754_sqrtf+0x3a>
 800c748:	4601      	mov	r1, r0
 800c74a:	f7f4 fa11 	bl	8000b70 <__aeabi_fsub>
 800c74e:	4601      	mov	r1, r0
 800c750:	f7f4 fbcc 	bl	8000eec <__aeabi_fdiv>
 800c754:	e7f1      	b.n	800c73a <__ieee754_sqrtf+0x1e>
 800c756:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800c75a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800c75e:	d029      	beq.n	800c7b4 <__ieee754_sqrtf+0x98>
 800c760:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800c764:	07cb      	lsls	r3, r1, #31
 800c766:	f04f 0300 	mov.w	r3, #0
 800c76a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800c76e:	f04f 0419 	mov.w	r4, #25
 800c772:	461e      	mov	r6, r3
 800c774:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c778:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c77c:	bf58      	it	pl
 800c77e:	0052      	lslpl	r2, r2, #1
 800c780:	1040      	asrs	r0, r0, #1
 800c782:	0052      	lsls	r2, r2, #1
 800c784:	1875      	adds	r5, r6, r1
 800c786:	4295      	cmp	r5, r2
 800c788:	bfde      	ittt	le
 800c78a:	186e      	addle	r6, r5, r1
 800c78c:	1b52      	suble	r2, r2, r5
 800c78e:	185b      	addle	r3, r3, r1
 800c790:	3c01      	subs	r4, #1
 800c792:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c796:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c79a:	d1f3      	bne.n	800c784 <__ieee754_sqrtf+0x68>
 800c79c:	b112      	cbz	r2, 800c7a4 <__ieee754_sqrtf+0x88>
 800c79e:	3301      	adds	r3, #1
 800c7a0:	f023 0301 	bic.w	r3, r3, #1
 800c7a4:	105c      	asrs	r4, r3, #1
 800c7a6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c7aa:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800c7ae:	e7c5      	b.n	800c73c <__ieee754_sqrtf+0x20>
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	3201      	adds	r2, #1
 800c7b4:	0218      	lsls	r0, r3, #8
 800c7b6:	d5fb      	bpl.n	800c7b0 <__ieee754_sqrtf+0x94>
 800c7b8:	3a01      	subs	r2, #1
 800c7ba:	1a89      	subs	r1, r1, r2
 800c7bc:	e7d0      	b.n	800c760 <__ieee754_sqrtf+0x44>
	...

0800c7c0 <__kernel_cos>:
 800c7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c7c8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c7cc:	4680      	mov	r8, r0
 800c7ce:	460f      	mov	r7, r1
 800c7d0:	e9cd 2300 	strd	r2, r3, [sp]
 800c7d4:	da04      	bge.n	800c7e0 <__kernel_cos+0x20>
 800c7d6:	f7f4 f92f 	bl	8000a38 <__aeabi_d2iz>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	f000 8086 	beq.w	800c8ec <__kernel_cos+0x12c>
 800c7e0:	4642      	mov	r2, r8
 800c7e2:	463b      	mov	r3, r7
 800c7e4:	4640      	mov	r0, r8
 800c7e6:	4639      	mov	r1, r7
 800c7e8:	f7f3 fe76 	bl	80004d8 <__aeabi_dmul>
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	4b4e      	ldr	r3, [pc, #312]	; (800c928 <__kernel_cos+0x168>)
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	460d      	mov	r5, r1
 800c7f4:	f7f3 fe70 	bl	80004d8 <__aeabi_dmul>
 800c7f8:	a33f      	add	r3, pc, #252	; (adr r3, 800c8f8 <__kernel_cos+0x138>)
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	4682      	mov	sl, r0
 800c800:	468b      	mov	fp, r1
 800c802:	4620      	mov	r0, r4
 800c804:	4629      	mov	r1, r5
 800c806:	f7f3 fe67 	bl	80004d8 <__aeabi_dmul>
 800c80a:	a33d      	add	r3, pc, #244	; (adr r3, 800c900 <__kernel_cos+0x140>)
 800c80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c810:	f7f3 fcac 	bl	800016c <__adddf3>
 800c814:	4622      	mov	r2, r4
 800c816:	462b      	mov	r3, r5
 800c818:	f7f3 fe5e 	bl	80004d8 <__aeabi_dmul>
 800c81c:	a33a      	add	r3, pc, #232	; (adr r3, 800c908 <__kernel_cos+0x148>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f7f3 fca1 	bl	8000168 <__aeabi_dsub>
 800c826:	4622      	mov	r2, r4
 800c828:	462b      	mov	r3, r5
 800c82a:	f7f3 fe55 	bl	80004d8 <__aeabi_dmul>
 800c82e:	a338      	add	r3, pc, #224	; (adr r3, 800c910 <__kernel_cos+0x150>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	f7f3 fc9a 	bl	800016c <__adddf3>
 800c838:	4622      	mov	r2, r4
 800c83a:	462b      	mov	r3, r5
 800c83c:	f7f3 fe4c 	bl	80004d8 <__aeabi_dmul>
 800c840:	a335      	add	r3, pc, #212	; (adr r3, 800c918 <__kernel_cos+0x158>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	f7f3 fc8f 	bl	8000168 <__aeabi_dsub>
 800c84a:	4622      	mov	r2, r4
 800c84c:	462b      	mov	r3, r5
 800c84e:	f7f3 fe43 	bl	80004d8 <__aeabi_dmul>
 800c852:	a333      	add	r3, pc, #204	; (adr r3, 800c920 <__kernel_cos+0x160>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f7f3 fc88 	bl	800016c <__adddf3>
 800c85c:	4622      	mov	r2, r4
 800c85e:	462b      	mov	r3, r5
 800c860:	f7f3 fe3a 	bl	80004d8 <__aeabi_dmul>
 800c864:	4622      	mov	r2, r4
 800c866:	462b      	mov	r3, r5
 800c868:	f7f3 fe36 	bl	80004d8 <__aeabi_dmul>
 800c86c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c870:	4604      	mov	r4, r0
 800c872:	460d      	mov	r5, r1
 800c874:	4640      	mov	r0, r8
 800c876:	4639      	mov	r1, r7
 800c878:	f7f3 fe2e 	bl	80004d8 <__aeabi_dmul>
 800c87c:	460b      	mov	r3, r1
 800c87e:	4602      	mov	r2, r0
 800c880:	4629      	mov	r1, r5
 800c882:	4620      	mov	r0, r4
 800c884:	f7f3 fc70 	bl	8000168 <__aeabi_dsub>
 800c888:	4b28      	ldr	r3, [pc, #160]	; (800c92c <__kernel_cos+0x16c>)
 800c88a:	4680      	mov	r8, r0
 800c88c:	429e      	cmp	r6, r3
 800c88e:	4689      	mov	r9, r1
 800c890:	dc0e      	bgt.n	800c8b0 <__kernel_cos+0xf0>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4650      	mov	r0, sl
 800c898:	4659      	mov	r1, fp
 800c89a:	f7f3 fc65 	bl	8000168 <__aeabi_dsub>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	4922      	ldr	r1, [pc, #136]	; (800c930 <__kernel_cos+0x170>)
 800c8a6:	f7f3 fc5f 	bl	8000168 <__aeabi_dsub>
 800c8aa:	b003      	add	sp, #12
 800c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b0:	2400      	movs	r4, #0
 800c8b2:	4b20      	ldr	r3, [pc, #128]	; (800c934 <__kernel_cos+0x174>)
 800c8b4:	4622      	mov	r2, r4
 800c8b6:	429e      	cmp	r6, r3
 800c8b8:	bfcc      	ite	gt
 800c8ba:	4d1f      	ldrgt	r5, [pc, #124]	; (800c938 <__kernel_cos+0x178>)
 800c8bc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c8c0:	462b      	mov	r3, r5
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	491a      	ldr	r1, [pc, #104]	; (800c930 <__kernel_cos+0x170>)
 800c8c6:	f7f3 fc4f 	bl	8000168 <__aeabi_dsub>
 800c8ca:	4622      	mov	r2, r4
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	460f      	mov	r7, r1
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	4650      	mov	r0, sl
 800c8d4:	4659      	mov	r1, fp
 800c8d6:	f7f3 fc47 	bl	8000168 <__aeabi_dsub>
 800c8da:	4642      	mov	r2, r8
 800c8dc:	464b      	mov	r3, r9
 800c8de:	f7f3 fc43 	bl	8000168 <__aeabi_dsub>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	e7dc      	b.n	800c8a6 <__kernel_cos+0xe6>
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	4910      	ldr	r1, [pc, #64]	; (800c930 <__kernel_cos+0x170>)
 800c8f0:	e7db      	b.n	800c8aa <__kernel_cos+0xea>
 800c8f2:	bf00      	nop
 800c8f4:	f3af 8000 	nop.w
 800c8f8:	be8838d4 	.word	0xbe8838d4
 800c8fc:	bda8fae9 	.word	0xbda8fae9
 800c900:	bdb4b1c4 	.word	0xbdb4b1c4
 800c904:	3e21ee9e 	.word	0x3e21ee9e
 800c908:	809c52ad 	.word	0x809c52ad
 800c90c:	3e927e4f 	.word	0x3e927e4f
 800c910:	19cb1590 	.word	0x19cb1590
 800c914:	3efa01a0 	.word	0x3efa01a0
 800c918:	16c15177 	.word	0x16c15177
 800c91c:	3f56c16c 	.word	0x3f56c16c
 800c920:	5555554c 	.word	0x5555554c
 800c924:	3fa55555 	.word	0x3fa55555
 800c928:	3fe00000 	.word	0x3fe00000
 800c92c:	3fd33332 	.word	0x3fd33332
 800c930:	3ff00000 	.word	0x3ff00000
 800c934:	3fe90000 	.word	0x3fe90000
 800c938:	3fd20000 	.word	0x3fd20000

0800c93c <__kernel_rem_pio2>:
 800c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c940:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c944:	9308      	str	r3, [sp, #32]
 800c946:	9101      	str	r1, [sp, #4]
 800c948:	4bc0      	ldr	r3, [pc, #768]	; (800cc4c <__kernel_rem_pio2+0x310>)
 800c94a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c94c:	f112 0f14 	cmn.w	r2, #20
 800c950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c954:	bfa8      	it	ge
 800c956:	1ed4      	subge	r4, r2, #3
 800c958:	9304      	str	r3, [sp, #16]
 800c95a:	9b08      	ldr	r3, [sp, #32]
 800c95c:	bfb8      	it	lt
 800c95e:	2400      	movlt	r4, #0
 800c960:	f103 33ff 	add.w	r3, r3, #4294967295
 800c964:	9306      	str	r3, [sp, #24]
 800c966:	bfa4      	itt	ge
 800c968:	2318      	movge	r3, #24
 800c96a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c96e:	f06f 0317 	mvn.w	r3, #23
 800c972:	fb04 3303 	mla	r3, r4, r3, r3
 800c976:	eb03 0a02 	add.w	sl, r3, r2
 800c97a:	9a06      	ldr	r2, [sp, #24]
 800c97c:	9b04      	ldr	r3, [sp, #16]
 800c97e:	1aa7      	subs	r7, r4, r2
 800c980:	eb03 0802 	add.w	r8, r3, r2
 800c984:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c986:	2500      	movs	r5, #0
 800c988:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c98c:	2200      	movs	r2, #0
 800c98e:	2300      	movs	r3, #0
 800c990:	9009      	str	r0, [sp, #36]	; 0x24
 800c992:	ae20      	add	r6, sp, #128	; 0x80
 800c994:	4545      	cmp	r5, r8
 800c996:	dd19      	ble.n	800c9cc <__kernel_rem_pio2+0x90>
 800c998:	9b08      	ldr	r3, [sp, #32]
 800c99a:	aa20      	add	r2, sp, #128	; 0x80
 800c99c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c9a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c9a4:	f1c3 0301 	rsb	r3, r3, #1
 800c9a8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c9ac:	9307      	str	r3, [sp, #28]
 800c9ae:	9b07      	ldr	r3, [sp, #28]
 800c9b0:	9a04      	ldr	r2, [sp, #16]
 800c9b2:	4443      	add	r3, r8
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	db35      	blt.n	800ca24 <__kernel_rem_pio2+0xe8>
 800c9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f1a3 0908 	sub.w	r9, r3, #8
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	462f      	mov	r7, r5
 800c9c4:	2600      	movs	r6, #0
 800c9c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9ca:	e01f      	b.n	800ca0c <__kernel_rem_pio2+0xd0>
 800c9cc:	42ef      	cmn	r7, r5
 800c9ce:	d40b      	bmi.n	800c9e8 <__kernel_rem_pio2+0xac>
 800c9d0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c9d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9d8:	f7f3 fd14 	bl	8000404 <__aeabi_i2d>
 800c9dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9e0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c9e4:	3501      	adds	r5, #1
 800c9e6:	e7d5      	b.n	800c994 <__kernel_rem_pio2+0x58>
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	e7f8      	b.n	800c9e0 <__kernel_rem_pio2+0xa4>
 800c9ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9f2:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c9f6:	f7f3 fd6f 	bl	80004d8 <__aeabi_dmul>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca02:	f7f3 fbb3 	bl	800016c <__adddf3>
 800ca06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca0a:	3601      	adds	r6, #1
 800ca0c:	9b06      	ldr	r3, [sp, #24]
 800ca0e:	3f08      	subs	r7, #8
 800ca10:	429e      	cmp	r6, r3
 800ca12:	ddec      	ble.n	800c9ee <__kernel_rem_pio2+0xb2>
 800ca14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca18:	3508      	adds	r5, #8
 800ca1a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800ca1e:	f108 0801 	add.w	r8, r8, #1
 800ca22:	e7c4      	b.n	800c9ae <__kernel_rem_pio2+0x72>
 800ca24:	9b04      	ldr	r3, [sp, #16]
 800ca26:	aa0c      	add	r2, sp, #48	; 0x30
 800ca28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca2e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ca30:	9f04      	ldr	r7, [sp, #16]
 800ca32:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ca36:	930a      	str	r3, [sp, #40]	; 0x28
 800ca38:	463e      	mov	r6, r7
 800ca3a:	ab98      	add	r3, sp, #608	; 0x260
 800ca3c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ca40:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca44:	f8cd b008 	str.w	fp, [sp, #8]
 800ca48:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800ca4c:	2e00      	cmp	r6, #0
 800ca4e:	dc71      	bgt.n	800cb34 <__kernel_rem_pio2+0x1f8>
 800ca50:	4652      	mov	r2, sl
 800ca52:	4620      	mov	r0, r4
 800ca54:	4629      	mov	r1, r5
 800ca56:	f001 fa5b 	bl	800df10 <scalbn>
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ca60:	4604      	mov	r4, r0
 800ca62:	460d      	mov	r5, r1
 800ca64:	f7f3 fd38 	bl	80004d8 <__aeabi_dmul>
 800ca68:	f001 f9d2 	bl	800de10 <floor>
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	4b78      	ldr	r3, [pc, #480]	; (800cc50 <__kernel_rem_pio2+0x314>)
 800ca70:	f7f3 fd32 	bl	80004d8 <__aeabi_dmul>
 800ca74:	4602      	mov	r2, r0
 800ca76:	460b      	mov	r3, r1
 800ca78:	4620      	mov	r0, r4
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	f7f3 fb74 	bl	8000168 <__aeabi_dsub>
 800ca80:	460d      	mov	r5, r1
 800ca82:	4604      	mov	r4, r0
 800ca84:	f7f3 ffd8 	bl	8000a38 <__aeabi_d2iz>
 800ca88:	9007      	str	r0, [sp, #28]
 800ca8a:	f7f3 fcbb 	bl	8000404 <__aeabi_i2d>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	460b      	mov	r3, r1
 800ca92:	4620      	mov	r0, r4
 800ca94:	4629      	mov	r1, r5
 800ca96:	f7f3 fb67 	bl	8000168 <__aeabi_dsub>
 800ca9a:	f1ba 0f00 	cmp.w	sl, #0
 800ca9e:	4680      	mov	r8, r0
 800caa0:	4689      	mov	r9, r1
 800caa2:	dd70      	ble.n	800cb86 <__kernel_rem_pio2+0x24a>
 800caa4:	1e7a      	subs	r2, r7, #1
 800caa6:	ab0c      	add	r3, sp, #48	; 0x30
 800caa8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800caac:	9c07      	ldr	r4, [sp, #28]
 800caae:	f1ca 0118 	rsb	r1, sl, #24
 800cab2:	fa40 f301 	asr.w	r3, r0, r1
 800cab6:	441c      	add	r4, r3
 800cab8:	408b      	lsls	r3, r1
 800caba:	1ac0      	subs	r0, r0, r3
 800cabc:	ab0c      	add	r3, sp, #48	; 0x30
 800cabe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cac2:	f1ca 0317 	rsb	r3, sl, #23
 800cac6:	9407      	str	r4, [sp, #28]
 800cac8:	fa40 f303 	asr.w	r3, r0, r3
 800cacc:	9302      	str	r3, [sp, #8]
 800cace:	9b02      	ldr	r3, [sp, #8]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	dd66      	ble.n	800cba2 <__kernel_rem_pio2+0x266>
 800cad4:	2200      	movs	r2, #0
 800cad6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cada:	4614      	mov	r4, r2
 800cadc:	9b07      	ldr	r3, [sp, #28]
 800cade:	3301      	adds	r3, #1
 800cae0:	9307      	str	r3, [sp, #28]
 800cae2:	4297      	cmp	r7, r2
 800cae4:	f300 809f 	bgt.w	800cc26 <__kernel_rem_pio2+0x2ea>
 800cae8:	f1ba 0f00 	cmp.w	sl, #0
 800caec:	dd07      	ble.n	800cafe <__kernel_rem_pio2+0x1c2>
 800caee:	f1ba 0f01 	cmp.w	sl, #1
 800caf2:	f000 80b9 	beq.w	800cc68 <__kernel_rem_pio2+0x32c>
 800caf6:	f1ba 0f02 	cmp.w	sl, #2
 800cafa:	f000 80bf 	beq.w	800cc7c <__kernel_rem_pio2+0x340>
 800cafe:	9b02      	ldr	r3, [sp, #8]
 800cb00:	2b02      	cmp	r3, #2
 800cb02:	d14e      	bne.n	800cba2 <__kernel_rem_pio2+0x266>
 800cb04:	4642      	mov	r2, r8
 800cb06:	464b      	mov	r3, r9
 800cb08:	2000      	movs	r0, #0
 800cb0a:	4952      	ldr	r1, [pc, #328]	; (800cc54 <__kernel_rem_pio2+0x318>)
 800cb0c:	f7f3 fb2c 	bl	8000168 <__aeabi_dsub>
 800cb10:	4680      	mov	r8, r0
 800cb12:	4689      	mov	r9, r1
 800cb14:	2c00      	cmp	r4, #0
 800cb16:	d044      	beq.n	800cba2 <__kernel_rem_pio2+0x266>
 800cb18:	4652      	mov	r2, sl
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	494d      	ldr	r1, [pc, #308]	; (800cc54 <__kernel_rem_pio2+0x318>)
 800cb1e:	f001 f9f7 	bl	800df10 <scalbn>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	4640      	mov	r0, r8
 800cb28:	4649      	mov	r1, r9
 800cb2a:	f7f3 fb1d 	bl	8000168 <__aeabi_dsub>
 800cb2e:	4680      	mov	r8, r0
 800cb30:	4689      	mov	r9, r1
 800cb32:	e036      	b.n	800cba2 <__kernel_rem_pio2+0x266>
 800cb34:	2200      	movs	r2, #0
 800cb36:	4b48      	ldr	r3, [pc, #288]	; (800cc58 <__kernel_rem_pio2+0x31c>)
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f7f3 fccc 	bl	80004d8 <__aeabi_dmul>
 800cb40:	f7f3 ff7a 	bl	8000a38 <__aeabi_d2iz>
 800cb44:	f7f3 fc5e 	bl	8000404 <__aeabi_i2d>
 800cb48:	2200      	movs	r2, #0
 800cb4a:	4b44      	ldr	r3, [pc, #272]	; (800cc5c <__kernel_rem_pio2+0x320>)
 800cb4c:	4680      	mov	r8, r0
 800cb4e:	4689      	mov	r9, r1
 800cb50:	f7f3 fcc2 	bl	80004d8 <__aeabi_dmul>
 800cb54:	4602      	mov	r2, r0
 800cb56:	460b      	mov	r3, r1
 800cb58:	4620      	mov	r0, r4
 800cb5a:	4629      	mov	r1, r5
 800cb5c:	f7f3 fb04 	bl	8000168 <__aeabi_dsub>
 800cb60:	f7f3 ff6a 	bl	8000a38 <__aeabi_d2iz>
 800cb64:	9b02      	ldr	r3, [sp, #8]
 800cb66:	3e01      	subs	r6, #1
 800cb68:	f843 0b04 	str.w	r0, [r3], #4
 800cb6c:	9302      	str	r3, [sp, #8]
 800cb6e:	ab70      	add	r3, sp, #448	; 0x1c0
 800cb70:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb74:	4640      	mov	r0, r8
 800cb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	f7f3 faf6 	bl	800016c <__adddf3>
 800cb80:	4604      	mov	r4, r0
 800cb82:	460d      	mov	r5, r1
 800cb84:	e762      	b.n	800ca4c <__kernel_rem_pio2+0x110>
 800cb86:	d105      	bne.n	800cb94 <__kernel_rem_pio2+0x258>
 800cb88:	1e7b      	subs	r3, r7, #1
 800cb8a:	aa0c      	add	r2, sp, #48	; 0x30
 800cb8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cb90:	15c3      	asrs	r3, r0, #23
 800cb92:	e79b      	b.n	800cacc <__kernel_rem_pio2+0x190>
 800cb94:	2200      	movs	r2, #0
 800cb96:	4b32      	ldr	r3, [pc, #200]	; (800cc60 <__kernel_rem_pio2+0x324>)
 800cb98:	f7f3 ff24 	bl	80009e4 <__aeabi_dcmpge>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d13f      	bne.n	800cc20 <__kernel_rem_pio2+0x2e4>
 800cba0:	9002      	str	r0, [sp, #8]
 800cba2:	2200      	movs	r2, #0
 800cba4:	2300      	movs	r3, #0
 800cba6:	4640      	mov	r0, r8
 800cba8:	4649      	mov	r1, r9
 800cbaa:	f7f3 fefd 	bl	80009a8 <__aeabi_dcmpeq>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	f000 80b5 	beq.w	800cd1e <__kernel_rem_pio2+0x3e2>
 800cbb4:	1e7c      	subs	r4, r7, #1
 800cbb6:	4623      	mov	r3, r4
 800cbb8:	2200      	movs	r2, #0
 800cbba:	9904      	ldr	r1, [sp, #16]
 800cbbc:	428b      	cmp	r3, r1
 800cbbe:	da64      	bge.n	800cc8a <__kernel_rem_pio2+0x34e>
 800cbc0:	2a00      	cmp	r2, #0
 800cbc2:	d078      	beq.n	800ccb6 <__kernel_rem_pio2+0x37a>
 800cbc4:	ab0c      	add	r3, sp, #48	; 0x30
 800cbc6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cbca:	f1aa 0a18 	sub.w	sl, sl, #24
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f000 80a3 	beq.w	800cd1a <__kernel_rem_pio2+0x3de>
 800cbd4:	4652      	mov	r2, sl
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	491e      	ldr	r1, [pc, #120]	; (800cc54 <__kernel_rem_pio2+0x318>)
 800cbda:	f001 f999 	bl	800df10 <scalbn>
 800cbde:	46a2      	mov	sl, r4
 800cbe0:	4606      	mov	r6, r0
 800cbe2:	460f      	mov	r7, r1
 800cbe4:	f04f 0800 	mov.w	r8, #0
 800cbe8:	00e3      	lsls	r3, r4, #3
 800cbea:	9306      	str	r3, [sp, #24]
 800cbec:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800cc58 <__kernel_rem_pio2+0x31c>
 800cbf0:	ab70      	add	r3, sp, #448	; 0x1c0
 800cbf2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800cbf6:	f1ba 0f00 	cmp.w	sl, #0
 800cbfa:	f280 80c6 	bge.w	800cd8a <__kernel_rem_pio2+0x44e>
 800cbfe:	4627      	mov	r7, r4
 800cc00:	f04f 0800 	mov.w	r8, #0
 800cc04:	2f00      	cmp	r7, #0
 800cc06:	f2c0 80f3 	blt.w	800cdf0 <__kernel_rem_pio2+0x4b4>
 800cc0a:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <__kernel_rem_pio2+0x328>)
 800cc0c:	f04f 0a00 	mov.w	sl, #0
 800cc10:	461d      	mov	r5, r3
 800cc12:	ab70      	add	r3, sp, #448	; 0x1c0
 800cc14:	f04f 0b00 	mov.w	fp, #0
 800cc18:	2600      	movs	r6, #0
 800cc1a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800cc1e:	e0d9      	b.n	800cdd4 <__kernel_rem_pio2+0x498>
 800cc20:	2302      	movs	r3, #2
 800cc22:	9302      	str	r3, [sp, #8]
 800cc24:	e756      	b.n	800cad4 <__kernel_rem_pio2+0x198>
 800cc26:	f8db 3000 	ldr.w	r3, [fp]
 800cc2a:	b954      	cbnz	r4, 800cc42 <__kernel_rem_pio2+0x306>
 800cc2c:	b123      	cbz	r3, 800cc38 <__kernel_rem_pio2+0x2fc>
 800cc2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cc32:	f8cb 3000 	str.w	r3, [fp]
 800cc36:	2301      	movs	r3, #1
 800cc38:	461c      	mov	r4, r3
 800cc3a:	3201      	adds	r2, #1
 800cc3c:	f10b 0b04 	add.w	fp, fp, #4
 800cc40:	e74f      	b.n	800cae2 <__kernel_rem_pio2+0x1a6>
 800cc42:	1acb      	subs	r3, r1, r3
 800cc44:	f8cb 3000 	str.w	r3, [fp]
 800cc48:	4623      	mov	r3, r4
 800cc4a:	e7f5      	b.n	800cc38 <__kernel_rem_pio2+0x2fc>
 800cc4c:	0800eff8 	.word	0x0800eff8
 800cc50:	40200000 	.word	0x40200000
 800cc54:	3ff00000 	.word	0x3ff00000
 800cc58:	3e700000 	.word	0x3e700000
 800cc5c:	41700000 	.word	0x41700000
 800cc60:	3fe00000 	.word	0x3fe00000
 800cc64:	0800efb8 	.word	0x0800efb8
 800cc68:	1e7a      	subs	r2, r7, #1
 800cc6a:	ab0c      	add	r3, sp, #48	; 0x30
 800cc6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc70:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cc74:	a90c      	add	r1, sp, #48	; 0x30
 800cc76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cc7a:	e740      	b.n	800cafe <__kernel_rem_pio2+0x1c2>
 800cc7c:	1e7a      	subs	r2, r7, #1
 800cc7e:	ab0c      	add	r3, sp, #48	; 0x30
 800cc80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cc88:	e7f4      	b.n	800cc74 <__kernel_rem_pio2+0x338>
 800cc8a:	a90c      	add	r1, sp, #48	; 0x30
 800cc8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cc90:	3b01      	subs	r3, #1
 800cc92:	430a      	orrs	r2, r1
 800cc94:	e791      	b.n	800cbba <__kernel_rem_pio2+0x27e>
 800cc96:	3401      	adds	r4, #1
 800cc98:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cc9c:	2a00      	cmp	r2, #0
 800cc9e:	d0fa      	beq.n	800cc96 <__kernel_rem_pio2+0x35a>
 800cca0:	9b08      	ldr	r3, [sp, #32]
 800cca2:	1c7e      	adds	r6, r7, #1
 800cca4:	18fd      	adds	r5, r7, r3
 800cca6:	ab20      	add	r3, sp, #128	; 0x80
 800cca8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ccac:	443c      	add	r4, r7
 800ccae:	42b4      	cmp	r4, r6
 800ccb0:	da04      	bge.n	800ccbc <__kernel_rem_pio2+0x380>
 800ccb2:	4627      	mov	r7, r4
 800ccb4:	e6c0      	b.n	800ca38 <__kernel_rem_pio2+0xfc>
 800ccb6:	2401      	movs	r4, #1
 800ccb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccba:	e7ed      	b.n	800cc98 <__kernel_rem_pio2+0x35c>
 800ccbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccbe:	462f      	mov	r7, r5
 800ccc0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ccc4:	f7f3 fb9e 	bl	8000404 <__aeabi_i2d>
 800ccc8:	f04f 0b00 	mov.w	fp, #0
 800cccc:	f04f 0800 	mov.w	r8, #0
 800ccd0:	f04f 0900 	mov.w	r9, #0
 800ccd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd6:	e8e7 0102 	strd	r0, r1, [r7], #8
 800ccda:	3b08      	subs	r3, #8
 800ccdc:	9302      	str	r3, [sp, #8]
 800ccde:	9b06      	ldr	r3, [sp, #24]
 800cce0:	459b      	cmp	fp, r3
 800cce2:	dd07      	ble.n	800ccf4 <__kernel_rem_pio2+0x3b8>
 800cce4:	ab70      	add	r3, sp, #448	; 0x1c0
 800cce6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ccea:	463d      	mov	r5, r7
 800ccec:	e9c3 8900 	strd	r8, r9, [r3]
 800ccf0:	3601      	adds	r6, #1
 800ccf2:	e7dc      	b.n	800ccae <__kernel_rem_pio2+0x372>
 800ccf4:	9902      	ldr	r1, [sp, #8]
 800ccf6:	f10b 0b01 	add.w	fp, fp, #1
 800ccfa:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ccfe:	9102      	str	r1, [sp, #8]
 800cd00:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800cd04:	f7f3 fbe8 	bl	80004d8 <__aeabi_dmul>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4640      	mov	r0, r8
 800cd0e:	4649      	mov	r1, r9
 800cd10:	f7f3 fa2c 	bl	800016c <__adddf3>
 800cd14:	4680      	mov	r8, r0
 800cd16:	4689      	mov	r9, r1
 800cd18:	e7e1      	b.n	800ccde <__kernel_rem_pio2+0x3a2>
 800cd1a:	3c01      	subs	r4, #1
 800cd1c:	e752      	b.n	800cbc4 <__kernel_rem_pio2+0x288>
 800cd1e:	f1ca 0200 	rsb	r2, sl, #0
 800cd22:	4640      	mov	r0, r8
 800cd24:	4649      	mov	r1, r9
 800cd26:	f001 f8f3 	bl	800df10 <scalbn>
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	4ba5      	ldr	r3, [pc, #660]	; (800cfc4 <__kernel_rem_pio2+0x688>)
 800cd2e:	4604      	mov	r4, r0
 800cd30:	460d      	mov	r5, r1
 800cd32:	f7f3 fe57 	bl	80009e4 <__aeabi_dcmpge>
 800cd36:	b1f8      	cbz	r0, 800cd78 <__kernel_rem_pio2+0x43c>
 800cd38:	2200      	movs	r2, #0
 800cd3a:	4ba3      	ldr	r3, [pc, #652]	; (800cfc8 <__kernel_rem_pio2+0x68c>)
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	4629      	mov	r1, r5
 800cd40:	f7f3 fbca 	bl	80004d8 <__aeabi_dmul>
 800cd44:	f7f3 fe78 	bl	8000a38 <__aeabi_d2iz>
 800cd48:	4606      	mov	r6, r0
 800cd4a:	f7f3 fb5b 	bl	8000404 <__aeabi_i2d>
 800cd4e:	2200      	movs	r2, #0
 800cd50:	4b9c      	ldr	r3, [pc, #624]	; (800cfc4 <__kernel_rem_pio2+0x688>)
 800cd52:	f7f3 fbc1 	bl	80004d8 <__aeabi_dmul>
 800cd56:	460b      	mov	r3, r1
 800cd58:	4602      	mov	r2, r0
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f7f3 fa03 	bl	8000168 <__aeabi_dsub>
 800cd62:	f7f3 fe69 	bl	8000a38 <__aeabi_d2iz>
 800cd66:	1c7c      	adds	r4, r7, #1
 800cd68:	ab0c      	add	r3, sp, #48	; 0x30
 800cd6a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800cd6e:	f10a 0a18 	add.w	sl, sl, #24
 800cd72:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800cd76:	e72d      	b.n	800cbd4 <__kernel_rem_pio2+0x298>
 800cd78:	4620      	mov	r0, r4
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7f3 fe5c 	bl	8000a38 <__aeabi_d2iz>
 800cd80:	ab0c      	add	r3, sp, #48	; 0x30
 800cd82:	463c      	mov	r4, r7
 800cd84:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800cd88:	e724      	b.n	800cbd4 <__kernel_rem_pio2+0x298>
 800cd8a:	ab0c      	add	r3, sp, #48	; 0x30
 800cd8c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800cd90:	f7f3 fb38 	bl	8000404 <__aeabi_i2d>
 800cd94:	4632      	mov	r2, r6
 800cd96:	463b      	mov	r3, r7
 800cd98:	f7f3 fb9e 	bl	80004d8 <__aeabi_dmul>
 800cd9c:	4642      	mov	r2, r8
 800cd9e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800cda2:	464b      	mov	r3, r9
 800cda4:	4630      	mov	r0, r6
 800cda6:	4639      	mov	r1, r7
 800cda8:	f7f3 fb96 	bl	80004d8 <__aeabi_dmul>
 800cdac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdb0:	4606      	mov	r6, r0
 800cdb2:	460f      	mov	r7, r1
 800cdb4:	e71f      	b.n	800cbf6 <__kernel_rem_pio2+0x2ba>
 800cdb6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cdba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800cdbe:	f7f3 fb8b 	bl	80004d8 <__aeabi_dmul>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4650      	mov	r0, sl
 800cdc8:	4659      	mov	r1, fp
 800cdca:	f7f3 f9cf 	bl	800016c <__adddf3>
 800cdce:	4682      	mov	sl, r0
 800cdd0:	468b      	mov	fp, r1
 800cdd2:	3601      	adds	r6, #1
 800cdd4:	9b04      	ldr	r3, [sp, #16]
 800cdd6:	429e      	cmp	r6, r3
 800cdd8:	dc01      	bgt.n	800cdde <__kernel_rem_pio2+0x4a2>
 800cdda:	45b0      	cmp	r8, r6
 800cddc:	daeb      	bge.n	800cdb6 <__kernel_rem_pio2+0x47a>
 800cdde:	ab48      	add	r3, sp, #288	; 0x120
 800cde0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cde4:	e9c3 ab00 	strd	sl, fp, [r3]
 800cde8:	3f01      	subs	r7, #1
 800cdea:	f108 0801 	add.w	r8, r8, #1
 800cdee:	e709      	b.n	800cc04 <__kernel_rem_pio2+0x2c8>
 800cdf0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	dc09      	bgt.n	800ce0a <__kernel_rem_pio2+0x4ce>
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	dc34      	bgt.n	800ce64 <__kernel_rem_pio2+0x528>
 800cdfa:	d05e      	beq.n	800ceba <__kernel_rem_pio2+0x57e>
 800cdfc:	9b07      	ldr	r3, [sp, #28]
 800cdfe:	f003 0007 	and.w	r0, r3, #7
 800ce02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ce06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ce0c:	2b03      	cmp	r3, #3
 800ce0e:	d1f5      	bne.n	800cdfc <__kernel_rem_pio2+0x4c0>
 800ce10:	9a06      	ldr	r2, [sp, #24]
 800ce12:	ab48      	add	r3, sp, #288	; 0x120
 800ce14:	441a      	add	r2, r3
 800ce16:	4615      	mov	r5, r2
 800ce18:	4692      	mov	sl, r2
 800ce1a:	46a3      	mov	fp, r4
 800ce1c:	f1bb 0f00 	cmp.w	fp, #0
 800ce20:	dc7a      	bgt.n	800cf18 <__kernel_rem_pio2+0x5dc>
 800ce22:	46aa      	mov	sl, r5
 800ce24:	46a3      	mov	fp, r4
 800ce26:	f1bb 0f01 	cmp.w	fp, #1
 800ce2a:	f300 8094 	bgt.w	800cf56 <__kernel_rem_pio2+0x61a>
 800ce2e:	2700      	movs	r7, #0
 800ce30:	463e      	mov	r6, r7
 800ce32:	2c01      	cmp	r4, #1
 800ce34:	f300 80ae 	bgt.w	800cf94 <__kernel_rem_pio2+0x658>
 800ce38:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800ce3c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800ce40:	9b02      	ldr	r3, [sp, #8]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f040 80b0 	bne.w	800cfa8 <__kernel_rem_pio2+0x66c>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	462a      	mov	r2, r5
 800ce4c:	9801      	ldr	r0, [sp, #4]
 800ce4e:	e9c0 2300 	strd	r2, r3, [r0]
 800ce52:	4622      	mov	r2, r4
 800ce54:	460b      	mov	r3, r1
 800ce56:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ce5a:	463a      	mov	r2, r7
 800ce5c:	4633      	mov	r3, r6
 800ce5e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ce62:	e7cb      	b.n	800cdfc <__kernel_rem_pio2+0x4c0>
 800ce64:	2000      	movs	r0, #0
 800ce66:	9a06      	ldr	r2, [sp, #24]
 800ce68:	ab48      	add	r3, sp, #288	; 0x120
 800ce6a:	441a      	add	r2, r3
 800ce6c:	4615      	mov	r5, r2
 800ce6e:	46a0      	mov	r8, r4
 800ce70:	4601      	mov	r1, r0
 800ce72:	f1b8 0f00 	cmp.w	r8, #0
 800ce76:	da3c      	bge.n	800cef2 <__kernel_rem_pio2+0x5b6>
 800ce78:	9b02      	ldr	r3, [sp, #8]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d040      	beq.n	800cf00 <__kernel_rem_pio2+0x5c4>
 800ce7e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ce82:	4602      	mov	r2, r0
 800ce84:	462b      	mov	r3, r5
 800ce86:	9d01      	ldr	r5, [sp, #4]
 800ce88:	2601      	movs	r6, #1
 800ce8a:	e9c5 2300 	strd	r2, r3, [r5]
 800ce8e:	460b      	mov	r3, r1
 800ce90:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ce94:	f7f3 f968 	bl	8000168 <__aeabi_dsub>
 800ce98:	4684      	mov	ip, r0
 800ce9a:	460f      	mov	r7, r1
 800ce9c:	ad48      	add	r5, sp, #288	; 0x120
 800ce9e:	42b4      	cmp	r4, r6
 800cea0:	f105 0508 	add.w	r5, r5, #8
 800cea4:	da2e      	bge.n	800cf04 <__kernel_rem_pio2+0x5c8>
 800cea6:	9b02      	ldr	r3, [sp, #8]
 800cea8:	b10b      	cbz	r3, 800ceae <__kernel_rem_pio2+0x572>
 800ceaa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ceae:	4662      	mov	r2, ip
 800ceb0:	463b      	mov	r3, r7
 800ceb2:	9901      	ldr	r1, [sp, #4]
 800ceb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ceb8:	e7a0      	b.n	800cdfc <__kernel_rem_pio2+0x4c0>
 800ceba:	9a06      	ldr	r2, [sp, #24]
 800cebc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800cebe:	ab48      	add	r3, sp, #288	; 0x120
 800cec0:	441a      	add	r2, r3
 800cec2:	4615      	mov	r5, r2
 800cec4:	4637      	mov	r7, r6
 800cec6:	2c00      	cmp	r4, #0
 800cec8:	da09      	bge.n	800cede <__kernel_rem_pio2+0x5a2>
 800ceca:	9b02      	ldr	r3, [sp, #8]
 800cecc:	b10b      	cbz	r3, 800ced2 <__kernel_rem_pio2+0x596>
 800cece:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ced2:	4632      	mov	r2, r6
 800ced4:	463b      	mov	r3, r7
 800ced6:	9901      	ldr	r1, [sp, #4]
 800ced8:	e9c1 2300 	strd	r2, r3, [r1]
 800cedc:	e78e      	b.n	800cdfc <__kernel_rem_pio2+0x4c0>
 800cede:	4630      	mov	r0, r6
 800cee0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cee4:	4639      	mov	r1, r7
 800cee6:	f7f3 f941 	bl	800016c <__adddf3>
 800ceea:	3c01      	subs	r4, #1
 800ceec:	4606      	mov	r6, r0
 800ceee:	460f      	mov	r7, r1
 800cef0:	e7e9      	b.n	800cec6 <__kernel_rem_pio2+0x58a>
 800cef2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cef6:	f7f3 f939 	bl	800016c <__adddf3>
 800cefa:	f108 38ff 	add.w	r8, r8, #4294967295
 800cefe:	e7b8      	b.n	800ce72 <__kernel_rem_pio2+0x536>
 800cf00:	460d      	mov	r5, r1
 800cf02:	e7be      	b.n	800ce82 <__kernel_rem_pio2+0x546>
 800cf04:	4660      	mov	r0, ip
 800cf06:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf0a:	4639      	mov	r1, r7
 800cf0c:	f7f3 f92e 	bl	800016c <__adddf3>
 800cf10:	3601      	adds	r6, #1
 800cf12:	4684      	mov	ip, r0
 800cf14:	460f      	mov	r7, r1
 800cf16:	e7c2      	b.n	800ce9e <__kernel_rem_pio2+0x562>
 800cf18:	e9da 6700 	ldrd	r6, r7, [sl]
 800cf1c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800cf20:	4632      	mov	r2, r6
 800cf22:	463b      	mov	r3, r7
 800cf24:	4640      	mov	r0, r8
 800cf26:	4649      	mov	r1, r9
 800cf28:	f7f3 f920 	bl	800016c <__adddf3>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf34:	4640      	mov	r0, r8
 800cf36:	4649      	mov	r1, r9
 800cf38:	f7f3 f916 	bl	8000168 <__aeabi_dsub>
 800cf3c:	4632      	mov	r2, r6
 800cf3e:	463b      	mov	r3, r7
 800cf40:	f7f3 f914 	bl	800016c <__adddf3>
 800cf44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf48:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cf4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf50:	e9ca 2300 	strd	r2, r3, [sl]
 800cf54:	e762      	b.n	800ce1c <__kernel_rem_pio2+0x4e0>
 800cf56:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf5a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800cf5e:	4642      	mov	r2, r8
 800cf60:	464b      	mov	r3, r9
 800cf62:	4630      	mov	r0, r6
 800cf64:	4639      	mov	r1, r7
 800cf66:	f7f3 f901 	bl	800016c <__adddf3>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf72:	4630      	mov	r0, r6
 800cf74:	4639      	mov	r1, r7
 800cf76:	f7f3 f8f7 	bl	8000168 <__aeabi_dsub>
 800cf7a:	4642      	mov	r2, r8
 800cf7c:	464b      	mov	r3, r9
 800cf7e:	f7f3 f8f5 	bl	800016c <__adddf3>
 800cf82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf86:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cf8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf8e:	e9ca 2300 	strd	r2, r3, [sl]
 800cf92:	e748      	b.n	800ce26 <__kernel_rem_pio2+0x4ea>
 800cf94:	4638      	mov	r0, r7
 800cf96:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cf9a:	4631      	mov	r1, r6
 800cf9c:	f7f3 f8e6 	bl	800016c <__adddf3>
 800cfa0:	3c01      	subs	r4, #1
 800cfa2:	4607      	mov	r7, r0
 800cfa4:	460e      	mov	r6, r1
 800cfa6:	e744      	b.n	800ce32 <__kernel_rem_pio2+0x4f6>
 800cfa8:	9b01      	ldr	r3, [sp, #4]
 800cfaa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cfae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cfb2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800cfb6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800cfba:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800cfbe:	601d      	str	r5, [r3, #0]
 800cfc0:	615e      	str	r6, [r3, #20]
 800cfc2:	e71b      	b.n	800cdfc <__kernel_rem_pio2+0x4c0>
 800cfc4:	41700000 	.word	0x41700000
 800cfc8:	3e700000 	.word	0x3e700000
 800cfcc:	00000000 	.word	0x00000000

0800cfd0 <__kernel_sin>:
 800cfd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfd4:	b086      	sub	sp, #24
 800cfd6:	e9cd 2300 	strd	r2, r3, [sp]
 800cfda:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfde:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cfe2:	4682      	mov	sl, r0
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cfe8:	da03      	bge.n	800cff2 <__kernel_sin+0x22>
 800cfea:	f7f3 fd25 	bl	8000a38 <__aeabi_d2iz>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d050      	beq.n	800d094 <__kernel_sin+0xc4>
 800cff2:	4652      	mov	r2, sl
 800cff4:	4623      	mov	r3, r4
 800cff6:	4650      	mov	r0, sl
 800cff8:	4621      	mov	r1, r4
 800cffa:	f7f3 fa6d 	bl	80004d8 <__aeabi_dmul>
 800cffe:	4606      	mov	r6, r0
 800d000:	460f      	mov	r7, r1
 800d002:	4602      	mov	r2, r0
 800d004:	460b      	mov	r3, r1
 800d006:	4650      	mov	r0, sl
 800d008:	4621      	mov	r1, r4
 800d00a:	f7f3 fa65 	bl	80004d8 <__aeabi_dmul>
 800d00e:	a33e      	add	r3, pc, #248	; (adr r3, 800d108 <__kernel_sin+0x138>)
 800d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d014:	4680      	mov	r8, r0
 800d016:	4689      	mov	r9, r1
 800d018:	4630      	mov	r0, r6
 800d01a:	4639      	mov	r1, r7
 800d01c:	f7f3 fa5c 	bl	80004d8 <__aeabi_dmul>
 800d020:	a33b      	add	r3, pc, #236	; (adr r3, 800d110 <__kernel_sin+0x140>)
 800d022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d026:	f7f3 f89f 	bl	8000168 <__aeabi_dsub>
 800d02a:	4632      	mov	r2, r6
 800d02c:	463b      	mov	r3, r7
 800d02e:	f7f3 fa53 	bl	80004d8 <__aeabi_dmul>
 800d032:	a339      	add	r3, pc, #228	; (adr r3, 800d118 <__kernel_sin+0x148>)
 800d034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d038:	f7f3 f898 	bl	800016c <__adddf3>
 800d03c:	4632      	mov	r2, r6
 800d03e:	463b      	mov	r3, r7
 800d040:	f7f3 fa4a 	bl	80004d8 <__aeabi_dmul>
 800d044:	a336      	add	r3, pc, #216	; (adr r3, 800d120 <__kernel_sin+0x150>)
 800d046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04a:	f7f3 f88d 	bl	8000168 <__aeabi_dsub>
 800d04e:	4632      	mov	r2, r6
 800d050:	463b      	mov	r3, r7
 800d052:	f7f3 fa41 	bl	80004d8 <__aeabi_dmul>
 800d056:	a334      	add	r3, pc, #208	; (adr r3, 800d128 <__kernel_sin+0x158>)
 800d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05c:	f7f3 f886 	bl	800016c <__adddf3>
 800d060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d064:	b9dd      	cbnz	r5, 800d09e <__kernel_sin+0xce>
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	4630      	mov	r0, r6
 800d06c:	4639      	mov	r1, r7
 800d06e:	f7f3 fa33 	bl	80004d8 <__aeabi_dmul>
 800d072:	a32f      	add	r3, pc, #188	; (adr r3, 800d130 <__kernel_sin+0x160>)
 800d074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d078:	f7f3 f876 	bl	8000168 <__aeabi_dsub>
 800d07c:	4642      	mov	r2, r8
 800d07e:	464b      	mov	r3, r9
 800d080:	f7f3 fa2a 	bl	80004d8 <__aeabi_dmul>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	4650      	mov	r0, sl
 800d08a:	4621      	mov	r1, r4
 800d08c:	f7f3 f86e 	bl	800016c <__adddf3>
 800d090:	4682      	mov	sl, r0
 800d092:	460c      	mov	r4, r1
 800d094:	4650      	mov	r0, sl
 800d096:	4621      	mov	r1, r4
 800d098:	b006      	add	sp, #24
 800d09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d09e:	2200      	movs	r2, #0
 800d0a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0a4:	4b24      	ldr	r3, [pc, #144]	; (800d138 <__kernel_sin+0x168>)
 800d0a6:	f7f3 fa17 	bl	80004d8 <__aeabi_dmul>
 800d0aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0b2:	4640      	mov	r0, r8
 800d0b4:	4649      	mov	r1, r9
 800d0b6:	f7f3 fa0f 	bl	80004d8 <__aeabi_dmul>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	460b      	mov	r3, r1
 800d0be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0c2:	f7f3 f851 	bl	8000168 <__aeabi_dsub>
 800d0c6:	4632      	mov	r2, r6
 800d0c8:	463b      	mov	r3, r7
 800d0ca:	f7f3 fa05 	bl	80004d8 <__aeabi_dmul>
 800d0ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0d2:	f7f3 f849 	bl	8000168 <__aeabi_dsub>
 800d0d6:	a316      	add	r3, pc, #88	; (adr r3, 800d130 <__kernel_sin+0x160>)
 800d0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0dc:	4606      	mov	r6, r0
 800d0de:	460f      	mov	r7, r1
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	f7f3 f9f8 	bl	80004d8 <__aeabi_dmul>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	4639      	mov	r1, r7
 800d0f0:	f7f3 f83c 	bl	800016c <__adddf3>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4650      	mov	r0, sl
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	f7f3 f834 	bl	8000168 <__aeabi_dsub>
 800d100:	e7c6      	b.n	800d090 <__kernel_sin+0xc0>
 800d102:	bf00      	nop
 800d104:	f3af 8000 	nop.w
 800d108:	5acfd57c 	.word	0x5acfd57c
 800d10c:	3de5d93a 	.word	0x3de5d93a
 800d110:	8a2b9ceb 	.word	0x8a2b9ceb
 800d114:	3e5ae5e6 	.word	0x3e5ae5e6
 800d118:	57b1fe7d 	.word	0x57b1fe7d
 800d11c:	3ec71de3 	.word	0x3ec71de3
 800d120:	19c161d5 	.word	0x19c161d5
 800d124:	3f2a01a0 	.word	0x3f2a01a0
 800d128:	1110f8a6 	.word	0x1110f8a6
 800d12c:	3f811111 	.word	0x3f811111
 800d130:	55555549 	.word	0x55555549
 800d134:	3fc55555 	.word	0x3fc55555
 800d138:	3fe00000 	.word	0x3fe00000

0800d13c <__kernel_cosf>:
 800d13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d140:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800d144:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800d148:	4606      	mov	r6, r0
 800d14a:	4688      	mov	r8, r1
 800d14c:	da03      	bge.n	800d156 <__kernel_cosf+0x1a>
 800d14e:	f7f3 fff5 	bl	800113c <__aeabi_f2iz>
 800d152:	2800      	cmp	r0, #0
 800d154:	d05c      	beq.n	800d210 <__kernel_cosf+0xd4>
 800d156:	4631      	mov	r1, r6
 800d158:	4630      	mov	r0, r6
 800d15a:	f7f3 fe13 	bl	8000d84 <__aeabi_fmul>
 800d15e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d162:	4605      	mov	r5, r0
 800d164:	f7f3 fe0e 	bl	8000d84 <__aeabi_fmul>
 800d168:	492b      	ldr	r1, [pc, #172]	; (800d218 <__kernel_cosf+0xdc>)
 800d16a:	4607      	mov	r7, r0
 800d16c:	4628      	mov	r0, r5
 800d16e:	f7f3 fe09 	bl	8000d84 <__aeabi_fmul>
 800d172:	492a      	ldr	r1, [pc, #168]	; (800d21c <__kernel_cosf+0xe0>)
 800d174:	f7f3 fcfe 	bl	8000b74 <__addsf3>
 800d178:	4629      	mov	r1, r5
 800d17a:	f7f3 fe03 	bl	8000d84 <__aeabi_fmul>
 800d17e:	4928      	ldr	r1, [pc, #160]	; (800d220 <__kernel_cosf+0xe4>)
 800d180:	f7f3 fcf6 	bl	8000b70 <__aeabi_fsub>
 800d184:	4629      	mov	r1, r5
 800d186:	f7f3 fdfd 	bl	8000d84 <__aeabi_fmul>
 800d18a:	4926      	ldr	r1, [pc, #152]	; (800d224 <__kernel_cosf+0xe8>)
 800d18c:	f7f3 fcf2 	bl	8000b74 <__addsf3>
 800d190:	4629      	mov	r1, r5
 800d192:	f7f3 fdf7 	bl	8000d84 <__aeabi_fmul>
 800d196:	4924      	ldr	r1, [pc, #144]	; (800d228 <__kernel_cosf+0xec>)
 800d198:	f7f3 fcea 	bl	8000b70 <__aeabi_fsub>
 800d19c:	4629      	mov	r1, r5
 800d19e:	f7f3 fdf1 	bl	8000d84 <__aeabi_fmul>
 800d1a2:	4922      	ldr	r1, [pc, #136]	; (800d22c <__kernel_cosf+0xf0>)
 800d1a4:	f7f3 fce6 	bl	8000b74 <__addsf3>
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	f7f3 fdeb 	bl	8000d84 <__aeabi_fmul>
 800d1ae:	4629      	mov	r1, r5
 800d1b0:	f7f3 fde8 	bl	8000d84 <__aeabi_fmul>
 800d1b4:	4641      	mov	r1, r8
 800d1b6:	4605      	mov	r5, r0
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f7f3 fde3 	bl	8000d84 <__aeabi_fmul>
 800d1be:	4601      	mov	r1, r0
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	f7f3 fcd5 	bl	8000b70 <__aeabi_fsub>
 800d1c6:	4b1a      	ldr	r3, [pc, #104]	; (800d230 <__kernel_cosf+0xf4>)
 800d1c8:	4605      	mov	r5, r0
 800d1ca:	429c      	cmp	r4, r3
 800d1cc:	dc0a      	bgt.n	800d1e4 <__kernel_cosf+0xa8>
 800d1ce:	4601      	mov	r1, r0
 800d1d0:	4638      	mov	r0, r7
 800d1d2:	f7f3 fccd 	bl	8000b70 <__aeabi_fsub>
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d1dc:	f7f3 fcc8 	bl	8000b70 <__aeabi_fsub>
 800d1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1e4:	4b13      	ldr	r3, [pc, #76]	; (800d234 <__kernel_cosf+0xf8>)
 800d1e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d1ea:	429c      	cmp	r4, r3
 800d1ec:	bfcc      	ite	gt
 800d1ee:	4c12      	ldrgt	r4, [pc, #72]	; (800d238 <__kernel_cosf+0xfc>)
 800d1f0:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	f7f3 fcbb 	bl	8000b70 <__aeabi_fsub>
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	4638      	mov	r0, r7
 800d200:	f7f3 fcb6 	bl	8000b70 <__aeabi_fsub>
 800d204:	4629      	mov	r1, r5
 800d206:	f7f3 fcb3 	bl	8000b70 <__aeabi_fsub>
 800d20a:	4601      	mov	r1, r0
 800d20c:	4630      	mov	r0, r6
 800d20e:	e7e5      	b.n	800d1dc <__kernel_cosf+0xa0>
 800d210:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d214:	e7e4      	b.n	800d1e0 <__kernel_cosf+0xa4>
 800d216:	bf00      	nop
 800d218:	ad47d74e 	.word	0xad47d74e
 800d21c:	310f74f6 	.word	0x310f74f6
 800d220:	3493f27c 	.word	0x3493f27c
 800d224:	37d00d01 	.word	0x37d00d01
 800d228:	3ab60b61 	.word	0x3ab60b61
 800d22c:	3d2aaaab 	.word	0x3d2aaaab
 800d230:	3e999999 	.word	0x3e999999
 800d234:	3f480000 	.word	0x3f480000
 800d238:	3e900000 	.word	0x3e900000

0800d23c <__kernel_rem_pio2f>:
 800d23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d240:	b0db      	sub	sp, #364	; 0x16c
 800d242:	9202      	str	r2, [sp, #8]
 800d244:	9304      	str	r3, [sp, #16]
 800d246:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d248:	4bc5      	ldr	r3, [pc, #788]	; (800d560 <__kernel_rem_pio2f+0x324>)
 800d24a:	9005      	str	r0, [sp, #20]
 800d24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d250:	9100      	str	r1, [sp, #0]
 800d252:	9301      	str	r3, [sp, #4]
 800d254:	9b04      	ldr	r3, [sp, #16]
 800d256:	3b01      	subs	r3, #1
 800d258:	9303      	str	r3, [sp, #12]
 800d25a:	9b02      	ldr	r3, [sp, #8]
 800d25c:	1d1a      	adds	r2, r3, #4
 800d25e:	f2c0 809b 	blt.w	800d398 <__kernel_rem_pio2f+0x15c>
 800d262:	1edc      	subs	r4, r3, #3
 800d264:	bf48      	it	mi
 800d266:	1d1c      	addmi	r4, r3, #4
 800d268:	10e4      	asrs	r4, r4, #3
 800d26a:	2500      	movs	r5, #0
 800d26c:	f04f 0a00 	mov.w	sl, #0
 800d270:	1c67      	adds	r7, r4, #1
 800d272:	00fb      	lsls	r3, r7, #3
 800d274:	9306      	str	r3, [sp, #24]
 800d276:	9b02      	ldr	r3, [sp, #8]
 800d278:	9a03      	ldr	r2, [sp, #12]
 800d27a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800d27e:	9b01      	ldr	r3, [sp, #4]
 800d280:	1aa6      	subs	r6, r4, r2
 800d282:	eb03 0802 	add.w	r8, r3, r2
 800d286:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800d288:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800d28c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800d290:	4545      	cmp	r5, r8
 800d292:	f340 8083 	ble.w	800d39c <__kernel_rem_pio2f+0x160>
 800d296:	f04f 0800 	mov.w	r8, #0
 800d29a:	f04f 0b00 	mov.w	fp, #0
 800d29e:	9b04      	ldr	r3, [sp, #16]
 800d2a0:	aa1e      	add	r2, sp, #120	; 0x78
 800d2a2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d2a6:	ab46      	add	r3, sp, #280	; 0x118
 800d2a8:	9a01      	ldr	r2, [sp, #4]
 800d2aa:	4590      	cmp	r8, r2
 800d2ac:	f340 809c 	ble.w	800d3e8 <__kernel_rem_pio2f+0x1ac>
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	aa0a      	add	r2, sp, #40	; 0x28
 800d2b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2b8:	9308      	str	r3, [sp, #32]
 800d2ba:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800d2bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d2c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d2c4:	9307      	str	r3, [sp, #28]
 800d2c6:	ad0a      	add	r5, sp, #40	; 0x28
 800d2c8:	462e      	mov	r6, r5
 800d2ca:	46c3      	mov	fp, r8
 800d2cc:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800d2d0:	ab5a      	add	r3, sp, #360	; 0x168
 800d2d2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800d2d6:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800d2da:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800d2de:	f1bb 0f00 	cmp.w	fp, #0
 800d2e2:	f300 8086 	bgt.w	800d3f2 <__kernel_rem_pio2f+0x1b6>
 800d2e6:	4639      	mov	r1, r7
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f000 fed9 	bl	800e0a0 <scalbnf>
 800d2ee:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	f7f3 fd46 	bl	8000d84 <__aeabi_fmul>
 800d2f8:	f000 fe90 	bl	800e01c <floorf>
 800d2fc:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800d300:	f7f3 fd40 	bl	8000d84 <__aeabi_fmul>
 800d304:	4601      	mov	r1, r0
 800d306:	4620      	mov	r0, r4
 800d308:	f7f3 fc32 	bl	8000b70 <__aeabi_fsub>
 800d30c:	4604      	mov	r4, r0
 800d30e:	f7f3 ff15 	bl	800113c <__aeabi_f2iz>
 800d312:	4606      	mov	r6, r0
 800d314:	f7f3 fce2 	bl	8000cdc <__aeabi_i2f>
 800d318:	4601      	mov	r1, r0
 800d31a:	4620      	mov	r0, r4
 800d31c:	f7f3 fc28 	bl	8000b70 <__aeabi_fsub>
 800d320:	2f00      	cmp	r7, #0
 800d322:	4681      	mov	r9, r0
 800d324:	f340 8084 	ble.w	800d430 <__kernel_rem_pio2f+0x1f4>
 800d328:	f108 32ff 	add.w	r2, r8, #4294967295
 800d32c:	ab0a      	add	r3, sp, #40	; 0x28
 800d32e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800d332:	f1c7 0108 	rsb	r1, r7, #8
 800d336:	fa44 f301 	asr.w	r3, r4, r1
 800d33a:	441e      	add	r6, r3
 800d33c:	408b      	lsls	r3, r1
 800d33e:	1ae4      	subs	r4, r4, r3
 800d340:	f1c7 0007 	rsb	r0, r7, #7
 800d344:	ab0a      	add	r3, sp, #40	; 0x28
 800d346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d34a:	4104      	asrs	r4, r0
 800d34c:	2c00      	cmp	r4, #0
 800d34e:	dd7e      	ble.n	800d44e <__kernel_rem_pio2f+0x212>
 800d350:	2200      	movs	r2, #0
 800d352:	4692      	mov	sl, r2
 800d354:	3601      	adds	r6, #1
 800d356:	4590      	cmp	r8, r2
 800d358:	f300 80b0 	bgt.w	800d4bc <__kernel_rem_pio2f+0x280>
 800d35c:	2f00      	cmp	r7, #0
 800d35e:	dd05      	ble.n	800d36c <__kernel_rem_pio2f+0x130>
 800d360:	2f01      	cmp	r7, #1
 800d362:	f000 80bd 	beq.w	800d4e0 <__kernel_rem_pio2f+0x2a4>
 800d366:	2f02      	cmp	r7, #2
 800d368:	f000 80c5 	beq.w	800d4f6 <__kernel_rem_pio2f+0x2ba>
 800d36c:	2c02      	cmp	r4, #2
 800d36e:	d16e      	bne.n	800d44e <__kernel_rem_pio2f+0x212>
 800d370:	4649      	mov	r1, r9
 800d372:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d376:	f7f3 fbfb 	bl	8000b70 <__aeabi_fsub>
 800d37a:	4681      	mov	r9, r0
 800d37c:	f1ba 0f00 	cmp.w	sl, #0
 800d380:	d065      	beq.n	800d44e <__kernel_rem_pio2f+0x212>
 800d382:	4639      	mov	r1, r7
 800d384:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d388:	f000 fe8a 	bl	800e0a0 <scalbnf>
 800d38c:	4601      	mov	r1, r0
 800d38e:	4648      	mov	r0, r9
 800d390:	f7f3 fbee 	bl	8000b70 <__aeabi_fsub>
 800d394:	4681      	mov	r9, r0
 800d396:	e05a      	b.n	800d44e <__kernel_rem_pio2f+0x212>
 800d398:	2400      	movs	r4, #0
 800d39a:	e766      	b.n	800d26a <__kernel_rem_pio2f+0x2e>
 800d39c:	42ee      	cmn	r6, r5
 800d39e:	d407      	bmi.n	800d3b0 <__kernel_rem_pio2f+0x174>
 800d3a0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d3a4:	f7f3 fc9a 	bl	8000cdc <__aeabi_i2f>
 800d3a8:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800d3ac:	3501      	adds	r5, #1
 800d3ae:	e76f      	b.n	800d290 <__kernel_rem_pio2f+0x54>
 800d3b0:	4650      	mov	r0, sl
 800d3b2:	e7f9      	b.n	800d3a8 <__kernel_rem_pio2f+0x16c>
 800d3b4:	9b05      	ldr	r3, [sp, #20]
 800d3b6:	f8da 1000 	ldr.w	r1, [sl]
 800d3ba:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800d3be:	f7f3 fce1 	bl	8000d84 <__aeabi_fmul>
 800d3c2:	4601      	mov	r1, r0
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	f7f3 fbd5 	bl	8000b74 <__addsf3>
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	f109 0901 	add.w	r9, r9, #1
 800d3d0:	ab46      	add	r3, sp, #280	; 0x118
 800d3d2:	9a03      	ldr	r2, [sp, #12]
 800d3d4:	f1aa 0a04 	sub.w	sl, sl, #4
 800d3d8:	4591      	cmp	r9, r2
 800d3da:	ddeb      	ble.n	800d3b4 <__kernel_rem_pio2f+0x178>
 800d3dc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d3e0:	3504      	adds	r5, #4
 800d3e2:	f108 0801 	add.w	r8, r8, #1
 800d3e6:	e75f      	b.n	800d2a8 <__kernel_rem_pio2f+0x6c>
 800d3e8:	46aa      	mov	sl, r5
 800d3ea:	465e      	mov	r6, fp
 800d3ec:	f04f 0900 	mov.w	r9, #0
 800d3f0:	e7ef      	b.n	800d3d2 <__kernel_rem_pio2f+0x196>
 800d3f2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f7f3 fcc4 	bl	8000d84 <__aeabi_fmul>
 800d3fc:	f7f3 fe9e 	bl	800113c <__aeabi_f2iz>
 800d400:	f7f3 fc6c 	bl	8000cdc <__aeabi_i2f>
 800d404:	4649      	mov	r1, r9
 800d406:	9009      	str	r0, [sp, #36]	; 0x24
 800d408:	f7f3 fcbc 	bl	8000d84 <__aeabi_fmul>
 800d40c:	4601      	mov	r1, r0
 800d40e:	4620      	mov	r0, r4
 800d410:	f7f3 fbae 	bl	8000b70 <__aeabi_fsub>
 800d414:	f7f3 fe92 	bl	800113c <__aeabi_f2iz>
 800d418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d41a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d41e:	f846 0b04 	str.w	r0, [r6], #4
 800d422:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800d426:	4618      	mov	r0, r3
 800d428:	f7f3 fba4 	bl	8000b74 <__addsf3>
 800d42c:	4604      	mov	r4, r0
 800d42e:	e756      	b.n	800d2de <__kernel_rem_pio2f+0xa2>
 800d430:	d106      	bne.n	800d440 <__kernel_rem_pio2f+0x204>
 800d432:	f108 33ff 	add.w	r3, r8, #4294967295
 800d436:	aa0a      	add	r2, sp, #40	; 0x28
 800d438:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d43c:	1224      	asrs	r4, r4, #8
 800d43e:	e785      	b.n	800d34c <__kernel_rem_pio2f+0x110>
 800d440:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d444:	f7f3 fe50 	bl	80010e8 <__aeabi_fcmpge>
 800d448:	4604      	mov	r4, r0
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d134      	bne.n	800d4b8 <__kernel_rem_pio2f+0x27c>
 800d44e:	2100      	movs	r1, #0
 800d450:	4648      	mov	r0, r9
 800d452:	f7f3 fe2b 	bl	80010ac <__aeabi_fcmpeq>
 800d456:	2800      	cmp	r0, #0
 800d458:	f000 809a 	beq.w	800d590 <__kernel_rem_pio2f+0x354>
 800d45c:	f108 35ff 	add.w	r5, r8, #4294967295
 800d460:	462b      	mov	r3, r5
 800d462:	2200      	movs	r2, #0
 800d464:	9901      	ldr	r1, [sp, #4]
 800d466:	428b      	cmp	r3, r1
 800d468:	da4d      	bge.n	800d506 <__kernel_rem_pio2f+0x2ca>
 800d46a:	2a00      	cmp	r2, #0
 800d46c:	d07c      	beq.n	800d568 <__kernel_rem_pio2f+0x32c>
 800d46e:	ab0a      	add	r3, sp, #40	; 0x28
 800d470:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d474:	3f08      	subs	r7, #8
 800d476:	2b00      	cmp	r3, #0
 800d478:	f000 8088 	beq.w	800d58c <__kernel_rem_pio2f+0x350>
 800d47c:	4639      	mov	r1, r7
 800d47e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d482:	f000 fe0d 	bl	800e0a0 <scalbnf>
 800d486:	46aa      	mov	sl, r5
 800d488:	4681      	mov	r9, r0
 800d48a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800d48e:	af46      	add	r7, sp, #280	; 0x118
 800d490:	f1ba 0f00 	cmp.w	sl, #0
 800d494:	f280 80b1 	bge.w	800d5fa <__kernel_rem_pio2f+0x3be>
 800d498:	46a9      	mov	r9, r5
 800d49a:	f04f 0a00 	mov.w	sl, #0
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f1b9 0f00 	cmp.w	r9, #0
 800d4a4:	f2c0 80db 	blt.w	800d65e <__kernel_rem_pio2f+0x422>
 800d4a8:	a946      	add	r1, sp, #280	; 0x118
 800d4aa:	4617      	mov	r7, r2
 800d4ac:	f04f 0800 	mov.w	r8, #0
 800d4b0:	4b2c      	ldr	r3, [pc, #176]	; (800d564 <__kernel_rem_pio2f+0x328>)
 800d4b2:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800d4b6:	e0c3      	b.n	800d640 <__kernel_rem_pio2f+0x404>
 800d4b8:	2402      	movs	r4, #2
 800d4ba:	e749      	b.n	800d350 <__kernel_rem_pio2f+0x114>
 800d4bc:	682b      	ldr	r3, [r5, #0]
 800d4be:	f1ba 0f00 	cmp.w	sl, #0
 800d4c2:	d108      	bne.n	800d4d6 <__kernel_rem_pio2f+0x29a>
 800d4c4:	b11b      	cbz	r3, 800d4ce <__kernel_rem_pio2f+0x292>
 800d4c6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d4ca:	602b      	str	r3, [r5, #0]
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	469a      	mov	sl, r3
 800d4d0:	3201      	adds	r2, #1
 800d4d2:	3504      	adds	r5, #4
 800d4d4:	e73f      	b.n	800d356 <__kernel_rem_pio2f+0x11a>
 800d4d6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d4da:	602b      	str	r3, [r5, #0]
 800d4dc:	4653      	mov	r3, sl
 800d4de:	e7f6      	b.n	800d4ce <__kernel_rem_pio2f+0x292>
 800d4e0:	f108 32ff 	add.w	r2, r8, #4294967295
 800d4e4:	ab0a      	add	r3, sp, #40	; 0x28
 800d4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ee:	a90a      	add	r1, sp, #40	; 0x28
 800d4f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d4f4:	e73a      	b.n	800d36c <__kernel_rem_pio2f+0x130>
 800d4f6:	f108 32ff 	add.w	r2, r8, #4294967295
 800d4fa:	ab0a      	add	r3, sp, #40	; 0x28
 800d4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d504:	e7f3      	b.n	800d4ee <__kernel_rem_pio2f+0x2b2>
 800d506:	a90a      	add	r1, sp, #40	; 0x28
 800d508:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d50c:	3b01      	subs	r3, #1
 800d50e:	430a      	orrs	r2, r1
 800d510:	e7a8      	b.n	800d464 <__kernel_rem_pio2f+0x228>
 800d512:	3301      	adds	r3, #1
 800d514:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d518:	2900      	cmp	r1, #0
 800d51a:	d0fa      	beq.n	800d512 <__kernel_rem_pio2f+0x2d6>
 800d51c:	9a04      	ldr	r2, [sp, #16]
 800d51e:	f108 0501 	add.w	r5, r8, #1
 800d522:	eb08 0402 	add.w	r4, r8, r2
 800d526:	aa1e      	add	r2, sp, #120	; 0x78
 800d528:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d52c:	4498      	add	r8, r3
 800d52e:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800d532:	45a8      	cmp	r8, r5
 800d534:	f6ff aec7 	blt.w	800d2c6 <__kernel_rem_pio2f+0x8a>
 800d538:	9b07      	ldr	r3, [sp, #28]
 800d53a:	46a3      	mov	fp, r4
 800d53c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d540:	f7f3 fbcc 	bl	8000cdc <__aeabi_i2f>
 800d544:	f04f 0a00 	mov.w	sl, #0
 800d548:	2600      	movs	r6, #0
 800d54a:	f84b 0b04 	str.w	r0, [fp], #4
 800d54e:	9b03      	ldr	r3, [sp, #12]
 800d550:	459a      	cmp	sl, r3
 800d552:	dd0c      	ble.n	800d56e <__kernel_rem_pio2f+0x332>
 800d554:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800d558:	465c      	mov	r4, fp
 800d55a:	3501      	adds	r5, #1
 800d55c:	e7e9      	b.n	800d532 <__kernel_rem_pio2f+0x2f6>
 800d55e:	bf00      	nop
 800d560:	0800f034 	.word	0x0800f034
 800d564:	0800f008 	.word	0x0800f008
 800d568:	2301      	movs	r3, #1
 800d56a:	9a08      	ldr	r2, [sp, #32]
 800d56c:	e7d2      	b.n	800d514 <__kernel_rem_pio2f+0x2d8>
 800d56e:	9b05      	ldr	r3, [sp, #20]
 800d570:	f854 0904 	ldr.w	r0, [r4], #-4
 800d574:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800d578:	f7f3 fc04 	bl	8000d84 <__aeabi_fmul>
 800d57c:	4601      	mov	r1, r0
 800d57e:	4630      	mov	r0, r6
 800d580:	f7f3 faf8 	bl	8000b74 <__addsf3>
 800d584:	f10a 0a01 	add.w	sl, sl, #1
 800d588:	4606      	mov	r6, r0
 800d58a:	e7e0      	b.n	800d54e <__kernel_rem_pio2f+0x312>
 800d58c:	3d01      	subs	r5, #1
 800d58e:	e76e      	b.n	800d46e <__kernel_rem_pio2f+0x232>
 800d590:	9b06      	ldr	r3, [sp, #24]
 800d592:	9a02      	ldr	r2, [sp, #8]
 800d594:	4648      	mov	r0, r9
 800d596:	1a99      	subs	r1, r3, r2
 800d598:	f000 fd82 	bl	800e0a0 <scalbnf>
 800d59c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	f7f3 fda1 	bl	80010e8 <__aeabi_fcmpge>
 800d5a6:	b300      	cbz	r0, 800d5ea <__kernel_rem_pio2f+0x3ae>
 800d5a8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	f7f3 fbe9 	bl	8000d84 <__aeabi_fmul>
 800d5b2:	f7f3 fdc3 	bl	800113c <__aeabi_f2iz>
 800d5b6:	f7f3 fb91 	bl	8000cdc <__aeabi_i2f>
 800d5ba:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d5be:	4681      	mov	r9, r0
 800d5c0:	f7f3 fbe0 	bl	8000d84 <__aeabi_fmul>
 800d5c4:	4601      	mov	r1, r0
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f7f3 fad2 	bl	8000b70 <__aeabi_fsub>
 800d5cc:	f7f3 fdb6 	bl	800113c <__aeabi_f2iz>
 800d5d0:	ab0a      	add	r3, sp, #40	; 0x28
 800d5d2:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d5d6:	4648      	mov	r0, r9
 800d5d8:	f7f3 fdb0 	bl	800113c <__aeabi_f2iz>
 800d5dc:	f108 0501 	add.w	r5, r8, #1
 800d5e0:	ab0a      	add	r3, sp, #40	; 0x28
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800d5e8:	e748      	b.n	800d47c <__kernel_rem_pio2f+0x240>
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	f7f3 fda6 	bl	800113c <__aeabi_f2iz>
 800d5f0:	ab0a      	add	r3, sp, #40	; 0x28
 800d5f2:	4645      	mov	r5, r8
 800d5f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d5f8:	e740      	b.n	800d47c <__kernel_rem_pio2f+0x240>
 800d5fa:	ab0a      	add	r3, sp, #40	; 0x28
 800d5fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d600:	f7f3 fb6c 	bl	8000cdc <__aeabi_i2f>
 800d604:	4649      	mov	r1, r9
 800d606:	f7f3 fbbd 	bl	8000d84 <__aeabi_fmul>
 800d60a:	4641      	mov	r1, r8
 800d60c:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800d610:	4648      	mov	r0, r9
 800d612:	f7f3 fbb7 	bl	8000d84 <__aeabi_fmul>
 800d616:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d61a:	4681      	mov	r9, r0
 800d61c:	e738      	b.n	800d490 <__kernel_rem_pio2f+0x254>
 800d61e:	f853 0b04 	ldr.w	r0, [r3], #4
 800d622:	f85b 1b04 	ldr.w	r1, [fp], #4
 800d626:	9203      	str	r2, [sp, #12]
 800d628:	9302      	str	r3, [sp, #8]
 800d62a:	f7f3 fbab 	bl	8000d84 <__aeabi_fmul>
 800d62e:	4601      	mov	r1, r0
 800d630:	4638      	mov	r0, r7
 800d632:	f7f3 fa9f 	bl	8000b74 <__addsf3>
 800d636:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d63a:	4607      	mov	r7, r0
 800d63c:	f108 0801 	add.w	r8, r8, #1
 800d640:	9901      	ldr	r1, [sp, #4]
 800d642:	4588      	cmp	r8, r1
 800d644:	dc01      	bgt.n	800d64a <__kernel_rem_pio2f+0x40e>
 800d646:	45c2      	cmp	sl, r8
 800d648:	dae9      	bge.n	800d61e <__kernel_rem_pio2f+0x3e2>
 800d64a:	ab5a      	add	r3, sp, #360	; 0x168
 800d64c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d650:	f843 7ca0 	str.w	r7, [r3, #-160]
 800d654:	f109 39ff 	add.w	r9, r9, #4294967295
 800d658:	f10a 0a01 	add.w	sl, sl, #1
 800d65c:	e720      	b.n	800d4a0 <__kernel_rem_pio2f+0x264>
 800d65e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d660:	2b02      	cmp	r3, #2
 800d662:	dc07      	bgt.n	800d674 <__kernel_rem_pio2f+0x438>
 800d664:	2b00      	cmp	r3, #0
 800d666:	dc4d      	bgt.n	800d704 <__kernel_rem_pio2f+0x4c8>
 800d668:	d02e      	beq.n	800d6c8 <__kernel_rem_pio2f+0x48c>
 800d66a:	f006 0007 	and.w	r0, r6, #7
 800d66e:	b05b      	add	sp, #364	; 0x16c
 800d670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d674:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d676:	2b03      	cmp	r3, #3
 800d678:	d1f7      	bne.n	800d66a <__kernel_rem_pio2f+0x42e>
 800d67a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800d67e:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800d682:	46b8      	mov	r8, r7
 800d684:	46aa      	mov	sl, r5
 800d686:	f1ba 0f00 	cmp.w	sl, #0
 800d68a:	dc48      	bgt.n	800d71e <__kernel_rem_pio2f+0x4e2>
 800d68c:	46a9      	mov	r9, r5
 800d68e:	f1b9 0f01 	cmp.w	r9, #1
 800d692:	dc5f      	bgt.n	800d754 <__kernel_rem_pio2f+0x518>
 800d694:	2000      	movs	r0, #0
 800d696:	2d01      	cmp	r5, #1
 800d698:	dc75      	bgt.n	800d786 <__kernel_rem_pio2f+0x54a>
 800d69a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800d69c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800d69e:	2c00      	cmp	r4, #0
 800d6a0:	d177      	bne.n	800d792 <__kernel_rem_pio2f+0x556>
 800d6a2:	9900      	ldr	r1, [sp, #0]
 800d6a4:	600a      	str	r2, [r1, #0]
 800d6a6:	460a      	mov	r2, r1
 800d6a8:	604b      	str	r3, [r1, #4]
 800d6aa:	6090      	str	r0, [r2, #8]
 800d6ac:	e7dd      	b.n	800d66a <__kernel_rem_pio2f+0x42e>
 800d6ae:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800d6b2:	f7f3 fa5f 	bl	8000b74 <__addsf3>
 800d6b6:	3d01      	subs	r5, #1
 800d6b8:	2d00      	cmp	r5, #0
 800d6ba:	daf8      	bge.n	800d6ae <__kernel_rem_pio2f+0x472>
 800d6bc:	b10c      	cbz	r4, 800d6c2 <__kernel_rem_pio2f+0x486>
 800d6be:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d6c2:	9b00      	ldr	r3, [sp, #0]
 800d6c4:	6018      	str	r0, [r3, #0]
 800d6c6:	e7d0      	b.n	800d66a <__kernel_rem_pio2f+0x42e>
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	af32      	add	r7, sp, #200	; 0xc8
 800d6cc:	e7f4      	b.n	800d6b8 <__kernel_rem_pio2f+0x47c>
 800d6ce:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800d6d2:	f7f3 fa4f 	bl	8000b74 <__addsf3>
 800d6d6:	3f01      	subs	r7, #1
 800d6d8:	2f00      	cmp	r7, #0
 800d6da:	daf8      	bge.n	800d6ce <__kernel_rem_pio2f+0x492>
 800d6dc:	b1bc      	cbz	r4, 800d70e <__kernel_rem_pio2f+0x4d2>
 800d6de:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800d6e2:	9a00      	ldr	r2, [sp, #0]
 800d6e4:	4601      	mov	r1, r0
 800d6e6:	6013      	str	r3, [r2, #0]
 800d6e8:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800d6ea:	f7f3 fa41 	bl	8000b70 <__aeabi_fsub>
 800d6ee:	2701      	movs	r7, #1
 800d6f0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800d6f4:	42bd      	cmp	r5, r7
 800d6f6:	da0c      	bge.n	800d712 <__kernel_rem_pio2f+0x4d6>
 800d6f8:	b10c      	cbz	r4, 800d6fe <__kernel_rem_pio2f+0x4c2>
 800d6fa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d6fe:	9b00      	ldr	r3, [sp, #0]
 800d700:	6058      	str	r0, [r3, #4]
 800d702:	e7b2      	b.n	800d66a <__kernel_rem_pio2f+0x42e>
 800d704:	462f      	mov	r7, r5
 800d706:	2000      	movs	r0, #0
 800d708:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800d70c:	e7e4      	b.n	800d6d8 <__kernel_rem_pio2f+0x49c>
 800d70e:	4603      	mov	r3, r0
 800d710:	e7e7      	b.n	800d6e2 <__kernel_rem_pio2f+0x4a6>
 800d712:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800d716:	f7f3 fa2d 	bl	8000b74 <__addsf3>
 800d71a:	3701      	adds	r7, #1
 800d71c:	e7ea      	b.n	800d6f4 <__kernel_rem_pio2f+0x4b8>
 800d71e:	f8d8 3000 	ldr.w	r3, [r8]
 800d722:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800d726:	4619      	mov	r1, r3
 800d728:	4610      	mov	r0, r2
 800d72a:	9302      	str	r3, [sp, #8]
 800d72c:	9201      	str	r2, [sp, #4]
 800d72e:	f7f3 fa21 	bl	8000b74 <__addsf3>
 800d732:	9a01      	ldr	r2, [sp, #4]
 800d734:	4601      	mov	r1, r0
 800d736:	4681      	mov	r9, r0
 800d738:	4610      	mov	r0, r2
 800d73a:	f7f3 fa19 	bl	8000b70 <__aeabi_fsub>
 800d73e:	9b02      	ldr	r3, [sp, #8]
 800d740:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d744:	4619      	mov	r1, r3
 800d746:	f7f3 fa15 	bl	8000b74 <__addsf3>
 800d74a:	f848 0904 	str.w	r0, [r8], #-4
 800d74e:	f8c8 9000 	str.w	r9, [r8]
 800d752:	e798      	b.n	800d686 <__kernel_rem_pio2f+0x44a>
 800d754:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800d758:	f8d7 a000 	ldr.w	sl, [r7]
 800d75c:	4618      	mov	r0, r3
 800d75e:	4651      	mov	r1, sl
 800d760:	9301      	str	r3, [sp, #4]
 800d762:	f7f3 fa07 	bl	8000b74 <__addsf3>
 800d766:	9b01      	ldr	r3, [sp, #4]
 800d768:	4601      	mov	r1, r0
 800d76a:	4680      	mov	r8, r0
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7f3 f9ff 	bl	8000b70 <__aeabi_fsub>
 800d772:	4651      	mov	r1, sl
 800d774:	f7f3 f9fe 	bl	8000b74 <__addsf3>
 800d778:	f847 0904 	str.w	r0, [r7], #-4
 800d77c:	f109 39ff 	add.w	r9, r9, #4294967295
 800d780:	f8c7 8000 	str.w	r8, [r7]
 800d784:	e783      	b.n	800d68e <__kernel_rem_pio2f+0x452>
 800d786:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800d78a:	f7f3 f9f3 	bl	8000b74 <__addsf3>
 800d78e:	3d01      	subs	r5, #1
 800d790:	e781      	b.n	800d696 <__kernel_rem_pio2f+0x45a>
 800d792:	9900      	ldr	r1, [sp, #0]
 800d794:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800d798:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d79c:	600a      	str	r2, [r1, #0]
 800d79e:	604b      	str	r3, [r1, #4]
 800d7a0:	460a      	mov	r2, r1
 800d7a2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d7a6:	e780      	b.n	800d6aa <__kernel_rem_pio2f+0x46e>

0800d7a8 <__kernel_sinf>:
 800d7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7ac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d7b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	460f      	mov	r7, r1
 800d7b8:	4691      	mov	r9, r2
 800d7ba:	da03      	bge.n	800d7c4 <__kernel_sinf+0x1c>
 800d7bc:	f7f3 fcbe 	bl	800113c <__aeabi_f2iz>
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	d035      	beq.n	800d830 <__kernel_sinf+0x88>
 800d7c4:	4621      	mov	r1, r4
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f7f3 fadc 	bl	8000d84 <__aeabi_fmul>
 800d7cc:	4605      	mov	r5, r0
 800d7ce:	4601      	mov	r1, r0
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f7f3 fad7 	bl	8000d84 <__aeabi_fmul>
 800d7d6:	4929      	ldr	r1, [pc, #164]	; (800d87c <__kernel_sinf+0xd4>)
 800d7d8:	4606      	mov	r6, r0
 800d7da:	4628      	mov	r0, r5
 800d7dc:	f7f3 fad2 	bl	8000d84 <__aeabi_fmul>
 800d7e0:	4927      	ldr	r1, [pc, #156]	; (800d880 <__kernel_sinf+0xd8>)
 800d7e2:	f7f3 f9c5 	bl	8000b70 <__aeabi_fsub>
 800d7e6:	4629      	mov	r1, r5
 800d7e8:	f7f3 facc 	bl	8000d84 <__aeabi_fmul>
 800d7ec:	4925      	ldr	r1, [pc, #148]	; (800d884 <__kernel_sinf+0xdc>)
 800d7ee:	f7f3 f9c1 	bl	8000b74 <__addsf3>
 800d7f2:	4629      	mov	r1, r5
 800d7f4:	f7f3 fac6 	bl	8000d84 <__aeabi_fmul>
 800d7f8:	4923      	ldr	r1, [pc, #140]	; (800d888 <__kernel_sinf+0xe0>)
 800d7fa:	f7f3 f9b9 	bl	8000b70 <__aeabi_fsub>
 800d7fe:	4629      	mov	r1, r5
 800d800:	f7f3 fac0 	bl	8000d84 <__aeabi_fmul>
 800d804:	4921      	ldr	r1, [pc, #132]	; (800d88c <__kernel_sinf+0xe4>)
 800d806:	f7f3 f9b5 	bl	8000b74 <__addsf3>
 800d80a:	4680      	mov	r8, r0
 800d80c:	f1b9 0f00 	cmp.w	r9, #0
 800d810:	d111      	bne.n	800d836 <__kernel_sinf+0x8e>
 800d812:	4601      	mov	r1, r0
 800d814:	4628      	mov	r0, r5
 800d816:	f7f3 fab5 	bl	8000d84 <__aeabi_fmul>
 800d81a:	491d      	ldr	r1, [pc, #116]	; (800d890 <__kernel_sinf+0xe8>)
 800d81c:	f7f3 f9a8 	bl	8000b70 <__aeabi_fsub>
 800d820:	4631      	mov	r1, r6
 800d822:	f7f3 faaf 	bl	8000d84 <__aeabi_fmul>
 800d826:	4601      	mov	r1, r0
 800d828:	4620      	mov	r0, r4
 800d82a:	f7f3 f9a3 	bl	8000b74 <__addsf3>
 800d82e:	4604      	mov	r4, r0
 800d830:	4620      	mov	r0, r4
 800d832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d836:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d83a:	4638      	mov	r0, r7
 800d83c:	f7f3 faa2 	bl	8000d84 <__aeabi_fmul>
 800d840:	4641      	mov	r1, r8
 800d842:	4681      	mov	r9, r0
 800d844:	4630      	mov	r0, r6
 800d846:	f7f3 fa9d 	bl	8000d84 <__aeabi_fmul>
 800d84a:	4601      	mov	r1, r0
 800d84c:	4648      	mov	r0, r9
 800d84e:	f7f3 f98f 	bl	8000b70 <__aeabi_fsub>
 800d852:	4629      	mov	r1, r5
 800d854:	f7f3 fa96 	bl	8000d84 <__aeabi_fmul>
 800d858:	4639      	mov	r1, r7
 800d85a:	f7f3 f989 	bl	8000b70 <__aeabi_fsub>
 800d85e:	490c      	ldr	r1, [pc, #48]	; (800d890 <__kernel_sinf+0xe8>)
 800d860:	4605      	mov	r5, r0
 800d862:	4630      	mov	r0, r6
 800d864:	f7f3 fa8e 	bl	8000d84 <__aeabi_fmul>
 800d868:	4601      	mov	r1, r0
 800d86a:	4628      	mov	r0, r5
 800d86c:	f7f3 f982 	bl	8000b74 <__addsf3>
 800d870:	4601      	mov	r1, r0
 800d872:	4620      	mov	r0, r4
 800d874:	f7f3 f97c 	bl	8000b70 <__aeabi_fsub>
 800d878:	e7d9      	b.n	800d82e <__kernel_sinf+0x86>
 800d87a:	bf00      	nop
 800d87c:	2f2ec9d3 	.word	0x2f2ec9d3
 800d880:	32d72f34 	.word	0x32d72f34
 800d884:	3638ef1b 	.word	0x3638ef1b
 800d888:	39500d01 	.word	0x39500d01
 800d88c:	3c088889 	.word	0x3c088889
 800d890:	3e2aaaab 	.word	0x3e2aaaab

0800d894 <__kernel_tanf>:
 800d894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d898:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 800d89c:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	460e      	mov	r6, r1
 800d8a4:	4690      	mov	r8, r2
 800d8a6:	4607      	mov	r7, r0
 800d8a8:	da1b      	bge.n	800d8e2 <__kernel_tanf+0x4e>
 800d8aa:	f7f3 fc47 	bl	800113c <__aeabi_f2iz>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d12f      	bne.n	800d912 <__kernel_tanf+0x7e>
 800d8b2:	f108 0301 	add.w	r3, r8, #1
 800d8b6:	ea53 030a 	orrs.w	r3, r3, sl
 800d8ba:	d10c      	bne.n	800d8d6 <__kernel_tanf+0x42>
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f7fe f849 	bl	800b954 <fabsf>
 800d8c2:	4601      	mov	r1, r0
 800d8c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d8c8:	f7f3 fb10 	bl	8000eec <__aeabi_fdiv>
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	b003      	add	sp, #12
 800d8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d6:	f1b8 0f01 	cmp.w	r8, #1
 800d8da:	d0f8      	beq.n	800d8ce <__kernel_tanf+0x3a>
 800d8dc:	4621      	mov	r1, r4
 800d8de:	4872      	ldr	r0, [pc, #456]	; (800daa8 <__kernel_tanf+0x214>)
 800d8e0:	e7f2      	b.n	800d8c8 <__kernel_tanf+0x34>
 800d8e2:	4b72      	ldr	r3, [pc, #456]	; (800daac <__kernel_tanf+0x218>)
 800d8e4:	459a      	cmp	sl, r3
 800d8e6:	db14      	blt.n	800d912 <__kernel_tanf+0x7e>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	bfbe      	ittt	lt
 800d8ec:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 800d8f0:	4604      	movlt	r4, r0
 800d8f2:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 800d8f6:	486e      	ldr	r0, [pc, #440]	; (800dab0 <__kernel_tanf+0x21c>)
 800d8f8:	4621      	mov	r1, r4
 800d8fa:	f7f3 f939 	bl	8000b70 <__aeabi_fsub>
 800d8fe:	4604      	mov	r4, r0
 800d900:	4631      	mov	r1, r6
 800d902:	486c      	ldr	r0, [pc, #432]	; (800dab4 <__kernel_tanf+0x220>)
 800d904:	f7f3 f934 	bl	8000b70 <__aeabi_fsub>
 800d908:	4621      	mov	r1, r4
 800d90a:	f7f3 f933 	bl	8000b74 <__addsf3>
 800d90e:	2600      	movs	r6, #0
 800d910:	4604      	mov	r4, r0
 800d912:	4621      	mov	r1, r4
 800d914:	4620      	mov	r0, r4
 800d916:	f7f3 fa35 	bl	8000d84 <__aeabi_fmul>
 800d91a:	4601      	mov	r1, r0
 800d91c:	4681      	mov	r9, r0
 800d91e:	f7f3 fa31 	bl	8000d84 <__aeabi_fmul>
 800d922:	4649      	mov	r1, r9
 800d924:	4605      	mov	r5, r0
 800d926:	4620      	mov	r0, r4
 800d928:	f7f3 fa2c 	bl	8000d84 <__aeabi_fmul>
 800d92c:	4962      	ldr	r1, [pc, #392]	; (800dab8 <__kernel_tanf+0x224>)
 800d92e:	4683      	mov	fp, r0
 800d930:	4628      	mov	r0, r5
 800d932:	f7f3 fa27 	bl	8000d84 <__aeabi_fmul>
 800d936:	4961      	ldr	r1, [pc, #388]	; (800dabc <__kernel_tanf+0x228>)
 800d938:	f7f3 f91c 	bl	8000b74 <__addsf3>
 800d93c:	4629      	mov	r1, r5
 800d93e:	f7f3 fa21 	bl	8000d84 <__aeabi_fmul>
 800d942:	495f      	ldr	r1, [pc, #380]	; (800dac0 <__kernel_tanf+0x22c>)
 800d944:	f7f3 f916 	bl	8000b74 <__addsf3>
 800d948:	4629      	mov	r1, r5
 800d94a:	f7f3 fa1b 	bl	8000d84 <__aeabi_fmul>
 800d94e:	495d      	ldr	r1, [pc, #372]	; (800dac4 <__kernel_tanf+0x230>)
 800d950:	f7f3 f910 	bl	8000b74 <__addsf3>
 800d954:	4629      	mov	r1, r5
 800d956:	f7f3 fa15 	bl	8000d84 <__aeabi_fmul>
 800d95a:	495b      	ldr	r1, [pc, #364]	; (800dac8 <__kernel_tanf+0x234>)
 800d95c:	f7f3 f90a 	bl	8000b74 <__addsf3>
 800d960:	4629      	mov	r1, r5
 800d962:	f7f3 fa0f 	bl	8000d84 <__aeabi_fmul>
 800d966:	4959      	ldr	r1, [pc, #356]	; (800dacc <__kernel_tanf+0x238>)
 800d968:	f7f3 f904 	bl	8000b74 <__addsf3>
 800d96c:	4649      	mov	r1, r9
 800d96e:	f7f3 fa09 	bl	8000d84 <__aeabi_fmul>
 800d972:	4957      	ldr	r1, [pc, #348]	; (800dad0 <__kernel_tanf+0x23c>)
 800d974:	9001      	str	r0, [sp, #4]
 800d976:	4628      	mov	r0, r5
 800d978:	f7f3 fa04 	bl	8000d84 <__aeabi_fmul>
 800d97c:	4955      	ldr	r1, [pc, #340]	; (800dad4 <__kernel_tanf+0x240>)
 800d97e:	f7f3 f8f9 	bl	8000b74 <__addsf3>
 800d982:	4629      	mov	r1, r5
 800d984:	f7f3 f9fe 	bl	8000d84 <__aeabi_fmul>
 800d988:	4953      	ldr	r1, [pc, #332]	; (800dad8 <__kernel_tanf+0x244>)
 800d98a:	f7f3 f8f3 	bl	8000b74 <__addsf3>
 800d98e:	4629      	mov	r1, r5
 800d990:	f7f3 f9f8 	bl	8000d84 <__aeabi_fmul>
 800d994:	4951      	ldr	r1, [pc, #324]	; (800dadc <__kernel_tanf+0x248>)
 800d996:	f7f3 f8ed 	bl	8000b74 <__addsf3>
 800d99a:	4629      	mov	r1, r5
 800d99c:	f7f3 f9f2 	bl	8000d84 <__aeabi_fmul>
 800d9a0:	494f      	ldr	r1, [pc, #316]	; (800dae0 <__kernel_tanf+0x24c>)
 800d9a2:	f7f3 f8e7 	bl	8000b74 <__addsf3>
 800d9a6:	4629      	mov	r1, r5
 800d9a8:	f7f3 f9ec 	bl	8000d84 <__aeabi_fmul>
 800d9ac:	494d      	ldr	r1, [pc, #308]	; (800dae4 <__kernel_tanf+0x250>)
 800d9ae:	f7f3 f8e1 	bl	8000b74 <__addsf3>
 800d9b2:	9b01      	ldr	r3, [sp, #4]
 800d9b4:	4601      	mov	r1, r0
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7f3 f8dc 	bl	8000b74 <__addsf3>
 800d9bc:	4659      	mov	r1, fp
 800d9be:	f7f3 f9e1 	bl	8000d84 <__aeabi_fmul>
 800d9c2:	4631      	mov	r1, r6
 800d9c4:	f7f3 f8d6 	bl	8000b74 <__addsf3>
 800d9c8:	4649      	mov	r1, r9
 800d9ca:	f7f3 f9db 	bl	8000d84 <__aeabi_fmul>
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	f7f3 f8d0 	bl	8000b74 <__addsf3>
 800d9d4:	4605      	mov	r5, r0
 800d9d6:	4944      	ldr	r1, [pc, #272]	; (800dae8 <__kernel_tanf+0x254>)
 800d9d8:	4658      	mov	r0, fp
 800d9da:	f7f3 f9d3 	bl	8000d84 <__aeabi_fmul>
 800d9de:	4629      	mov	r1, r5
 800d9e0:	f7f3 f8c8 	bl	8000b74 <__addsf3>
 800d9e4:	4601      	mov	r1, r0
 800d9e6:	4681      	mov	r9, r0
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f7f3 f8c3 	bl	8000b74 <__addsf3>
 800d9ee:	4b2f      	ldr	r3, [pc, #188]	; (800daac <__kernel_tanf+0x218>)
 800d9f0:	4605      	mov	r5, r0
 800d9f2:	459a      	cmp	sl, r3
 800d9f4:	db2b      	blt.n	800da4e <__kernel_tanf+0x1ba>
 800d9f6:	4640      	mov	r0, r8
 800d9f8:	f7f3 f970 	bl	8000cdc <__aeabi_i2f>
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	4606      	mov	r6, r0
 800da00:	4628      	mov	r0, r5
 800da02:	f7f3 f9bf 	bl	8000d84 <__aeabi_fmul>
 800da06:	4631      	mov	r1, r6
 800da08:	4680      	mov	r8, r0
 800da0a:	4628      	mov	r0, r5
 800da0c:	f7f3 f8b2 	bl	8000b74 <__addsf3>
 800da10:	4601      	mov	r1, r0
 800da12:	4640      	mov	r0, r8
 800da14:	f7f3 fa6a 	bl	8000eec <__aeabi_fdiv>
 800da18:	4649      	mov	r1, r9
 800da1a:	f7f3 f8a9 	bl	8000b70 <__aeabi_fsub>
 800da1e:	4601      	mov	r1, r0
 800da20:	4620      	mov	r0, r4
 800da22:	f7f3 f8a5 	bl	8000b70 <__aeabi_fsub>
 800da26:	4601      	mov	r1, r0
 800da28:	f7f3 f8a4 	bl	8000b74 <__addsf3>
 800da2c:	4601      	mov	r1, r0
 800da2e:	4630      	mov	r0, r6
 800da30:	f7f3 f89e 	bl	8000b70 <__aeabi_fsub>
 800da34:	17bf      	asrs	r7, r7, #30
 800da36:	f007 0702 	and.w	r7, r7, #2
 800da3a:	4604      	mov	r4, r0
 800da3c:	f1c7 0001 	rsb	r0, r7, #1
 800da40:	f7f3 f94c 	bl	8000cdc <__aeabi_i2f>
 800da44:	4601      	mov	r1, r0
 800da46:	4620      	mov	r0, r4
 800da48:	f7f3 f99c 	bl	8000d84 <__aeabi_fmul>
 800da4c:	e73e      	b.n	800d8cc <__kernel_tanf+0x38>
 800da4e:	f1b8 0f01 	cmp.w	r8, #1
 800da52:	d027      	beq.n	800daa4 <__kernel_tanf+0x210>
 800da54:	4e25      	ldr	r6, [pc, #148]	; (800daec <__kernel_tanf+0x258>)
 800da56:	4601      	mov	r1, r0
 800da58:	ea06 0800 	and.w	r8, r6, r0
 800da5c:	4812      	ldr	r0, [pc, #72]	; (800daa8 <__kernel_tanf+0x214>)
 800da5e:	f7f3 fa45 	bl	8000eec <__aeabi_fdiv>
 800da62:	4621      	mov	r1, r4
 800da64:	4006      	ands	r6, r0
 800da66:	4607      	mov	r7, r0
 800da68:	4640      	mov	r0, r8
 800da6a:	f7f3 f881 	bl	8000b70 <__aeabi_fsub>
 800da6e:	4601      	mov	r1, r0
 800da70:	4648      	mov	r0, r9
 800da72:	f7f3 f87d 	bl	8000b70 <__aeabi_fsub>
 800da76:	4631      	mov	r1, r6
 800da78:	f7f3 f984 	bl	8000d84 <__aeabi_fmul>
 800da7c:	4631      	mov	r1, r6
 800da7e:	4604      	mov	r4, r0
 800da80:	4640      	mov	r0, r8
 800da82:	f7f3 f97f 	bl	8000d84 <__aeabi_fmul>
 800da86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800da8a:	f7f3 f873 	bl	8000b74 <__addsf3>
 800da8e:	4601      	mov	r1, r0
 800da90:	4620      	mov	r0, r4
 800da92:	f7f3 f86f 	bl	8000b74 <__addsf3>
 800da96:	4639      	mov	r1, r7
 800da98:	f7f3 f974 	bl	8000d84 <__aeabi_fmul>
 800da9c:	4631      	mov	r1, r6
 800da9e:	f7f3 f869 	bl	8000b74 <__addsf3>
 800daa2:	e713      	b.n	800d8cc <__kernel_tanf+0x38>
 800daa4:	4604      	mov	r4, r0
 800daa6:	e712      	b.n	800d8ce <__kernel_tanf+0x3a>
 800daa8:	bf800000 	.word	0xbf800000
 800daac:	3f2ca140 	.word	0x3f2ca140
 800dab0:	3f490fda 	.word	0x3f490fda
 800dab4:	33222168 	.word	0x33222168
 800dab8:	37d95384 	.word	0x37d95384
 800dabc:	3895c07a 	.word	0x3895c07a
 800dac0:	398137b9 	.word	0x398137b9
 800dac4:	3abede48 	.word	0x3abede48
 800dac8:	3c11371f 	.word	0x3c11371f
 800dacc:	3d5d0dd1 	.word	0x3d5d0dd1
 800dad0:	b79bae5f 	.word	0xb79bae5f
 800dad4:	38a3f445 	.word	0x38a3f445
 800dad8:	3a1a26c8 	.word	0x3a1a26c8
 800dadc:	3b6b6916 	.word	0x3b6b6916
 800dae0:	3cb327a4 	.word	0x3cb327a4
 800dae4:	3e088889 	.word	0x3e088889
 800dae8:	3eaaaaab 	.word	0x3eaaaaab
 800daec:	fffff000 	.word	0xfffff000

0800daf0 <atan>:
 800daf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	4bb6      	ldr	r3, [pc, #728]	; (800ddd0 <atan+0x2e0>)
 800daf6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dafa:	429e      	cmp	r6, r3
 800dafc:	4604      	mov	r4, r0
 800dafe:	460d      	mov	r5, r1
 800db00:	468b      	mov	fp, r1
 800db02:	dd17      	ble.n	800db34 <atan+0x44>
 800db04:	4bb3      	ldr	r3, [pc, #716]	; (800ddd4 <atan+0x2e4>)
 800db06:	429e      	cmp	r6, r3
 800db08:	dc01      	bgt.n	800db0e <atan+0x1e>
 800db0a:	d109      	bne.n	800db20 <atan+0x30>
 800db0c:	b140      	cbz	r0, 800db20 <atan+0x30>
 800db0e:	4622      	mov	r2, r4
 800db10:	462b      	mov	r3, r5
 800db12:	4620      	mov	r0, r4
 800db14:	4629      	mov	r1, r5
 800db16:	f7f2 fb29 	bl	800016c <__adddf3>
 800db1a:	4604      	mov	r4, r0
 800db1c:	460d      	mov	r5, r1
 800db1e:	e005      	b.n	800db2c <atan+0x3c>
 800db20:	f1bb 0f00 	cmp.w	fp, #0
 800db24:	4cac      	ldr	r4, [pc, #688]	; (800ddd8 <atan+0x2e8>)
 800db26:	f300 8121 	bgt.w	800dd6c <atan+0x27c>
 800db2a:	4dac      	ldr	r5, [pc, #688]	; (800dddc <atan+0x2ec>)
 800db2c:	4620      	mov	r0, r4
 800db2e:	4629      	mov	r1, r5
 800db30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db34:	4baa      	ldr	r3, [pc, #680]	; (800dde0 <atan+0x2f0>)
 800db36:	429e      	cmp	r6, r3
 800db38:	dc11      	bgt.n	800db5e <atan+0x6e>
 800db3a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800db3e:	429e      	cmp	r6, r3
 800db40:	dc0a      	bgt.n	800db58 <atan+0x68>
 800db42:	a38b      	add	r3, pc, #556	; (adr r3, 800dd70 <atan+0x280>)
 800db44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db48:	f7f2 fb10 	bl	800016c <__adddf3>
 800db4c:	2200      	movs	r2, #0
 800db4e:	4ba5      	ldr	r3, [pc, #660]	; (800dde4 <atan+0x2f4>)
 800db50:	f7f2 ff52 	bl	80009f8 <__aeabi_dcmpgt>
 800db54:	2800      	cmp	r0, #0
 800db56:	d1e9      	bne.n	800db2c <atan+0x3c>
 800db58:	f04f 3aff 	mov.w	sl, #4294967295
 800db5c:	e027      	b.n	800dbae <atan+0xbe>
 800db5e:	f000 f951 	bl	800de04 <fabs>
 800db62:	4ba1      	ldr	r3, [pc, #644]	; (800dde8 <atan+0x2f8>)
 800db64:	4604      	mov	r4, r0
 800db66:	429e      	cmp	r6, r3
 800db68:	460d      	mov	r5, r1
 800db6a:	f300 80b8 	bgt.w	800dcde <atan+0x1ee>
 800db6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800db72:	429e      	cmp	r6, r3
 800db74:	f300 809c 	bgt.w	800dcb0 <atan+0x1c0>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	f7f2 faf6 	bl	800016c <__adddf3>
 800db80:	2200      	movs	r2, #0
 800db82:	4b98      	ldr	r3, [pc, #608]	; (800dde4 <atan+0x2f4>)
 800db84:	f7f2 faf0 	bl	8000168 <__aeabi_dsub>
 800db88:	2200      	movs	r2, #0
 800db8a:	4606      	mov	r6, r0
 800db8c:	460f      	mov	r7, r1
 800db8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db92:	4620      	mov	r0, r4
 800db94:	4629      	mov	r1, r5
 800db96:	f7f2 fae9 	bl	800016c <__adddf3>
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	4630      	mov	r0, r6
 800dba0:	4639      	mov	r1, r7
 800dba2:	f7f2 fdc3 	bl	800072c <__aeabi_ddiv>
 800dba6:	f04f 0a00 	mov.w	sl, #0
 800dbaa:	4604      	mov	r4, r0
 800dbac:	460d      	mov	r5, r1
 800dbae:	4622      	mov	r2, r4
 800dbb0:	462b      	mov	r3, r5
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	f7f2 fc8f 	bl	80004d8 <__aeabi_dmul>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4680      	mov	r8, r0
 800dbc0:	4689      	mov	r9, r1
 800dbc2:	f7f2 fc89 	bl	80004d8 <__aeabi_dmul>
 800dbc6:	a36c      	add	r3, pc, #432	; (adr r3, 800dd78 <atan+0x288>)
 800dbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbcc:	4606      	mov	r6, r0
 800dbce:	460f      	mov	r7, r1
 800dbd0:	f7f2 fc82 	bl	80004d8 <__aeabi_dmul>
 800dbd4:	a36a      	add	r3, pc, #424	; (adr r3, 800dd80 <atan+0x290>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	f7f2 fac7 	bl	800016c <__adddf3>
 800dbde:	4632      	mov	r2, r6
 800dbe0:	463b      	mov	r3, r7
 800dbe2:	f7f2 fc79 	bl	80004d8 <__aeabi_dmul>
 800dbe6:	a368      	add	r3, pc, #416	; (adr r3, 800dd88 <atan+0x298>)
 800dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbec:	f7f2 fabe 	bl	800016c <__adddf3>
 800dbf0:	4632      	mov	r2, r6
 800dbf2:	463b      	mov	r3, r7
 800dbf4:	f7f2 fc70 	bl	80004d8 <__aeabi_dmul>
 800dbf8:	a365      	add	r3, pc, #404	; (adr r3, 800dd90 <atan+0x2a0>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 fab5 	bl	800016c <__adddf3>
 800dc02:	4632      	mov	r2, r6
 800dc04:	463b      	mov	r3, r7
 800dc06:	f7f2 fc67 	bl	80004d8 <__aeabi_dmul>
 800dc0a:	a363      	add	r3, pc, #396	; (adr r3, 800dd98 <atan+0x2a8>)
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	f7f2 faac 	bl	800016c <__adddf3>
 800dc14:	4632      	mov	r2, r6
 800dc16:	463b      	mov	r3, r7
 800dc18:	f7f2 fc5e 	bl	80004d8 <__aeabi_dmul>
 800dc1c:	a360      	add	r3, pc, #384	; (adr r3, 800dda0 <atan+0x2b0>)
 800dc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc22:	f7f2 faa3 	bl	800016c <__adddf3>
 800dc26:	4642      	mov	r2, r8
 800dc28:	464b      	mov	r3, r9
 800dc2a:	f7f2 fc55 	bl	80004d8 <__aeabi_dmul>
 800dc2e:	a35e      	add	r3, pc, #376	; (adr r3, 800dda8 <atan+0x2b8>)
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	4680      	mov	r8, r0
 800dc36:	4689      	mov	r9, r1
 800dc38:	4630      	mov	r0, r6
 800dc3a:	4639      	mov	r1, r7
 800dc3c:	f7f2 fc4c 	bl	80004d8 <__aeabi_dmul>
 800dc40:	a35b      	add	r3, pc, #364	; (adr r3, 800ddb0 <atan+0x2c0>)
 800dc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc46:	f7f2 fa8f 	bl	8000168 <__aeabi_dsub>
 800dc4a:	4632      	mov	r2, r6
 800dc4c:	463b      	mov	r3, r7
 800dc4e:	f7f2 fc43 	bl	80004d8 <__aeabi_dmul>
 800dc52:	a359      	add	r3, pc, #356	; (adr r3, 800ddb8 <atan+0x2c8>)
 800dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc58:	f7f2 fa86 	bl	8000168 <__aeabi_dsub>
 800dc5c:	4632      	mov	r2, r6
 800dc5e:	463b      	mov	r3, r7
 800dc60:	f7f2 fc3a 	bl	80004d8 <__aeabi_dmul>
 800dc64:	a356      	add	r3, pc, #344	; (adr r3, 800ddc0 <atan+0x2d0>)
 800dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6a:	f7f2 fa7d 	bl	8000168 <__aeabi_dsub>
 800dc6e:	4632      	mov	r2, r6
 800dc70:	463b      	mov	r3, r7
 800dc72:	f7f2 fc31 	bl	80004d8 <__aeabi_dmul>
 800dc76:	a354      	add	r3, pc, #336	; (adr r3, 800ddc8 <atan+0x2d8>)
 800dc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7c:	f7f2 fa74 	bl	8000168 <__aeabi_dsub>
 800dc80:	4632      	mov	r2, r6
 800dc82:	463b      	mov	r3, r7
 800dc84:	f7f2 fc28 	bl	80004d8 <__aeabi_dmul>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	4640      	mov	r0, r8
 800dc8e:	4649      	mov	r1, r9
 800dc90:	f7f2 fa6c 	bl	800016c <__adddf3>
 800dc94:	4622      	mov	r2, r4
 800dc96:	462b      	mov	r3, r5
 800dc98:	f7f2 fc1e 	bl	80004d8 <__aeabi_dmul>
 800dc9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dca0:	4602      	mov	r2, r0
 800dca2:	460b      	mov	r3, r1
 800dca4:	d144      	bne.n	800dd30 <atan+0x240>
 800dca6:	4620      	mov	r0, r4
 800dca8:	4629      	mov	r1, r5
 800dcaa:	f7f2 fa5d 	bl	8000168 <__aeabi_dsub>
 800dcae:	e734      	b.n	800db1a <atan+0x2a>
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	4b4c      	ldr	r3, [pc, #304]	; (800dde4 <atan+0x2f4>)
 800dcb4:	f7f2 fa58 	bl	8000168 <__aeabi_dsub>
 800dcb8:	2200      	movs	r2, #0
 800dcba:	4606      	mov	r6, r0
 800dcbc:	460f      	mov	r7, r1
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	4629      	mov	r1, r5
 800dcc2:	4b48      	ldr	r3, [pc, #288]	; (800dde4 <atan+0x2f4>)
 800dcc4:	f7f2 fa52 	bl	800016c <__adddf3>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	4630      	mov	r0, r6
 800dcce:	4639      	mov	r1, r7
 800dcd0:	f7f2 fd2c 	bl	800072c <__aeabi_ddiv>
 800dcd4:	f04f 0a01 	mov.w	sl, #1
 800dcd8:	4604      	mov	r4, r0
 800dcda:	460d      	mov	r5, r1
 800dcdc:	e767      	b.n	800dbae <atan+0xbe>
 800dcde:	4b43      	ldr	r3, [pc, #268]	; (800ddec <atan+0x2fc>)
 800dce0:	429e      	cmp	r6, r3
 800dce2:	da1a      	bge.n	800dd1a <atan+0x22a>
 800dce4:	2200      	movs	r2, #0
 800dce6:	4b42      	ldr	r3, [pc, #264]	; (800ddf0 <atan+0x300>)
 800dce8:	f7f2 fa3e 	bl	8000168 <__aeabi_dsub>
 800dcec:	2200      	movs	r2, #0
 800dcee:	4606      	mov	r6, r0
 800dcf0:	460f      	mov	r7, r1
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	4629      	mov	r1, r5
 800dcf6:	4b3e      	ldr	r3, [pc, #248]	; (800ddf0 <atan+0x300>)
 800dcf8:	f7f2 fbee 	bl	80004d8 <__aeabi_dmul>
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	4b39      	ldr	r3, [pc, #228]	; (800dde4 <atan+0x2f4>)
 800dd00:	f7f2 fa34 	bl	800016c <__adddf3>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4630      	mov	r0, r6
 800dd0a:	4639      	mov	r1, r7
 800dd0c:	f7f2 fd0e 	bl	800072c <__aeabi_ddiv>
 800dd10:	f04f 0a02 	mov.w	sl, #2
 800dd14:	4604      	mov	r4, r0
 800dd16:	460d      	mov	r5, r1
 800dd18:	e749      	b.n	800dbae <atan+0xbe>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	2000      	movs	r0, #0
 800dd20:	4934      	ldr	r1, [pc, #208]	; (800ddf4 <atan+0x304>)
 800dd22:	f7f2 fd03 	bl	800072c <__aeabi_ddiv>
 800dd26:	f04f 0a03 	mov.w	sl, #3
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	460d      	mov	r5, r1
 800dd2e:	e73e      	b.n	800dbae <atan+0xbe>
 800dd30:	4b31      	ldr	r3, [pc, #196]	; (800ddf8 <atan+0x308>)
 800dd32:	4e32      	ldr	r6, [pc, #200]	; (800ddfc <atan+0x30c>)
 800dd34:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dd38:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800dd3c:	e9da 2300 	ldrd	r2, r3, [sl]
 800dd40:	f7f2 fa12 	bl	8000168 <__aeabi_dsub>
 800dd44:	4622      	mov	r2, r4
 800dd46:	462b      	mov	r3, r5
 800dd48:	f7f2 fa0e 	bl	8000168 <__aeabi_dsub>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	460b      	mov	r3, r1
 800dd50:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dd54:	f7f2 fa08 	bl	8000168 <__aeabi_dsub>
 800dd58:	f1bb 0f00 	cmp.w	fp, #0
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	460d      	mov	r5, r1
 800dd60:	f6bf aee4 	bge.w	800db2c <atan+0x3c>
 800dd64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd68:	461d      	mov	r5, r3
 800dd6a:	e6df      	b.n	800db2c <atan+0x3c>
 800dd6c:	4d24      	ldr	r5, [pc, #144]	; (800de00 <atan+0x310>)
 800dd6e:	e6dd      	b.n	800db2c <atan+0x3c>
 800dd70:	8800759c 	.word	0x8800759c
 800dd74:	7e37e43c 	.word	0x7e37e43c
 800dd78:	e322da11 	.word	0xe322da11
 800dd7c:	3f90ad3a 	.word	0x3f90ad3a
 800dd80:	24760deb 	.word	0x24760deb
 800dd84:	3fa97b4b 	.word	0x3fa97b4b
 800dd88:	a0d03d51 	.word	0xa0d03d51
 800dd8c:	3fb10d66 	.word	0x3fb10d66
 800dd90:	c54c206e 	.word	0xc54c206e
 800dd94:	3fb745cd 	.word	0x3fb745cd
 800dd98:	920083ff 	.word	0x920083ff
 800dd9c:	3fc24924 	.word	0x3fc24924
 800dda0:	5555550d 	.word	0x5555550d
 800dda4:	3fd55555 	.word	0x3fd55555
 800dda8:	2c6a6c2f 	.word	0x2c6a6c2f
 800ddac:	bfa2b444 	.word	0xbfa2b444
 800ddb0:	52defd9a 	.word	0x52defd9a
 800ddb4:	3fadde2d 	.word	0x3fadde2d
 800ddb8:	af749a6d 	.word	0xaf749a6d
 800ddbc:	3fb3b0f2 	.word	0x3fb3b0f2
 800ddc0:	fe231671 	.word	0xfe231671
 800ddc4:	3fbc71c6 	.word	0x3fbc71c6
 800ddc8:	9998ebc4 	.word	0x9998ebc4
 800ddcc:	3fc99999 	.word	0x3fc99999
 800ddd0:	440fffff 	.word	0x440fffff
 800ddd4:	7ff00000 	.word	0x7ff00000
 800ddd8:	54442d18 	.word	0x54442d18
 800dddc:	bff921fb 	.word	0xbff921fb
 800dde0:	3fdbffff 	.word	0x3fdbffff
 800dde4:	3ff00000 	.word	0x3ff00000
 800dde8:	3ff2ffff 	.word	0x3ff2ffff
 800ddec:	40038000 	.word	0x40038000
 800ddf0:	3ff80000 	.word	0x3ff80000
 800ddf4:	bff00000 	.word	0xbff00000
 800ddf8:	0800f060 	.word	0x0800f060
 800ddfc:	0800f040 	.word	0x0800f040
 800de00:	3ff921fb 	.word	0x3ff921fb

0800de04 <fabs>:
 800de04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800de08:	4770      	bx	lr
 800de0a:	0000      	movs	r0, r0
 800de0c:	0000      	movs	r0, r0
	...

0800de10 <floor>:
 800de10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de14:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800de18:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800de1c:	2e13      	cmp	r6, #19
 800de1e:	4602      	mov	r2, r0
 800de20:	460b      	mov	r3, r1
 800de22:	4607      	mov	r7, r0
 800de24:	460c      	mov	r4, r1
 800de26:	4605      	mov	r5, r0
 800de28:	dc34      	bgt.n	800de94 <floor+0x84>
 800de2a:	2e00      	cmp	r6, #0
 800de2c:	da15      	bge.n	800de5a <floor+0x4a>
 800de2e:	a334      	add	r3, pc, #208	; (adr r3, 800df00 <floor+0xf0>)
 800de30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de34:	f7f2 f99a 	bl	800016c <__adddf3>
 800de38:	2200      	movs	r2, #0
 800de3a:	2300      	movs	r3, #0
 800de3c:	f7f2 fddc 	bl	80009f8 <__aeabi_dcmpgt>
 800de40:	b140      	cbz	r0, 800de54 <floor+0x44>
 800de42:	2c00      	cmp	r4, #0
 800de44:	da59      	bge.n	800defa <floor+0xea>
 800de46:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800de4a:	ea57 0503 	orrs.w	r5, r7, r3
 800de4e:	d001      	beq.n	800de54 <floor+0x44>
 800de50:	2500      	movs	r5, #0
 800de52:	4c2d      	ldr	r4, [pc, #180]	; (800df08 <floor+0xf8>)
 800de54:	4623      	mov	r3, r4
 800de56:	462f      	mov	r7, r5
 800de58:	e025      	b.n	800dea6 <floor+0x96>
 800de5a:	4a2c      	ldr	r2, [pc, #176]	; (800df0c <floor+0xfc>)
 800de5c:	fa42 f806 	asr.w	r8, r2, r6
 800de60:	ea01 0208 	and.w	r2, r1, r8
 800de64:	4302      	orrs	r2, r0
 800de66:	d01e      	beq.n	800dea6 <floor+0x96>
 800de68:	a325      	add	r3, pc, #148	; (adr r3, 800df00 <floor+0xf0>)
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	f7f2 f97d 	bl	800016c <__adddf3>
 800de72:	2200      	movs	r2, #0
 800de74:	2300      	movs	r3, #0
 800de76:	f7f2 fdbf 	bl	80009f8 <__aeabi_dcmpgt>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d0ea      	beq.n	800de54 <floor+0x44>
 800de7e:	2c00      	cmp	r4, #0
 800de80:	bfbe      	ittt	lt
 800de82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800de86:	fa43 f606 	asrlt.w	r6, r3, r6
 800de8a:	19a4      	addlt	r4, r4, r6
 800de8c:	2500      	movs	r5, #0
 800de8e:	ea24 0408 	bic.w	r4, r4, r8
 800de92:	e7df      	b.n	800de54 <floor+0x44>
 800de94:	2e33      	cmp	r6, #51	; 0x33
 800de96:	dd0a      	ble.n	800deae <floor+0x9e>
 800de98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800de9c:	d103      	bne.n	800dea6 <floor+0x96>
 800de9e:	f7f2 f965 	bl	800016c <__adddf3>
 800dea2:	4607      	mov	r7, r0
 800dea4:	460b      	mov	r3, r1
 800dea6:	4638      	mov	r0, r7
 800dea8:	4619      	mov	r1, r3
 800deaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deae:	f04f 32ff 	mov.w	r2, #4294967295
 800deb2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800deb6:	fa22 f808 	lsr.w	r8, r2, r8
 800deba:	ea18 0f00 	tst.w	r8, r0
 800debe:	d0f2      	beq.n	800dea6 <floor+0x96>
 800dec0:	a30f      	add	r3, pc, #60	; (adr r3, 800df00 <floor+0xf0>)
 800dec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec6:	f7f2 f951 	bl	800016c <__adddf3>
 800deca:	2200      	movs	r2, #0
 800decc:	2300      	movs	r3, #0
 800dece:	f7f2 fd93 	bl	80009f8 <__aeabi_dcmpgt>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d0be      	beq.n	800de54 <floor+0x44>
 800ded6:	2c00      	cmp	r4, #0
 800ded8:	da02      	bge.n	800dee0 <floor+0xd0>
 800deda:	2e14      	cmp	r6, #20
 800dedc:	d103      	bne.n	800dee6 <floor+0xd6>
 800dede:	3401      	adds	r4, #1
 800dee0:	ea25 0508 	bic.w	r5, r5, r8
 800dee4:	e7b6      	b.n	800de54 <floor+0x44>
 800dee6:	2301      	movs	r3, #1
 800dee8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800deec:	fa03 f606 	lsl.w	r6, r3, r6
 800def0:	4435      	add	r5, r6
 800def2:	42bd      	cmp	r5, r7
 800def4:	bf38      	it	cc
 800def6:	18e4      	addcc	r4, r4, r3
 800def8:	e7f2      	b.n	800dee0 <floor+0xd0>
 800defa:	2500      	movs	r5, #0
 800defc:	462c      	mov	r4, r5
 800defe:	e7a9      	b.n	800de54 <floor+0x44>
 800df00:	8800759c 	.word	0x8800759c
 800df04:	7e37e43c 	.word	0x7e37e43c
 800df08:	bff00000 	.word	0xbff00000
 800df0c:	000fffff 	.word	0x000fffff

0800df10 <scalbn>:
 800df10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df12:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800df16:	4604      	mov	r4, r0
 800df18:	460d      	mov	r5, r1
 800df1a:	4617      	mov	r7, r2
 800df1c:	460b      	mov	r3, r1
 800df1e:	b996      	cbnz	r6, 800df46 <scalbn+0x36>
 800df20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df24:	4303      	orrs	r3, r0
 800df26:	d039      	beq.n	800df9c <scalbn+0x8c>
 800df28:	4b35      	ldr	r3, [pc, #212]	; (800e000 <scalbn+0xf0>)
 800df2a:	2200      	movs	r2, #0
 800df2c:	f7f2 fad4 	bl	80004d8 <__aeabi_dmul>
 800df30:	4b34      	ldr	r3, [pc, #208]	; (800e004 <scalbn+0xf4>)
 800df32:	4604      	mov	r4, r0
 800df34:	429f      	cmp	r7, r3
 800df36:	460d      	mov	r5, r1
 800df38:	da0f      	bge.n	800df5a <scalbn+0x4a>
 800df3a:	a32d      	add	r3, pc, #180	; (adr r3, 800dff0 <scalbn+0xe0>)
 800df3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df40:	f7f2 faca 	bl	80004d8 <__aeabi_dmul>
 800df44:	e006      	b.n	800df54 <scalbn+0x44>
 800df46:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800df4a:	4296      	cmp	r6, r2
 800df4c:	d10a      	bne.n	800df64 <scalbn+0x54>
 800df4e:	4602      	mov	r2, r0
 800df50:	f7f2 f90c 	bl	800016c <__adddf3>
 800df54:	4604      	mov	r4, r0
 800df56:	460d      	mov	r5, r1
 800df58:	e020      	b.n	800df9c <scalbn+0x8c>
 800df5a:	460b      	mov	r3, r1
 800df5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800df60:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800df64:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800df68:	19b9      	adds	r1, r7, r6
 800df6a:	4291      	cmp	r1, r2
 800df6c:	dd0e      	ble.n	800df8c <scalbn+0x7c>
 800df6e:	a322      	add	r3, pc, #136	; (adr r3, 800dff8 <scalbn+0xe8>)
 800df70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df74:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800df78:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800df7c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800df80:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800df84:	4820      	ldr	r0, [pc, #128]	; (800e008 <scalbn+0xf8>)
 800df86:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800df8a:	e7d9      	b.n	800df40 <scalbn+0x30>
 800df8c:	2900      	cmp	r1, #0
 800df8e:	dd08      	ble.n	800dfa2 <scalbn+0x92>
 800df90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800df9c:	4620      	mov	r0, r4
 800df9e:	4629      	mov	r1, r5
 800dfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfa2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800dfa6:	da16      	bge.n	800dfd6 <scalbn+0xc6>
 800dfa8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dfac:	429f      	cmp	r7, r3
 800dfae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800dfb2:	dd08      	ble.n	800dfc6 <scalbn+0xb6>
 800dfb4:	4c15      	ldr	r4, [pc, #84]	; (800e00c <scalbn+0xfc>)
 800dfb6:	4814      	ldr	r0, [pc, #80]	; (800e008 <scalbn+0xf8>)
 800dfb8:	f363 74df 	bfi	r4, r3, #31, #1
 800dfbc:	a30e      	add	r3, pc, #56	; (adr r3, 800dff8 <scalbn+0xe8>)
 800dfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc2:	4621      	mov	r1, r4
 800dfc4:	e7bc      	b.n	800df40 <scalbn+0x30>
 800dfc6:	4c12      	ldr	r4, [pc, #72]	; (800e010 <scalbn+0x100>)
 800dfc8:	4812      	ldr	r0, [pc, #72]	; (800e014 <scalbn+0x104>)
 800dfca:	f363 74df 	bfi	r4, r3, #31, #1
 800dfce:	a308      	add	r3, pc, #32	; (adr r3, 800dff0 <scalbn+0xe0>)
 800dfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd4:	e7f5      	b.n	800dfc2 <scalbn+0xb2>
 800dfd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfda:	3136      	adds	r1, #54	; 0x36
 800dfdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfe0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	2200      	movs	r2, #0
 800dfea:	4b0b      	ldr	r3, [pc, #44]	; (800e018 <scalbn+0x108>)
 800dfec:	e7a8      	b.n	800df40 <scalbn+0x30>
 800dfee:	bf00      	nop
 800dff0:	c2f8f359 	.word	0xc2f8f359
 800dff4:	01a56e1f 	.word	0x01a56e1f
 800dff8:	8800759c 	.word	0x8800759c
 800dffc:	7e37e43c 	.word	0x7e37e43c
 800e000:	43500000 	.word	0x43500000
 800e004:	ffff3cb0 	.word	0xffff3cb0
 800e008:	8800759c 	.word	0x8800759c
 800e00c:	7e37e43c 	.word	0x7e37e43c
 800e010:	01a56e1f 	.word	0x01a56e1f
 800e014:	c2f8f359 	.word	0xc2f8f359
 800e018:	3c900000 	.word	0x3c900000

0800e01c <floorf>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800e022:	3d7f      	subs	r5, #127	; 0x7f
 800e024:	2d16      	cmp	r5, #22
 800e026:	4601      	mov	r1, r0
 800e028:	4604      	mov	r4, r0
 800e02a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e02e:	dc26      	bgt.n	800e07e <floorf+0x62>
 800e030:	2d00      	cmp	r5, #0
 800e032:	da0e      	bge.n	800e052 <floorf+0x36>
 800e034:	4917      	ldr	r1, [pc, #92]	; (800e094 <floorf+0x78>)
 800e036:	f7f2 fd9d 	bl	8000b74 <__addsf3>
 800e03a:	2100      	movs	r1, #0
 800e03c:	f7f3 f85e 	bl	80010fc <__aeabi_fcmpgt>
 800e040:	b128      	cbz	r0, 800e04e <floorf+0x32>
 800e042:	2c00      	cmp	r4, #0
 800e044:	da23      	bge.n	800e08e <floorf+0x72>
 800e046:	4b14      	ldr	r3, [pc, #80]	; (800e098 <floorf+0x7c>)
 800e048:	2e00      	cmp	r6, #0
 800e04a:	bf18      	it	ne
 800e04c:	461c      	movne	r4, r3
 800e04e:	4621      	mov	r1, r4
 800e050:	e01b      	b.n	800e08a <floorf+0x6e>
 800e052:	4e12      	ldr	r6, [pc, #72]	; (800e09c <floorf+0x80>)
 800e054:	412e      	asrs	r6, r5
 800e056:	4230      	tst	r0, r6
 800e058:	d017      	beq.n	800e08a <floorf+0x6e>
 800e05a:	490e      	ldr	r1, [pc, #56]	; (800e094 <floorf+0x78>)
 800e05c:	f7f2 fd8a 	bl	8000b74 <__addsf3>
 800e060:	2100      	movs	r1, #0
 800e062:	f7f3 f84b 	bl	80010fc <__aeabi_fcmpgt>
 800e066:	2800      	cmp	r0, #0
 800e068:	d0f1      	beq.n	800e04e <floorf+0x32>
 800e06a:	2c00      	cmp	r4, #0
 800e06c:	bfbe      	ittt	lt
 800e06e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800e072:	fa43 f505 	asrlt.w	r5, r3, r5
 800e076:	1964      	addlt	r4, r4, r5
 800e078:	ea24 0406 	bic.w	r4, r4, r6
 800e07c:	e7e7      	b.n	800e04e <floorf+0x32>
 800e07e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e082:	d302      	bcc.n	800e08a <floorf+0x6e>
 800e084:	f7f2 fd76 	bl	8000b74 <__addsf3>
 800e088:	4601      	mov	r1, r0
 800e08a:	4608      	mov	r0, r1
 800e08c:	bd70      	pop	{r4, r5, r6, pc}
 800e08e:	2400      	movs	r4, #0
 800e090:	e7dd      	b.n	800e04e <floorf+0x32>
 800e092:	bf00      	nop
 800e094:	7149f2ca 	.word	0x7149f2ca
 800e098:	bf800000 	.word	0xbf800000
 800e09c:	007fffff 	.word	0x007fffff

0800e0a0 <scalbnf>:
 800e0a0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800e0a4:	b538      	push	{r3, r4, r5, lr}
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	460d      	mov	r5, r1
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	d02a      	beq.n	800e104 <scalbnf+0x64>
 800e0ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e0b2:	d304      	bcc.n	800e0be <scalbnf+0x1e>
 800e0b4:	4601      	mov	r1, r0
 800e0b6:	f7f2 fd5d 	bl	8000b74 <__addsf3>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	e022      	b.n	800e104 <scalbnf+0x64>
 800e0be:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800e0c2:	d117      	bne.n	800e0f4 <scalbnf+0x54>
 800e0c4:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800e0c8:	f7f2 fe5c 	bl	8000d84 <__aeabi_fmul>
 800e0cc:	4a17      	ldr	r2, [pc, #92]	; (800e12c <scalbnf+0x8c>)
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	4295      	cmp	r5, r2
 800e0d2:	db0b      	blt.n	800e0ec <scalbnf+0x4c>
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e0da:	3a19      	subs	r2, #25
 800e0dc:	442a      	add	r2, r5
 800e0de:	2afe      	cmp	r2, #254	; 0xfe
 800e0e0:	dd0a      	ble.n	800e0f8 <scalbnf+0x58>
 800e0e2:	4913      	ldr	r1, [pc, #76]	; (800e130 <scalbnf+0x90>)
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f361 001e 	bfi	r0, r1, #0, #31
 800e0ea:	e000      	b.n	800e0ee <scalbnf+0x4e>
 800e0ec:	4911      	ldr	r1, [pc, #68]	; (800e134 <scalbnf+0x94>)
 800e0ee:	f7f2 fe49 	bl	8000d84 <__aeabi_fmul>
 800e0f2:	e7e2      	b.n	800e0ba <scalbnf+0x1a>
 800e0f4:	0dd2      	lsrs	r2, r2, #23
 800e0f6:	e7f1      	b.n	800e0dc <scalbnf+0x3c>
 800e0f8:	2a00      	cmp	r2, #0
 800e0fa:	dd05      	ble.n	800e108 <scalbnf+0x68>
 800e0fc:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800e100:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800e104:	4618      	mov	r0, r3
 800e106:	bd38      	pop	{r3, r4, r5, pc}
 800e108:	f112 0f16 	cmn.w	r2, #22
 800e10c:	da05      	bge.n	800e11a <scalbnf+0x7a>
 800e10e:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e112:	4295      	cmp	r5, r2
 800e114:	dce5      	bgt.n	800e0e2 <scalbnf+0x42>
 800e116:	4907      	ldr	r1, [pc, #28]	; (800e134 <scalbnf+0x94>)
 800e118:	e7e4      	b.n	800e0e4 <scalbnf+0x44>
 800e11a:	3219      	adds	r2, #25
 800e11c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800e120:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800e124:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800e128:	e7e1      	b.n	800e0ee <scalbnf+0x4e>
 800e12a:	bf00      	nop
 800e12c:	ffff3cb0 	.word	0xffff3cb0
 800e130:	7149f2ca 	.word	0x7149f2ca
 800e134:	0da24260 	.word	0x0da24260

0800e138 <_init>:
 800e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13a:	bf00      	nop
 800e13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e13e:	bc08      	pop	{r3}
 800e140:	469e      	mov	lr, r3
 800e142:	4770      	bx	lr

0800e144 <_fini>:
 800e144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e146:	bf00      	nop
 800e148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e14a:	bc08      	pop	{r3}
 800e14c:	469e      	mov	lr, r3
 800e14e:	4770      	bx	lr
